#+AUTHOR:    Viktoriia Kosinova
#+TITLE:     Mental Athlete's Wife ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     viqsiq@gmail.com
#+LANGUAGE: en
#+STARTUP: showall indent
#+PROPERTY: header-args :comments org

* Numeric operations
#+begin_src python :results output
print(123 + 222)   #Integer addition
#+end_src

#+RESULTS:
: 345

#+begin_src python :results output
print(1.5 * 4)     #Floating-point multiplication
#+end_src

#+RESULTS:
: 6.0

#+begin_src python :results output
print (2 ** 100)   #2 to the power 100
#+end_src

#+RESULTS:
: 1267650600228229401496703205376

Handful of useful numeric modules that we import for use The =math=
module contains more advanced numeric tools as functions, while the
=random= module performs random number generation and random selections.
#+begin_src python :results output
  import math
  print(math.pi)
  print(math.sqrt(85))
#+end_src

#+RESULTS:
: 3.141592653589793
: 9.219544457292887


#+begin_src python :results output
  import random
  print(random.random())
  print(random.choice([1, 2, 3, 4]))
#+end_src

#+RESULTS:
: 0.7773632006937559
: 1

* String operations

** Lenght and slice

#+begin_src python :results output
  S = 'Spam'
  print(len(S))       #lenght
  print(S[0])         #The first item in S, indexing by zero-based position
  print(S[1])         #The second item from the left
  print(S[-1])        #The last item from the end in S
#+end_src

#+RESULTS:
: 4
: S
: p
: m

#+begin_src sh :results output
  cat test_str.py
#+end_src

#+RESULTS:
: S = 'Spam'

#+begin_src python :results output
  from test_str import S
  print(S[1:3])       # Slice of S from offsets 1 through 2 (not 3)
  print(S[1:])        # Everything past the first (1:len(S))
  print(S[0:3])       # Everything but the last
  print(S[:3])        # Same as S[0:3]
  print(S[:-1])       # Everything but the last again, but simpler
  print(S[:])         # All of S
  print(S + 'xyz')    #Concatenation
  print(S)            #S is unchanged
  print(S * 8)        #Repetition
#+end_src

#+RESULTS:
: pa
: pam
: Spa
: Spa
: Spa
: Spam
: Spamxyz
: Spam
: SpamSpamSpamSpamSpamSpamSpamSpam

** Immutability

#+begin_src python :resuls output
  B = 'Banana'
  B[0] = 'z'      # Immutable objects cannot be changed
#+end_src

#+RESULTS:
TypeError: 'str' object does not support item assignment

#+begin_src python :results output
  B = 'Banana'
  B = 'z' + B[1:] # But we can make new object
  print(B)
#+end_src

#+RESULTS:
: zanana

** Type-specific methods

#+begin_src python :results output
  C = 'Coconut'
  print(C.find('nut'))  # Find the offset of a substring
  print(C.replace('nut', 'XYZ'))  # Replace occurrences of a substring with another
  print(C)
#+end_src

#+RESULTS:
: 4
: CocoXYZ
: Coconut

#+begin_src python :results output
  line = 'aaa,bbb,ccccc,dd'
  print(line.split(','))   # Split on a delimiter into a list of
                           # substrings
#+end_src

#+RESULTS:
: ['aaa', 'bbb', 'ccccc', 'dd']


#+begin_src python :results output
  B = 'banana'
  print(B.upper())  # Upper- and lowercase conversions
  print(B.isalpha())  # Content tests: isalpha, isdigit, etc.
#+end_src

#+RESULTS:
: BANANA
: True

** Remove whitespace and advanced substitution

#+begin_src python :results output
  line = 'aaa,bbb,ccccc,dd\n'
  print(line)
  line = line.rstrip()   # Remove whitespace characters on the right side
  print(line)
#+end_src

#+RESULTS:
: aaa,bbb,ccccc,dd
: 
: aaa,bbb,ccccc,dd


#+begin_src python :results output
  print('%s, eggs, and %s' % ('spam', 'SPAM!'))
  print('{0}, eggs, and {1}'.format('spam', 'SPAM!'))
#+end_src

#+RESULTS:
: spam, eggs, and SPAM!
: spam, eggs, and SPAM!

** Getting help

#+begin_src python :results output
  B = 'Banana'
  print(dir(B))
#+end_src

#+RESULTS:
: ['__add__', '__class__', '__contains__',
: '__delattr__', '__dir__', '__doc__', '__eq__',
: '__format__', '__ge__', '__getattribute__', '__getitem__',
: '__getnewargs__', '__gt__', '__hash__', '__init__',
: '__init_subclass__', '__iter__', '__le__', '__len__',
: '__lt__', '__mod__', '__mul__', '__ne__', '__new__',
: '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__',
: '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize',
: 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs',
: 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha',
: 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower',
: 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join',
: 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix',
: 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition',
: 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip',
: 'swapcase', 'title', 'translate', 'upper', 'zfill']


#+begin_src python :results output
  B = 'Banana'
  print(help(B.replace))
#+end_src

#+RESULTS:
#+begin_example
Help on built-in function replace:

replace(old, new, count=-1, /) method of builtins.str instance
    Return a copy with all occurrences of substring old replaced by new.
    
      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.
    
    If the optional argument count is given, only the first count occurrences are
    replaced.

None
#+end_example

** Possible ways to string representation

#+begin_src python :results output
  S = 'A\nB\tC'     # \n is end-of-line, \t is tab
  print(S)
#+end_src

#+RESULTS:
: A
: B	C

#+begin_src python :results output
  msg = """aaaaaaaaaaabbbb'''bbbbbbbb""bbbbb'cccccccc"""
  print(msg)
#+end_src

#+RESULTS:
: aaaaaaaaaaabbbb'''bbbbbbbb""bbbbb'cccccccc

**  The ~re~ module

re.match(): Checks if a pattern matches the beginning of a string.
re.search(): Searches for a pattern anywhere in a string.

#+begin_src python :results output
  import re
  result = re.match("Python", "Python Regex Match")
  print(result)
#+end_src

#+RESULTS:
: <re.Match object; span=(0, 6), match='Python'>


#+begin_src python :results output
  import re
  result = re.search("Regex", "Python Regex Match")
  print(result)
#+end_src

#+RESULTS:
: <re.Match object; span=(7, 12), match='Regex'>

** Lists

*** A Python List is a built-in, ordered, mutable collection of elements
or items. Each item in a list can be of any data type, including
numbers, strings, or other objects like tuples, dictionaries, or even
other lists.

#+begin_src python :results output
  s = [1, 4, 9, 16, 25]
  print(s)
  print(s[0])   # indexing return the item
  print(s[-1])
  print(s[-3:]) # slicing return a new list
  print(s + [36, 49, 64, 81, 100])  # concatenation
#+end_src

#+RESULTS:
: [1, 4, 9, 16, 25]
: 1
: 25
: [9, 16, 25]
: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

Lists are mutable

#+begin_src python :results output
  c = [1, 8, 27, 65, 125]
  print(c)
  c[3] = 64  # replacing
  print(c)
  c.append(343) # new item adding 
  print(c)
#+end_src

#+RESULTS:
: [1, 8, 27, 65, 125]
: [1, 8, 27, 64, 125]
: [1, 8, 27, 64, 125, 343]
