
#+AUTHOR:    Viktoriia Kosinova
#+TITLE:     Mental Athlete's Wife ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     viqsiq@gmail.com
#+LANGUAGE: en
#+STARTUP: showall indent
#+PROPERTY: header-args :comments org

Import and reload module example
#+begin_src python :results output
  import script1
  from importlib import reload
  reload(script1)
#+end_src

#+RESULTS:
: linux
: 1267650600228229401496703205376
: Spam!Spam!Spam!Spam!Spam!Spam!Spam!Spam!
: linux
: 1267650600228229401496703205376
: Spam!Spam!Spam!Spam!Spam!Spam!Spam!Spam!

Access to module attribute
#+begin_example myfile.py
title = "The Meaning of Life"
#+end_example

#+begin_src python :results output
  import myfile          # Run file; load module as a whole
  print(myfile.title)    # Use its attribute names: '.' to qualify
#+end_src

#+RESULTS:
: The Meaning of Life

the dot expression syntax =object.attribute=

#+begin_src python :results output
  from myfile import title   # Run file; copy its names
  print(title)               # Use name directly: no need to qualify
#+end_src

#+RESULTS:
: The Meaning of Life

#+begin_src python :results output
  import threenames
  print(threenames.b, threenames.c)
  print(dir(threenames))
#+end_src

#+RESULTS:
: dead parrot sketch
: parrot sketch
: ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'a', 'b', 'c']

When the =dir= function is called with the name of an imported module
passed in parentheses like this, it returns all
the attributes inside that module.

#+begin_src python :results output
  from threenames import a, b, c
  print(b, c)
#+end_src

#+RESULTS:
: dead parrot sketch
: parrot sketch

The exec(open('module.py').read()) built-in function call is another
way to launch files from the interactive prompt without having to
import and later reload:
#+begin_src python :results output
exec(open('script1.py').read())
#+end_src

#+RESULTS:
: linux
: 1267650600228229401496703205376
: Spam!Spam!Spam!Spam!Spam!Spam!Spam!Spam!

Python searches for imported modules in every directory listed in
sys.path —a Python list of directory name strings in the sys module,
which is initialized from a PYTHONPATH environment variable, plus a
set of standard directories. If you want to import from a directory
other than the one you are working in, that directory must generally
be listed in your PYTHONPATH setting.

* Deliberate practice

** Run program in different ways

#+begin_quote
Programs. With the text editor of your choice, write a simple module
file containing the single statement print('Hello module world!') and
store it as module1.py.  Now, run this file by using any launch option
you like: running it in IDLE, clicking on its file icon, passing it to
the Python interpreter on the system shell’s command line (e.g.,
python module1.py ), built-in exec calls, imports and reloads, and so
on.  In fact, experiment by running your file with as many of the
launch techniques discussed in this chapter as you can. Which
technique seems easiest? (There is no right answer to this, of
course.)
#+end_quote

#+begin_src sh :results output
cat module1.py
#+end_src

#+RESULTS:
: print("Hello module world!")

#+begin_src python :results output
  import module1
  from importlib import reload
  reload(module1)
  exec(open('module1.py').read())
#+end_src

#+RESULTS:
: Hello module world!
: Hello module world!
: Hello module world!

** Import variations

#+begin_quote
Modules. Start the Python interactive command line ( >>> prompt) and
import the module you wrote in exercise 2. Try moving the file to a
different directory and importing it again from its original directory
(i.e., run Python in the original di- rectory when you import). What
happens? (Hint: is there still a module1.pyc byte code file in the
original directory?)
#+end_quote

#+begin_src sh :results output
  mv module1.py test_projects
  cd test_projects/
  ls
#+end_src

#+RESULTS:
: module1.py

#+begin_src sh :results output
  cd practice/
  ls
#+end_src

#+RESULTS:
#+begin_example
brian
module1.py~
myfile.py
practice.org
__pycache__
script1.py
test_projects
tests.org
test_str_im.py
test_str.py
test_sum.py
threenames.py
types_operations.org
#+end_example

#+begin_src python :results output
import module1
#+end_src

#+RESULTS:
ModuleNotFoundError: No module named 'module1'


#+begin_src python :results output
from test_projects import module1
#+end_src

#+RESULTS:
: Hello module world!
