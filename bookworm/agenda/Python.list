MY PROJECTS    -*- mode: org; -*-
#+AUTHOR:    Viktoriia Kosinova
#+TITLE:     Mental Athlete's Wife ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     viqsiq@gmail.com
#+LANGUAGE: en
#+STARTUP: showall indent
#+PROPERTY: header-args :comments org
#+CATEGORY: Python
#+TODO: RAW INIT TODO ACTIVE | DONE

* RAW Whetting Your Appetite
SCHEDULED: <2023-12-18 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:54]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:54]
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:54]
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:46]
- Note taken on [2023-11-04 Sat 08:31] \\
  * Python is simpler to use, available on Windows, macOS, and Unix operating systems,
  and will help you get the job done more quickly.
  * Python also offers much more error checking than C, and, being a very-high-level
  language, it has high-level data types built in,
  such as flexible arrays and dictionaries.
  * Python allows you to split your program into modules that can be reused in
  other Python programs.
  * It comes with a large collection of standard modules that you can use as the
  basis of your programs — or as examples to start learning to program in Python.
  * Python is an interpreted language, which can save you considerable time during
  program development because no compilation and linking is necessary.
  * The interpreter can be used interactively, which makes it easy to experiment with
  features of the language, to write throw-away programs, or to test functions during
  bottom-up program development.
  * Python enables programs to be written compactly and readably.
:LOGBOOK:
CLOCK: [2023-11-04 Sat 08:24]--[2023-11-04 Sat 08:44] =>  0:20
:END:
SCHEDULED: <2023-12-04 Mon ++2w>
* DONE Using the Python Interpreter
CLOSED: [2023-11-06 Mon 15:47]
- Note taken on [2023-11-04 Sat 08:45] \\
  * The Python interpreter is usually installed as /usr/local/bin/python3
  It possible to start it by typing the command:

  $ python

  * Since the choice of the directory where the interpreter lives is
  an installation option, other places are possible:
  /usr/local/lib/python3 for example.

  * You can exit the interpreter by typing the following command:

  quit() or Ctrl+D

  * A second way of starting the interpreter is

  $ python -c command [arg] ..., which executes the statement(s)
  in command

  * Some Python modules are also useful as scripts.

  * These can be invoked using $ python -m module [arg] ...,

  which executes the source file for module as if you had spelled out its
  full name on the command line.

  * When a script file is used, it is sometimes useful to be able to run the
  script and enter interactive mode afterwards.
  This can be done by passing -i before the script.
:LOGBOOK:
CLOCK: [2023-11-04 Sat 08:45]--[2023-11-04 Sat 09:18] =>  0:33
:END:
* RAW Argument Passing
SCHEDULED: <2024-01-15 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:48]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:48]
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:48]
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:48]
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:48]
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:47]
- Note taken on [2023-11-04 Sat 09:33] \\
  When known to the interpreter, the script name and additional arguments thereafter
  are turned into a list of strings and assigned to the argv variable in the sys module.

  You can access this list by executing import sys.

  The length of the list is at least one; when no script and no arguments are given,
  sys.argv[0] is an empty string.

  $ python3 -i 00_import_test.py
  >>> import sys
  >>> sys.argv[0]
  '00_import_test.py'
:LOGBOOK:
CLOCK: [2023-11-04 Sat 09:33]--[2023-11-04 Sat 09:57] =>  0:24
:END:
* RAW Interactive Mode
SCHEDULED: <2023-11-20 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:49]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:49]
* RAW The Interpreter and Its Environment
SCHEDULED: <2023-11-20 Mon>
:PROPERTIES:
:LAST_REPEAT: [2023-11-09 Thu 08:00]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-09 Thu 08:00]
:LOGBOOK:
CLOCK: [2023-11-06 Mon 10:16]--[2023-11-06 Mon 10:27] =>  0:11
:END:
* RAW Source Code Encoding
SCHEDULED: <2023-11-20 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:50]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:50]
- Note taken on [2023-11-06 Mon 10:22] \\
  To declare an encoding other than the default one, a special comment
  line should be added as the first line of the file:

  # -*- coding: encoding -*-
* RAW An Informal Introduction to Python
SCHEDULED: <2023-11-20 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:51]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:51]
:LOGBOOK:
CLOCK: [2023-11-06 Mon 10:27]--[2023-11-06 Mon 10:51] =>  0:24
:END:
* RAW Using Python as a Calculator
SCHEDULED: <2023-11-20 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:51]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:51]
* RAW Numbers
SCHEDULED: <2023-11-20 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:52]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:52]
* RAW Text
SCHEDULED: <2023-11-20 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:52]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:52]
- Note taken on [2023-11-06 Mon 10:51] \\
  >>> s = 'First line.\nSecond line.'  # \n means newline
  >>> s  # without print(), special characters are included in the string
  'First line.\nSecond line.'
  >>> print(s)  # with print(), special characters are interpreted, so \n produces new line
  First line.
  Second line.
  >>> text = ('Put several strings within parentheses '
  ... 'to have them joined together.')
  >>> text
  'Put several strings within parentheses to have them joined together.'
:LOGBOOK:
CLOCK: [2023-11-06 Mon 10:51]--[2023-11-06 Mon 11:03] =>  0:12
:END:
* RAW Lists
SCHEDULED: <2023-11-20 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-06 Mon 15:52]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-06 Mon 15:52]
:LOGBOOK:
CLOCK: [2023-11-06 Mon 11:03]--[2023-11-06 Mon 11:09] =>  0:06
:END:
* RAW First Steps Towards Programming
SCHEDULED: <2023-11-13 Mon>
* RAW More Control Flow Tools
SCHEDULED: <2023-11-13 Mon>
* RAW if Statements
SCHEDULED: <2023-11-13 Mon>
* RAW for Statements
* RAW The range() Function
* RAW break and continue Statements, and else Clauses on Loops
* RAW pass Statements
* RAW match Statements
* RAW Defining Functions
* RAW More on Defining Functions
* RAW Default Argument Values
* RAW Keyword Arguments
* RAW Special parameters
* RAW Positional-or-Keyword Arguments
* RAW Positional-Only Parameters
* RAW Keyword-Only Arguments
* RAW Function Examples
* RAW Recap
* RAW Arbitrary Argument Lists
* RAW Unpacking Argument Lists
* RAW Lambda Expressions
* RAW Documentation Strings
* RAW Function Annotations
* RAW Intermezzo: Coding Style
* RAW Data Structures
* RAW More on Lists
* RAW Using Lists as Stacks
* RAW Using Lists as Queues
* RAW List Comprehensions
* RAW Nested List Comprehensions
* RAW The del statement
* RAW Tuples and Sequences
* RAW Sets
* RAW Dictionaries
* RAW Looping Techniques
* RAW More on Conditions
* RAW Comparing Sequences and Other Types
* RAW Modules
* RAW More on Modules
* RAW Executing modules as scripts
* RAW The Module Search Path
* RAW “Compiled” Python files
* RAW Standard Modules
* RAW The dir() Function
* RAW Packages
* RAW Importing * From a Package
* RAW Intra-package References
* RAW Packages in Multiple Directories
* RAW Input and Output
* RAW Fancier Output Formatting
* RAW Formatted String Literals
* RAW The String format() Method
* RAW Manual String Formatting
* RAW Old string formatting
* RAW Reading and Writing Files
* RAW Methods of File Objects
* RAW Saving structured data with json
* RAW Errors and Exceptions
* RAW Syntax Errors
* RAW Exceptions
* RAW Handling Exceptions
* RAW Raising Exceptions
* RAW Exception Chaining
* RAW User-defined Exceptions
* RAW Defining Clean-up Actions
* RAW Predefined Clean-up Actions
* RAW Raising and Handling Multiple Unrelated Exceptions
* RAW Enriching Exceptions with Notes
* RAW Classes
* RAW A Word About Names and Objects
* RAW Python Scopes and Namespaces
* RAW Scopes and Namespaces Example
* RAW A First Look at Classes
* RAW Class Definition Syntax
* RAW Class Objects
* RAW Instance Objects
* RAW Method Objects
* RAW Class and Instance Variables
* RAW Random Remarks
* RAW Inheritance
* RAW Multiple Inheritance
* RAW Private Variables
* RAW Odds and Ends
* RAW Iterators
* RAW Generators
* RAW Generator Expressions
* RAW Brief Tour of the Standard Library
* RAW Operating System Interface
* RAW File Wildcards
* RAW Command Line Arguments
* RAW Error Output Redirection and Program Termination
* RAW String Pattern Matching
* RAW Mathematics
* RAW Internet Access
* RAW Dates and Times
* RAW Data Compression
* RAW Performance Measurement
* RAW Quality Control
* RAW Batteries Included
* RAW Brief Tour of the Standard Library — Part II
* RAW Output Formatting
* RAW Templating
* RAW Working with Binary Data Record Layouts
* RAW Multi-threading
* RAW Logging
* RAW Weak References
* RAW Tools for Working with Lists
* RAW Decimal Floating Point Arithmetic
* RAW Virtual Environments and Packages
* RAW Introduction
* RAW Creating Virtual Environments
* RAW Managing Packages with pip
* RAW What Now?
* RAW Interactive Input Editing and History Substitution
* RAW Tab Completion and History Editing
* RAW Alternatives to the Interactive Interpreter
* RAW Floating Point Arithmetic: Issues and Limitations
* RAW Representation Error
* RAW Appendix
* RAW Interactive Mode
* RAW Error Handling
* RAW Executable Python Scripts
* RAW The Interactive Startup File
* RAW The Customization Modules
