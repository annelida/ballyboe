MY PROJECTS    -*- mode: org; -*-
#+AUTHOR:    Viktoriia Kosinova
#+TITLE:     Mental Athlete's Wife ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     viqsiq@gmail.com
#+LANGUAGE: en
#+STARTUP: showall indent
#+PROPERTY: header-args :comments org
#+CATEGORY: Thesis
#+TODO: RAW INIT TODO ACTIVE | DONE


* Learning

** Methodology

*** Spaced Repetition

*** Pomodoro Technique

*** Deliberate Practice

** English

*** Reading aloud

**** Matilda

**** Philosophy of Software Design

*** Grammar

**** Present simple

**** Present perfect


** Emacs


*** Interface

*** Keys

*** Embedded Help System

*** Registers

**** Window Registers

*** Org-mode

**** Org-agenda

**** Org-capture


* Work

** Professional Preparation

** Portfolio creation

** CV elaboration

* Leasure



* Events

* Notes



* Personal



* Preparation to work as software tester
** Agenda Views
** RAW [#C] Upwork about testing
   SCHEDULED: <2023-11-13 Mon ++2d/3d>
   :PROPERTIES:
   :LAST_REPEAT: [2023-11-02 Thu 16:41]
   :END:
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:41]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:41]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:41]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:41]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:41]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:18]
Requirements to job seekers (software testers)
** DONE Reading aloud
   CLOSED: [2023-09-29 Fri 10:09] SCHEDULED: <2023-07-22 Sat>
   :PROPERTIES:
   :LAST_REPEAT: [2023-09-26 Tue 18:00]
   :END:
   - State "DONE"       from "TODO"       [2023-09-26 Tue 18:00]
   - State "DONE"       from "TODO"       [2023-09-26 Tue 17:43]
   - State "DONE"       from "TODO"       [2023-08-13 Sun 11:05]
   - State "DONE"       from "TODO"       [2023-07-27 Thu 14:26]
   - State "DONE"       from "TODO"       [2023-07-26 Wed 13:03]
   - State "DONE"       from "TODO"       [2023-07-25 Tue 17:19]
   - State "DONE"       from "TODO"       [2023-07-24 Mon 17:58]
   - State "DONE"       from "TODO"       [2023-07-17 Mon 13:16]
   - State "DONE"       from "TODO"       [2023-07-17 Mon 13:16]
   - State "DONE"       from "TODO"       [2023-07-12 Wed 19:10]
   - State "DONE"       from "TODO"       [2023-07-11 Tue 17:11]
   - State "DONE"       from "TODO"       [2023-07-10 Mon 16:12]
   - State "DONE"       from "TODO"       [2023-07-10 Mon 16:08]
   - State "DONE"       from "TODO"       [2023-07-09 Sun 10:51]
   - State "DONE"       from "TODO"       [2023-07-09 Sun 10:50]
   - State "DONE"       from "TODO"       [2023-07-07 Fri 16:29]
   - State "DONE"       from "TODO"       [2023-07-05 Wed 15:36]
   - State "DONE"       from "TODO"       [2023-07-03 Mon 18:07]
   - State "DONE"       from "TODO"       [2023-07-03 Mon 18:07]
   - State "DONE"       from "TODO"       [2023-07-02 Sun 13:15]
   - State "DONE"       from "TODO"       [2023-07-01 Sat 13:40]
   - State "DONE"       from "TODO"       [2023-06-30 Fri 15:27]
   - State "DONE"       from "TODO"       [2023-06-29 Thu 13:21]
   - State "DONE"       from "TODO"       [2023-06-29 Thu 13:21]
   - State "DONE"       from "TODO"       [2023-06-27 Tue 17:22]
   - State "DONE"       from "TODO"       [2023-06-27 Tue 17:22]
   - State "DONE"       from "TODO"       [2023-06-26 Mon 15:44]
** RAW [#C] Repeatitive tasks in Org-agenda
   SCHEDULED: <2023-11-24 Fri ++2w>
   :PROPERTIES:
   :LAST_REPEAT: [2023-11-10 Fri 17:01]
   :END:
   - State "DONE"       from "ACTIVE"     [2023-11-10 Fri 17:01]
   - Note taken on [2023-11-10 Fri 16:33] \\
     [[https://www.danliden.com/posts/20220116-org-time.html][Org-repeaters]]

     <C-c> - add timestamp
     A timestamp entry with a time can be added with <C-u><C-c>
     <C-c> ! (org-time-stamp-inactive), which inserts an inactive timestamp (represented
     with square rather than angled brackets; e.g. [2022-01-16 Sun] rather than <2022-01-16 Sun>).
     Inactive timestamps work the same as active timestamps, except that they
     do not appear on the org-agenda.

     Two timestamps connected by -- make up a range (e.g. <2022-02-12 Sat>--<2022-01-16 Sun>)

     Add a scheduled date to a headline with <C-c><C-s> and a deadline with <C-c><C-d>

     Marking Tasks with Repeaters DONE:

     <C-u> -1 <C-t> or <C--1><C-t>
   :LOGBOOK:
   CLOCK: [2023-11-10 Fri 16:33]--[2023-11-10 Fri 16:58] =>  0:25
   :END:
** TODO [#B] Lucy Worsley transcript
   SCHEDULED: <2023-11-18 Sat>
** RAW Org-mode repeaters
   SCHEDULED: <2023-12-09 Sat ++1w>
   :PROPERTIES:
   :LAST_REPEAT: [2023-11-02 Thu 16:44]
   :END:
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:44]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:44]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:44]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:44]
   - State "DONE"       from "ACTIVE"     [2023-11-02 Thu 16:44]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:16]
[[https://www.danliden.com/posts/20220116-org-time.html]]
** DONE Feyman's learning technique
CLOSED: [2023-07-17 Mon 13:16] SCHEDULED: <2023-07-16 Sun>
* Selenium Learning Course
* TODO HTML tutorial
** DONE HTML Elements
CLOSED: [2023-09-25 Mon 10:41] SCHEDULED: <2023-09-25 Mon>
** DONE HTML Attributes
CLOSED: [2023-09-25 Mon 10:41] SCHEDULED: <2023-09-25 Mon>
* DONE Publishing Org-mode files to HTML
CLOSED: [2023-09-26 Tue 17:44] SCHEDULED: <2023-09-25 Mon>
* DONE Selenium locators
CLOSED: [2023-09-26 Tue 17:43] SCHEDULED: <2023-09-25 Mon>
* DONE Feynman technique. Studying,analyzing and descrybing by my own words.
CLOSED: [2023-09-28 Thu 10:01] SCHEDULED: <2023-09-28 Thu>
* DONE Selenium synchronization, Exception Handling and Assertions
CLOSED: [2023-09-28 Thu 10:01] SCHEDULED: <2023-09-28 Thu>
** DONE Selenium implicit wait
CLOSED: [2023-09-30 Sat 09:30] SCHEDULED: <2023-09-29 Fri>
* DONE Working with transcript "The Experiment That Teaches People How To Learn"
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
** DONE To rewrite the transcript
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
** DONE To make the synctacsis analyse
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
** TODO To create the cloud of words
** DONE To rewrite the text of video by my owm words
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
* DONE Reading aloud: "Matilda" R. Dahl
CLOSED: [2023-10-02 Mon 10:46] SCHEDULED: <2023-09-30 Sat>
* DONE Using Git on Debian
CLOSED: [2023-10-06 Fri 08:01] SCHEDULED: <2023-10-05 Thu>
* DONE Generating a new SSH key and adding it to the ssh-agent
CLOSED: [2023-10-02 Mon 17:46] SCHEDULED: <2023-10-02 Mon>
** DONE Adding a new SSH key to GitHub account
CLOSED: [2023-10-02 Mon 17:46] SCHEDULED: <2023-10-02 Mon>
* ACTIVE [#C] Working with transctipt to video "How to Learn Anything Fast: Teach Your Brain to Focus"
SCHEDULED: <2023-11-19 Sun>
- Note taken on [2023-10-14 Sat 13:30] \\
  Part I "The neuroscience solution to boredom "

  Sometimes during our learningÂ process it is difficult to focus and
  remember studying material.The reason why our brain works so bad in
  particular situationsis because the new information can be not
  interesting for us or too hard or boring. Scientific research has proven
  that our brain in the studying process tries to search for rewards.
  And in cases when rewards are non-obvious our brain doesn't know how
  to progress.
  To solve this trouble the scientists offer to change our direction of
  thinking.
  Instead of traditional searching rewards in our learning process,
  just try to seek novelty.
 
  And think about the novelty, new knowledge as your rewards.
  
:LOGBOOK:
CLOCK: [2023-10-14 Sat 13:30]--[2023-10-14 Sat 14:03] =>  0:33
:END:
** DONE Rewrite the transcript
CLOSED: [2023-10-10 Tue 08:00] SCHEDULED: <2023-10-06 Fri>
* TODO [#B] Org-Jekyll - configuration options
SCHEDULED: <2023-11-20 Mon>
- Note taken on [2023-10-12 Thu 15:01] \\
  Reverse approach: use the working sample with minimum modifications
  (personal data).
- Note taken on [2023-10-11 Wed 17:05] \\
  * Prerequisites
  I have two repositories:
  - The first -  working properly
  - The second - new, not working.
  - Core samples with brief description how it shold work

    The task: *Modificate the content of not working repo and force it
    work properly as the first one*

    The average workflow:
    1. Core samples reading till full clarification the idea behind
       these words;

    2. Find differences among these two repos. It's not difficult by
       /diff/ utility in Bash or the same in Emacs;

    3. To ponder aroun what is should be changed, why and how?

    4. Elaborate a clear hypothesis how to make changes to achieve the
       result.
- Note taken on [2023-10-11 Wed 15:47] \\
  Compare two folders: the working one sample in 0--key.github.io ||
  annelida.github.io

  Manually
  Via diff utility
  Modification date
  ~/git/annelida.github.io/_posts/core-samples/2011-12-29-jekyll-introduction.md
 ]]
:LOGBOOK:
CLOCK: [2023-10-21 Sat 07:28]--[2023-10-21 Sat 09:25] =>  1:57
CLOCK: [2023-10-18 Wed 09:04]--[2023-10-18 Wed 10:26] =>  1:22
CLOCK: [2023-10-17 Tue 09:18]--[2023-10-17 Tue 10:13] =>  0:55
CLOCK: [2023-10-11 Wed 15:47]--[2023-10-11 Wed 16:07] =>  0:20
:END:
1. I compared the list of folders and files for two repositories:
0--key.github.io with annelida.github.io

Only annelida.github.io has:
_site
Gemfile.lock
index.md

Only 0--key.github.io has files:
screenshot.png
old_index.md

Using M-x diff compared:
index.md (from annelida.github.io)
old_index.md (from 0--key.github.io)

Result:
diff -u /home/vikky/git/annelida.github.io/index.md /home/vikky/git/0--key.github.io/old_index.md                                                                                                                                          1. I compared the content of two repositories: 
0--key.github.io with annelida.github.io

Only annelida.github.io has:
_site
Gemfile.lock
[[https://jekyllrb.com/docs/step-by-step/10-deployment/][What is Gemfile.lock]]
[[https://www.jekyll.com.cn/tutorials/using-jekyll-with-bundler/#:~:text=Bundler%20provides%20a%20consistent%20environment,tool%20to%20use%20with%20Jekyll.][What is Bundler]]
[[https://stackoverflow.com/questions/51157446/whats-the-difference-between-bundle-exec-jekyll-serve-and-jekyll-serve][Why you need use bundler]]
index.md

Only 0--key.github.io has files:
screenshot.png
old_index.md

Using M-x diff compared:
index.md (from annelida.github.io)
old_index.md (from 0--key.github.io)

Result:
diff -u /home/vikky/git/annelida.github.io/index.md /home/vikky/git/0--key.github.io/old_index.md
Diff finished (no differences).  Tue Oct 17 09:01:54 2023
Diff finished (no differences).  Tue Oct 17 09:01:54 2023

2. I compared the root folders from two repositories
0--key.github.io and annelida.github.io file by file.

Differences are in files:

_config.yml

The line are different:
title:
tagline:
author:
name:
email:
github:
production_url:
short_name:
tracking_id:

Gemfile

Only in annelida.github.io/Gemfile:
gem "kramdown-parser-gfm"
gem "minima"

Only in annelida.github.io there is a file:
Gemfile.lock

3. Comparing two repositories folder by folder:
Differences only in content of /_includes/themes folder and /assets/themes folder.
Differences in each file in _/layouts folder 

diff 0--key.github.io/_includes/themes/ annelida.github.io/_includes/themes/
Common subdirectories: 0--key.github.io/_includes/themes/bootstrap-3 and annelida.github.io/_includes/themes/bootstrap-3
Common subdirectories: 0--key.github.io/_includes/themes/twitter and annelida.github.io/_includes/themes/twitter
Only in 0--key.github.io/_includes/themes/: hooligan

diff 0--key.github.io/assets/themes/ annelida.github.io/assets/themes/
Common subdirectories: 0--key.github.io/assets/themes/bootstrap and annelida.github.io/assets/themes/bootstrap
Common subdirectories: 0--key.github.io/assets/themes/css and annelida.github.io/assets/themes/css
Common subdirectories: 0--key.github.io/assets/themes/twitter and annelida.github.io/assets/themes/twitter
Only in 0--key.github.io/assets/themes/: hooligan

4. Comparing /_layouts folders file by file:

Folder /layouts for both repositories contains the same files:
default.html
page.html
post.html
 
The difference is one and common for this files:

 ---
 theme :
-  name : bootstrap-3   (annelida.github.io)
+  name : hooligan      (0--key.github.io)
 ---
At first I wanted to change the look of my blog.To understand the concept
of how Jekyll works I compared my new repository annelida.github.io that
had theme bootstrap-3 by default and another properly working
repository 0--key.github.io.

The second repositoryÂ has configurations for the theme "hooligan".
I compared these two repositories folder by folder and file by file.
Using [[https://jekyllrb.com/docs/][Jekyll's official documentation]] I understood that if you place images,
css, js in folder /assets they will be used across your site.

The 'include' tag allows you to include the content from another file stored
in the _includes folder. In my case I need to include content of files:
default.html
page.html
post.html
to the corresponding files from /_layouts folder.
Result you can see on [[https://annelida.github.io/]]
* TODO [#A] Explorations in details page's structure in Jekyll.
SCHEDULED: <2023-11-13 Mon>
- Note taken on [2023-10-22 Sun 08:21] \\
  * How it is possible to organize several pages.
  * Page's front matter structure:
  title
  permalink
  categories
  tags
:LOGBOOK:
CLOCK: [2023-10-22 Sun 08:21]--[2023-10-22 Sun 08:34] =>  0:13
:END:
* TODO What is Jekyll's Gemfile.lock (full clarification).
SCHEDULED: <2023-11-26 Sun>

- Note taken on [2023-10-20 Fri 08:33] \\
  The Gemfile.lock file is where Bundler records the exact
  versions that were installed. This way, when the same library/project
  is loaded on another machine, running bundle install will look at the
  Gemfile.lock and install the exact same versions, rather than just using
  the Gemfile and installing the most recent versions.
* DONE Github.io - configuration
CLOSED: [2023-10-06 Fri 08:01] SCHEDULED: <2023-10-04 Wed>
* DONE What is Python REPL
CLOSED: [2023-10-06 Fri 08:01] SCHEDULED: <2023-10-04 Wed>
* DONE What is Ipython?
* TODO [#A] Python: modules, relative import. 
SCHEDULED: <2023-11-24 Fri>
- Note taken on [2023-10-24 Tue 08:54] \\
  A Python module is a file that has a .py extension, and a Python
  package is any folder that has modules inside it.

  Relative imports in Python 3 allow you to import modules
  or functions from other packages within your package hierarchy.

  To use relative imports, you need to use the from . import syntax.
  The number of dots before the import statement represents the number
  of package levels you need to go up to reach the desired module or
  function.
:LOGBOOK:
CLOCK: [2023-10-24 Tue 08:07]--[2023-10-24 Tue 09:32] =>  1:25
:END:
* TODO Python classes.
SCHEDULED: <2023-11-18 Sat>
- Note taken on [2023-11-01 Wed 16:02] \\
  Stock portfolio class clarification.
:LOGBOOK:
CLOCK: [2023-10-27 Fri 08:53]--[2023-10-27 Fri 09:33] =>  0:40
CLOCK: [2023-10-26 Thu 09:51]--[2023-10-26 Thu 17:30] =>  7:39
:END:
#+begin_src python :results output
class Student:
  def __init__(self, name, age):
    self.name = name
    self.age = age

s1 = Student("Tony Black", 16)

print(s1.name)
print(s1.age)
#+end_src

#+RESULTS:
: Tony Black
: 16

The __init__(function) is using to assign the values of name
and age.

Object's methods are functions that belong to the object.

#+begin_src python :results output
  class Student:
    def __init__(self, name, age):
      self.name = name
      self.age = age

    def stfunc(self):
      print("The student's name is " + self.name)

  s1 = Student("Tony Black", 16)
  s1.stfunc()
#+end_src

#+RESULTS:
: The student's name is Tony Black

* TODO [#A] Unit test module description and structure.
SCHEDULED: <2023-11-13 Mon>
- Note taken on [2023-10-24 Tue 09:35] \\
  A unit test is a smaller test, that checks
  that a single component operates in the right way.

  An integration test checks that components in your
  application operate with each other.

  A unit test checks a small component in your application.

  The three most popular test runners are:

  unittest
  nose or nose2
  pytest

  unittest requires that:

  You put your tests into classes as methods
  You use a series of special assertion methods
  in the unittest.TestCase class instead of the
  built-in assert statement
:LOGBOOK:
CLOCK: [2023-10-25 Wed 09:13]--[2023-10-25 Wed 10:35] =>  1:22
CLOCK: [2023-10-24 Tue 09:35]--[2023-10-24 Tue 09:50] =>  0:15
:END:
[[https://realpython.com/python-testing/][unit test
]]
def test_sum():
    assert sum([1, 2, 3]) == 6, "Should be 6"

def test_sum_tuple():
    assert sum((1, 2, 2)) == 6, "Should be 6"

if __name__ == "__main__":
    test_sum()
    test_sum_tuple()
    print("Everything passed")

To convert the example to a unittest test case:

Import unittest from the standard library
Create a class called TestSum that inherits from the
TestCase class;
Convert the test functions into methods by adding self
as the first argument;
Change the assertions to use the self.assertEqual() method on
the TestCase class;
Change the command-line entry point to call unittest.main()

import unittest

class TestSum(unittest.TestCase):

    def test_sum(self):
        self.assertEqual(sum(([1, 2, 3])), 6, "Should be 6")
        
    def test_sum_tuple(self):
        self.assertEqual(sum((1, 2, 2)), 6, "Should be 6")
if __name__ == '__main__':
    unittest.main()
* TODO [#B] Emacs registers
SCHEDULED: <2023-11-12 Sun ++2w>
- Note taken on [2023-11-08 Wed 14:31] \\
  âM-x view-register <RET> Râ
       Display a description of what register R contains.
  âC-x r s Râ
       Copy region into register R (âcopy-to-registerâ).
  âC-x r i Râ
       Insert text from register R (âinsert-registerâ).
  âC-x r w Râ
     Save the state of the selected frameâs windows in register R
     (âwindow-configuration-to-registerâ).
  âC-x r j Râ to restore a window or frame configuration.

  [[info:emacs#Registers][emacs#Registers]]
  [[info:emacs#Position Registers][emacs#Position Registers]]
  [[info:emacs#Text Registers][emacs#Text Registers]]
  [[info:emacs#Rectangle Registers][emacs#Rectangle Registers]]
  [[info:emacs#Configuration Registers][emacs#Configuration Registers]]
* TODO [#B] Org-capture
SCHEDULED: <2023-11-14 Tue>
- Note taken on [2023-10-31 Tue 11:09] \\
  [[info:org#Capture and Attachments][org#Capture and Attachments]]
  [[info:org#Capture][org#Capture]]
  [[info:org#Setting up capture][org#Setting up capture]]
  [[info:org#Using capture][org#Using capture]]
  [[info:org#Capture templates][org#Capture templates]]
* RAW [#B] Org-mode, org-babel markup rules
SCHEDULED: <2023-11-12 Sun>

* TODO Org-Babel configuration.
SCHEDULED: <2023-11-22 Wed ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-08 Wed 09:29]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-08 Wed 09:29]
- Note taken on [2023-10-27 Fri 08:25] \\
  I had problems with running Python3 code using org-babel.
  At first when I run my code I saw the error:
  "Program Python is not found."

  I fixed this error when I installed the package "python-is-python3" on my Debian:

  $  apt-get install python-is-python3

  Is a package which makes Python 3 become the default version in Ubuntu/Debian instead of Python 2.

  The second problem was that my output was always "None" when I run my code.
  My source code block looked:

  #+begin_src python
  print("hello")
  #+end_src

  #+RESULTS:
  : None

  I fixed it when added :results output

  #+begin_src python :results output
  print("hello")
  #+end_src
  #+RESULTS:
  : hello
:LOGBOOK:
CLOCK: [2023-10-26 Thu 07:54]--[2023-10-26 Thu 08:52] =>  0:58
:END:
[[https://www.youtube.com/watch?v=kkqVTDbfYp4][org-babel configuration]]
[[https://orgmode.org/manual/Structure-Templates.html][org templates structure]]

* ACTIVE Linux symbolic links 10m
SCHEDULED: <2023-11-20 Mon>
- Note taken on [2023-10-10 Tue 19:27] \\
  M-x man <enter> ln
- Note taken on [2023-10-10 Tue 15:30]
  * It allows to move the original file in safe place.
  * On the place original file it possible to leave the shortcut with
  * link to original file. For create soft link use command ln -s
* TODO Emacs server 10m
SCHEDULED: <2023-11-15 Wed>
- Note taken on [2023-10-10 Tue 15:27] \\
  * Launch the graphical version;
  * Start the server: =M-x server-start=
  * Launch the client version by =emacsclient -t=
* TODO Org-Agenda views: item arrangement in daily agenda, its priorities;
SCHEDULED: <2023-11-15 Wed>
* RAW Magit brief overview
SCHEDULED: <2023-11-23 Thu ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-09 Thu 07:56]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-09 Thu 07:56]
- Note taken on [2023-10-13 Fri 07:58] \\
  * To display information about the current Git repository C-x-g
    or gs (key-chord);
  * Depending on what state repository is in, this buffer may contain
    sections titled "Staged changes", "Unstaged changes",
     "Unmerged into origin/master",
    "Unpushed to origin/master";
  * To move file from ustage area to stage area: go  the section named
    "Unstaged changes" and type s to stage the changes you have made to
    that file or hunk (piece of hunk).
 
  Most Magit commands invoks from the status buffer:
  F		magit-pull
  G		magit-refresh-all
  P		magit-push
  c		magit-commit
  f		magit-fetch
  g		magit-refresh
  l		magit-log
  
How rename last commit:
Press c (Commit), then a (Amend), edit the message, C-c C-c.
  
:LOGBOOK:
CLOCK: [2023-11-02 Thu 08:58]--[2023-11-02 Thu 09:45] =>  0:47
CLOCK: [2023-10-13 Fri 07:53]--[2023-10-13 Fri 08:17] =>  0:24
:END:
* TODO Git/Magit merge and rebase concept.
SCHEDULED: <2023-11-16 Thu>

  - Note taken on [2023-10-23 Mon 09:48] \\

  A branch is an independent development line containing a pointer
   â or the branch head â to the most recent commit in the code.
  A single Git repository can track many branches, but your working
  tree centers on just one. The head points to the tip (the latest commit)
  of a branch.
  In Git, a branch is a new/separate version of the main repository.

  Let's say you have a large project, and you need to update
  the design on it.

  With a new branch called NEW-DISIGN, edit the code directly without
  impacting the main branch.

  Letâs say that at the same time an error was discovered in the
  project that requires be urgent fixed.

  Create a new branch from the main project called ERROR-FIX.
  Fix the error and merge the ERROR-FIX branch with
  the main branch.

  When go back to the NEW_DESIGN branch, and finish the work there.
  Merge the NEW-DISIGN branch with main.

  $ git checkout -  command used to check out a branch
  $ git checkout -b - will create a new branch, and move to it.

Magit:
b n (magit-branch-create)

- Note taken on [2023-10-23 Mon 10:40] \\
  You can describe of the HEAD as the "current branch".
  When you switch branches

  $ git checkout

  the HEAD revision changes to point to the tip of the new branch.

  You can see what HEAD points to by doing:

  $ cat .git/HEAD

  ref: refs/heads/main

:LOGBOOK:
CLOCK: [2023-10-23 Mon 08:47]--[2023-10-23 Mon 11:08] =>  2:21
:END:

- Note taken on [2023-10-25 Wed 10:50] \\
  Git tags description

  Tags are used as markers for significant points in the project timeline,
  whereas branches are separate lines of development that will eventually
  be merged back into the main application code.
  A tag is an object referencing a specific commit within the project history,
  similar to chapter markers in a book.
  This allows you to switch to the tagged version of the codebase to see what
  the code looked like when the tag was created and, if necessary,
  revert to that specific codebase version.

  $ git tag
  command allows to create, list, delete, and verify tags.

  Deleting a tag does not affect the code in your repository -
  it just removes the tag label.
:LOGBOOK:
CLOCK: [2023-10-25 Wed 10:36]--[2023-10-25 Wed 11:16] =>  0:40
:END:
- Note taken on [2023-10-24 Tue 10:38] \\
  Both of these commands are designed to integrate changes
  from one branch into another branch. They just do it in very
  different ways.

  Merging is nice because itâs a non-destructive operation.
  The existing branches are not changed in any way. This avoids
  all of the potential pitfalls of rebasing.

  The major benefit of rebasing is that you get a much cleaner
  project history.

  The golden rule of git rebase is to never use it on public branches.
  (ie. never rebase master). You should never rebase master onto
  a feature branch.
* TODO [#A] Git/Magit undo options.
SCHEDULED: <2023-12-01 Fri>
- Note taken on [2023-10-23 Mon 08:47] \\
  If you want to redo that commit, make the additional
  changes you forgot, stage them, and commit again using
  the --amend option

  Git:
  $ git commit --amend
  Magit:
  c a C-c C-c

  Unstaging a Staged File
  Git:
  use "git reset HEAD <file>..." to unstage
  use "git restore --staged <file>..." to unstage
  Magit:
  u (magit-unstage-file)

  Unmodifying a Modified File
  Git:
  use "git checkout -- <file>..." to discard changes in
  working directory
  use "git restore <file>..." to discard changes in
  working directory
  Magit:
  k (magit-discard)

  [[https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things][Git undoing things]]


- Note taken on [2023-10-23 Mon 08:09] \\
  branch
  head
  rebase
  tag
  version

* TODO Key-chords from 0--key: each key-chorded command with explanation
SCHEDULED: <2023-11-15 Wed>
:LOGBOOK:
CLOCK: [2023-10-17 Tue 10:13]--[2023-10-17 Tue 10:35] =>  0:22
CLOCK: [2023-10-10 Tue 18:53]--[2023-10-10 Tue 19:00] =>  0:07
:END:
C-h a <command name>
C-h f
* ACTIVE Emacs frames
SCHEDULED: <2023-11-23 Thu>
- Note taken on [2023-10-13 Fri 08:31] \\
  * A graphical display that contains one or more Emacs windows,
    a menu bar, tool bar, echo area.
  * The C-x 5 o ( other-frame ) command selects the next frame
    on the current terminal.
    (';) - key-chord
[[info:emacs#Frame Commands][emacs#Frame Commands]]
[[info:emacs#Frames][emacs#Frames]]
:LOGBOOK:
CLOCK: [2023-10-13 Fri 08:25]--[2023-10-13 Fri 08:51] =>  0:26
CLOCK: [2023-10-10 Tue 19:00]--[2023-10-10 Tue 19:14] =>  0:14
:END:
* ACTIVE Emacs buffers
SCHEDULED: <2023-11-23 Thu>
The text you are editing in Emacs resides in an
object called a âbufferâ.
Each buffer has a unique name.

[[info:emacs#Kill Buffer][emacs#Kill Buffer]]
[[info:emacs#Buffers][emacs#Buffers]]

:LOGBOOK:
CLOCK: [2023-10-13 Fri 09:22]--[2023-10-13 Fri 09:42] =>  0:20
CLOCK: [2023-10-13 Fri 09:16]--[2023-10-13 Fri 09:22] =>  0:06
CLOCK: [2023-10-10 Tue 19:14]--[2023-10-10 Tue 19:20] =>  0:06
:END:
* ACTIVE Emacs windows - resize and split
SCHEDULED: <2023-11-23 Thu>
- Note taken on [2023-10-13 Fri 09:01] \\
  * Frame can be split into several windows. Buffer or it's part
    displays in window
  * one Emacs window is the âselected windowâ; the buffer
    this window is displaying is the current buffer.
:LOGBOOK:
CLOCK: [2023-10-13 Fri 08:59]--[2023-10-13 Fri 09:16] =>  0:17
:END:
[[info:emacs#Basic Window][emacs#Basic Window]]
[[info:emacs#Split Window][emacs#Split Window]]
[[info:emacs#Change Window][emacs#Change Window]]
* DONE Sym linkage between host and repo
CLOSED: [2023-10-10 Tue 19:23] SCHEDULED: <2023-10-10 Tue>
:LOGBOOK:
CLOCK: [2023-10-10 Tue 13:58]--[2023-10-10 Tue 14:48] =>  0:50
:END:
* ACTIVE Comparing files and folders in Linux/Emacs
SCHEDULED: <2023-11-15 Wed>
- Note taken on [2023-10-15 Sun 08:13] \\

  In Emacs:

  The command M-x diff prompts for two file names, using the minibuffer,
  and displays the differences between the two files in a buffer
  named *diff*.
  [[info:emacs#Comparing Files][emacs#Comparing Files]]

  A (much more sophisticated) alternative is M-x ediff
  [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]]

  In Linux terminal:

  To find diff use this command:

  diff -qr dir1/ dir2/
  -r will diff all subdirectories too
  -q tells diff to report only when files differ.

  diff  --brief dir1/ dir2/
  --brief will show the files that dosent exist
  in directory.

  Meld is also a great tool for comparing two directories:

  meld dir1/ dir2/
  Meld has many options for comparing files or directories.
  If two files differ, it's easy to enter file comparison mode
  and see the exact differences.

  Create two files with some difference and compare them using
  each possible approach.
  Put the files in folders with the same name and compare again.
  
:LOGBOOK:
CLOCK: [2023-10-17 Tue 08:04]--[2023-10-17 Tue 09:17] =>  1:13
CLOCK: [2023-10-16 Mon 08:00]--[2023-10-16 Mon 09:57] =>  1:57
CLOCK: [2023-10-15 Sun 08:13]--[2023-10-15 Sun 09:23] =>  1:10
:END:

To compare two files and two folders with files I spent several
simple tests.

For the test I used Emacs's diff and ediff functions.
Also I used the diff command in the Linux terminal.

Test 1.
I created a folder /test and put inside two absolutely similar files:
file1.txt and file2.txt.
The files have the same content.
When I run M-x diff function and put the file's name.

Result:
Diff finished (no differences).  Mon Oct 16 12:18:47 2023

The ediff function result was the same.
But results were shown in different ways.

In the Linux terminal I run the command:
$diff -u file1.txt file2.txt
-u output NUM (default 3) lines of unified context

Command executed, but no results didn't shown in this case.

Test 2.
I added three lines with changes to file2.txt and ran
M-x diff again.
The changes were shown in a separate  buffer (it's name diff)
with highlights. 

Emac's ediff function works the same way. But I prefer diff function
result presentations.

In Linux terminal I run again:
$ diff -u file1.txt file2.txt
As result lines with changes were shown.

Anna Kalynchuk Reviewer: Michael Nystromfocus on you            Anna Kalynchuk Reviewer: Michael Nystromfocus on you
people come and go                                              people come and go
                                                              | Canges1
If you don't control your mind                                  If you don't control your mind
someone else will.                                              someone else will.
                                                              | Changes2
Sometimes the things that break your                            Sometimes the things that break your
heart end up fixing your vision.                                heart end up fixing your vision.
                                                              | Chenges3
Test 3
I created folder /dir1 and /dir2 inside my folder /tests and put where
two of the same files with same name (file1.txt).

When run M-x diff.

Results: Diff finished (no differences).  Mon Oct 16 12:54:43 2023

When I put file2.txt  into folder dir2 and run M-x diff in my Emacs:

Result:
diff -u /home/vikky/tests/dir2 /home/vikky/tests/dir1
Only in /home/vikky/tests/dir2: file2.txt
Diff finished.  Mon Oct 16 13:07:00 2023

In the Linux terminal:
vikky@penguin:~/tests$ diff -u dir1 dir2
Only in dir2: file2.txt

Test 4
I edited file1.txt in dir2 and ran M-x diff in Emacs
(I wrote the path to each file):

Result:
I saw only the differences between the two files. Differences
between two folders are not shown.

In the Linux terminal i used the command:
vikky@penguin:~/tests$ diff -a -y dir1 dir2
-a treat all lines as text;
-y output in two columns;
As a result I saw  not only the difference between two files, but the
difference between the two folders also:
Only in dir2: file2.txt

Test 4
I edited file1.txt in dir2 and ran M-x diff in Emacs (I wrote the path
to each file):

Result:
I saw only the differences between the two files. Differences between
the two folders are not shown.

In the Linux terminal i used the command:
vikky@penguin:~/tests$ diff -a -y dir1 dir2
-a treat all lines as text;
-y output in two columns;

As a result I saw  not only the difference between the two files, but the difference between the two folders also:
Only in dir2: file2.txt
 
Conclusions for 17/10/2023:
In Emacs using M-x diff function it not necessary to separately compare folders and whe files.
You can see full result in diff buffer.
In the Linux terminal it is possible at the same time to compare folder with files:
$ diff -a -y dir1 dir2
* RAW activate.sh
SCHEDULED: <2023-11-13 Mon>
* RAW Emacs + venv
SCHEDULED: <2023-11-13 Mon>
* RAW What is CI/CD and how does it work
SCHEDULED: <2023-11-15 Wed>
* RAW Elpy installation
SCHEDULED: <2023-11-15 Wed>
* RAW Speed-typing
SCHEDULED: <2023-11-13 Mon ++1d>
:PROPERTIES:
:LAST_REPEAT: [2023-11-11 Sat 17:14]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-11 Sat 17:14]
- State "DONE"       from "ACTIVE"     [2023-11-11 Sat 17:14]
- State "DONE"       from "ACTIVE"     [2023-11-10 Fri 17:13]
- State "DONE"       from "ACTIVE"     [2023-11-09 Thu 18:42]



* RAW A Python Q&A Session
SCHEDULED: <2023-11-12 Sun ++2w>
- Note taken on [2023-11-10 Fri 07:51] \\
  It is deliberately optimized for speed of developmentâits
  simple syntax, dynamic typing, lack of compile steps,
  and built-in toolset allow pro-grammers to develop programs in a fraction
  of the time needed when using some other
  tools.

  The net effect is that Python typically boosts developer productivity many times beyond the levels supported by traditional languages.


  Pythonâs built-in interfaces to operating-system services make it ideal for writing port-able, maintainable system-administration tools and utilities
  (sometimes called shell tools).
  Python programs can search files and directory trees,
  launch other programs, do parallel processing with processes and
  threads, and so on.

  Internet Scripting
  Python comes with standard Internet modules that allow Python programs
  to perform a wide variety of networking tasks, in client and server modes.
  Scripts can communicate over sockets; extract form information sent to
  server-side CGI scripts; transfer files by FTP; parse, generate, and analyzeXML files; send, receive, compose, and parse email;
  fetch web pages by URLs; parse the HTML and XML of fetched web pages; commu-
  nicate over XML-RPC, SO.

  Database Programming

  For traditional database demands, there are Python interfaces to all
  commonly used  ODBC, MySQL, PostgreSQL, SQLite, and more.



  âscriptâ -  a simpler top-level file.
  âprogramâ to refer to a more sophisticated multifile application.
:LOGBOOK:
CLOCK: [2023-11-10 Fri 07:49]--[2023-11-10 Fri 09:32] =>  1:43
:END:

* RAW How Python Runs Programs
SCHEDULED: <2023-11-12 Sun>

* RAW How You Run Program
SCHEDULED: <2023-11-12 Sun>

* RAW Computer science distilled - Basic
SCHEDULED: <2023-11-12 Sun>
:LOGBOOK:
CLOCK: [2023-11-10 Fri 09:35]--[2023-11-10 Fri 16:29] =>  6:54
:END:

* RAW Computer science distilled - Complexity
SCHEDULED: <2023-11-12 Sun>

* RAW Computer science distilled - Strategy
SCHEDULED: <2023-11-12 Sun>
