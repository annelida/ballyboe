MY PROJECTS    -*- mode: org; -*-
#+AUTHOR:    Viktoriia Kosinova
#+TITLE:     Mental Athlete's Wife ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     viqsiq@gmail.com
#+LANGUAGE: en
#+STARTUP: showall indent
#+PROPERTY: header-args :comments org
#+CATEGORY: Thesis
#+TODO: RAW INIT TODO ACTIVE | DONE


* Preparation to work as software tester
** Agenda Views
** TODO [#C] Install Selenium Python on Cromebook Linux. 
   SCHEDULED: <2023-11-03 Fri>
   :PROPERTIES:
   :CATEGORY: Selenium
   :END:
** TODO [#C] WEB Driver Tutorial
   SCHEDULED: <2023-11-03 Fri>
** TODO [#C] Git repository. Git tutorial.
   SCHEDULED: <2023-11-03 Fri>
Delete the old one and create a new and empy (annelida)
** TODO [#C] Upwork about testing
   SCHEDULED: <2023-11-03 Fri ++2d/3d>
   :PROPERTIES:
   :LAST_REPEAT: [2023-06-23 Fri 15:19]
   :END:
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:19]
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:18]
Requirements to job seekers (software testers)
** TODO [#C] Emacs tutorial
   SCHEDULED: <2023-11-03 Fri>
** TODO [#C] Org-mode tutorial
   SCHEDULED: <2023-11-03 Fri>
** TODO [#C] Linkedin video about software testing foundation
   SCHEDULED: <2023-11-03 Fri>
** DONE Reading aloud
   CLOSED: [2023-09-29 Fri 10:09] SCHEDULED: <2023-07-22 Sat>
   :PROPERTIES:
   :LAST_REPEAT: [2023-09-26 Tue 18:00]
   :END:
   - State "DONE"       from "TODO"       [2023-09-26 Tue 18:00]
   - State "DONE"       from "TODO"       [2023-09-26 Tue 17:43]
   - State "DONE"       from "TODO"       [2023-08-13 Sun 11:05]
   - State "DONE"       from "TODO"       [2023-07-27 Thu 14:26]
   - State "DONE"       from "TODO"       [2023-07-26 Wed 13:03]
   - State "DONE"       from "TODO"       [2023-07-25 Tue 17:19]
   - State "DONE"       from "TODO"       [2023-07-24 Mon 17:58]
   - State "DONE"       from "TODO"       [2023-07-17 Mon 13:16]
   - State "DONE"       from "TODO"       [2023-07-17 Mon 13:16]
   - State "DONE"       from "TODO"       [2023-07-12 Wed 19:10]
   - State "DONE"       from "TODO"       [2023-07-11 Tue 17:11]
   - State "DONE"       from "TODO"       [2023-07-10 Mon 16:12]
   - State "DONE"       from "TODO"       [2023-07-10 Mon 16:08]
   - State "DONE"       from "TODO"       [2023-07-09 Sun 10:51]
   - State "DONE"       from "TODO"       [2023-07-09 Sun 10:50]
   - State "DONE"       from "TODO"       [2023-07-07 Fri 16:29]
   - State "DONE"       from "TODO"       [2023-07-05 Wed 15:36]
   - State "DONE"       from "TODO"       [2023-07-03 Mon 18:07]
   - State "DONE"       from "TODO"       [2023-07-03 Mon 18:07]
   - State "DONE"       from "TODO"       [2023-07-02 Sun 13:15]
   - State "DONE"       from "TODO"       [2023-07-01 Sat 13:40]
   - State "DONE"       from "TODO"       [2023-06-30 Fri 15:27]
   - State "DONE"       from "TODO"       [2023-06-29 Thu 13:21]
   - State "DONE"       from "TODO"       [2023-06-29 Thu 13:21]
   - State "DONE"       from "TODO"       [2023-06-27 Tue 17:22]
   - State "DONE"       from "TODO"       [2023-06-27 Tue 17:22]
   - State "DONE"       from "TODO"       [2023-06-26 Mon 15:44]
** TODO [#C] Software management in Linux operation system
   SCHEDULED: <2023-11-03 Fri>
** TODO [#C] Repeatitive tasks in Org-agenda
   SCHEDULED: <2023-11-03 Fri>
** TODO [#B] Lucy Worsley transcript
   SCHEDULED: <2023-11-03 Fri>
** TODO Org-mode repeaters
   SCHEDULED: <2023-11-03 Fri ++1w>
   :PROPERTIES:
   :LAST_REPEAT: [2023-06-23 Fri 15:16]
   :END:
   - State "DONE"       from "TODO"       [2023-06-23 Fri 15:16]
[[https://www.danliden.com/posts/20220116-org-time.html]]
** TODO Practice: UnitTesting in Python
SCHEDULED: <2023-11-03 Fri>
*** TODO Official unittesting documentation
SCHEDULED: <2023-11-03 Fri>
*** TODO StackOverflow for questions resolving
SCHEDULED: <2023-11-03 Fri>
[[http://0--key.github.io/python/tdd/unittest_init.html]]
[[http://0--key.github.io/python/stdlib/python-built-in-functions.html]]
** DONE Feyman's learning technique
CLOSED: [2023-07-17 Mon 13:16] SCHEDULED: <2023-07-16 Sun>
** TODO Google shortcuts
SCHEDULED: <2023-11-03 Fri>
* Selenium Learning Course
** TODO Selenium official documentation
SCHEDULED: <2023-11-03 Fri>
* TODO Linux file system
SCHEDULED: <2023-11-03 Fri>
* TODO HTML tutorial
** DONE HTML Elements
CLOSED: [2023-09-25 Mon 10:41] SCHEDULED: <2023-09-25 Mon>
** DONE HTML Attributes
CLOSED: [2023-09-25 Mon 10:41] SCHEDULED: <2023-09-25 Mon>
* DONE Publishing Org-mode files to HTML
CLOSED: [2023-09-26 Tue 17:44] SCHEDULED: <2023-09-25 Mon>
* DONE Selenium locators
CLOSED: [2023-09-26 Tue 17:43] SCHEDULED: <2023-09-25 Mon>
* DONE Feynman technique. Studying,analyzing and descrybing by my own words.
CLOSED: [2023-09-28 Thu 10:01] SCHEDULED: <2023-09-28 Thu>
* DONE Selenium synchronization, Exception Handling and Assertions
CLOSED: [2023-09-28 Thu 10:01] SCHEDULED: <2023-09-28 Thu>
** DONE Selenium implicit wait
CLOSED: [2023-09-30 Sat 09:30] SCHEDULED: <2023-09-29 Fri>
* DONE Working with transcript "The Experiment That Teaches People How To Learn"
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
** DONE To rewrite the transcript
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
** DONE To make the synctacsis analyse
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
** TODO To create the cloud of words
** DONE To rewrite the text of video by my owm words
CLOSED: [2023-10-02 Mon 10:45] SCHEDULED: <2023-09-30 Sat>
* DONE Reading aloud: "Matilda" R. Dahl
CLOSED: [2023-10-02 Mon 10:46] SCHEDULED: <2023-09-30 Sat>
* DONE Using Git on Debian
CLOSED: [2023-10-06 Fri 08:01] SCHEDULED: <2023-10-05 Thu>
* DONE Generating a new SSH key and adding it to the ssh-agent
CLOSED: [2023-10-02 Mon 17:46] SCHEDULED: <2023-10-02 Mon>
** DONE Adding a new SSH key to GitHub account
CLOSED: [2023-10-02 Mon 17:46] SCHEDULED: <2023-10-02 Mon>
* ACTIVE [#C] Working with transctipt to video "How to Learn Anything Fast: Teach Your Brain to Focus"
SCHEDULED: <2023-10-21 Sat>
- Note taken on [2023-10-14 Sat 13:30] \\
  Part I "The neuroscience solution to boredom "

  Sometimes during our learningÂ process it is difficult to focus and
  remember studying material.The reason why our brain works so bad in
  particular situationsis because the new information can be not
  interesting for us or too hard or boring. Scientific research has proven
  that our brain in the studying process tries to search for rewards.
  And in cases when rewards are non-obvious our brain doesn't know how
  to progress.
  To solve this trouble the scientists offer to change our direction of
  thinking.
  Instead of traditional searching rewards in our learning process,
  just try to seek novelty.
 
  And think about the novelty, new knowledge as your rewards.
  
:LOGBOOK:
CLOCK: [2023-10-14 Sat 13:30]--[2023-10-14 Sat 14:03] =>  0:33
:END:
** DONE Rewrite the transcript
CLOSED: [2023-10-10 Tue 08:00] SCHEDULED: <2023-10-06 Fri>
* ACTIVE Org-Jekyll - configuration options
SCHEDULED: <2023-10-17 Tue>
- Note taken on [2023-10-12 Thu 15:01] \\
  Reverse approach: use the working sample with minimum modifications
  (personal data).
- Note taken on [2023-10-11 Wed 17:05] \\
  * Prerequisites
  I have two repositories:
  - The first -  working properly
  - The second - new, not working.
  - Core samples with brief description how it shold work

    The task: *Modificate the content of not working repo and force it
    work properly as the first one*

    The average workflow:
    1. Core samples reading till full clarification the idea behind
       these words;

    2. Find differences among these two repos. It's not difficult by
       /diff/ utility in Bash or the same in Emacs;

    3. To ponder aroun what is should be changed, why and how?

    4. Elaborate a clear hypothesis how to make changes to achieve the
       result.
- Note taken on [2023-10-11 Wed 15:47] \\
  Compare two folders: the working one sample in 0--key.github.io ||
  annelida.github.io

  Manually
  Via diff utility
  Modification date
  ~/git/annelida.github.io/_posts/core-samples/2011-12-29-jekyll-introduction.md
 ]]
:LOGBOOK:
CLOCK: [2023-10-17 Tue 09:18]
CLOCK: [2023-10-11 Wed 15:47]--[2023-10-11 Wed 16:07] =>  0:20
:END:
1. I compared the list of folders and files for two repositories:
0--key.github.io with annelida.github.io

Only annelida.github.io has:
_site
Gemfile.lock
index.md

Only 0--key.github.io has files:
screenshot.png
old_index.md

Using M-x diff compared:
index.md (from annelida.github.io)
old_index.md (from 0--key.github.io)

Result:
diff -u /home/vikky/git/annelida.github.io/index.md /home/vikky/git/0--key.github.io/old_index.md                                                                                                                                          1. I compared the content of two repositories: 
0--key.github.io with annelida.github.io

Only annelida.github.io has:
_site
Gemfile.lock
[[https://jekyllrb.com/docs/step-by-step/10-deployment/][What is Gemfile.lock]]
[[https://www.jekyll.com.cn/tutorials/using-jekyll-with-bundler/#:~:text=Bundler%20provides%20a%20consistent%20environment,tool%20to%20use%20with%20Jekyll.][What is Bundler]]
[[https://stackoverflow.com/questions/51157446/whats-the-difference-between-bundle-exec-jekyll-serve-and-jekyll-serve][Why you need use bundler]]
index.md

Only 0--key.github.io has files:
screenshot.png
old_index.md

Using M-x diff compared:
index.md (from annelida.github.io)
old_index.md (from 0--key.github.io)

Result:
diff -u /home/vikky/git/annelida.github.io/index.md /home/vikky/git/0--key.github.io/old_index.md
Diff finished (no differences).  Tue Oct 17 09:01:54 2023
Diff finished (no differences).  Tue Oct 17 09:01:54 2023

* DONE Github.io - configuration
CLOSED: [2023-10-06 Fri 08:01] SCHEDULED: <2023-10-04 Wed>
* DONE What is Python REPL
CLOSED: [2023-10-06 Fri 08:01] SCHEDULED: <2023-10-04 Wed>
* DONE What is Ipython?
CLOSED: [2023-10-06 Fri 08:01] SCHEDULED: <2023-10-04 Wed>
* ACTIVE Linux symbolic links 10m
SCHEDULED: <2023-10-17 Tue>
- Note taken on [2023-10-10 Tue 19:27] \\
  M-x man <enter> ln
- Note taken on [2023-10-10 Tue 15:30]
  * It allows to move the original file in safe place.
  * On the place original file it possible to leave the shortcut with
  * link to original file. For create soft link use command ln -s
* ACTIVE Emacs server 10m
SCHEDULED: <2023-10-17 Tue>
- Note taken on [2023-10-10 Tue 15:27] \\
  * Launch the graphical version;
  * Start the server: =M-x server-start=
  * Launch the client version by =emacsclient -t=
* TODO Org-Agenda views: item arrangement in daily agenda, its priorities;
SCHEDULED: <2023-10-17 Tue>
* ACTIVE Magit brief overview
SCHEDULED: <2023-10-20 Fri>
- Note taken on [2023-10-13 Fri 07:58] \\
  * To display information about the current Git repository C-x-g
    or gs (key-chord);
  * Depending on what state repository is in, this buffer may contain
    sections titled "Staged changes", "Unstaged changes",
     "Unmerged into origin/master",
    "Unpushed to origin/master";
  * To move file from ustage area to stage area: go  the section named
    "Unstaged changes" and type s to stage the changes you have made to
    that file or hunk (piece of hunk).
 
  Most Magit commands invoks from the status buffer:
  F		magit-pull
  G		magit-refresh-all
  P		magit-push
  c		magit-commit
  f		magit-fetch
  g		magit-refresh
  l		magit-log
  
How rename last commit:
Press c (Commit), then a (Amend), edit the message, C-c C-c.
  
:LOGBOOK:
CLOCK: [2023-10-13 Fri 07:53]--[2023-10-13 Fri 08:17] =>  0:24
:END:
* TODO Key-chords from 0--key: each key-chorded command with explanation
SCHEDULED: <2023-10-17 Tue>
:LOGBOOK:
CLOCK: [2023-10-10 Tue 18:53]--[2023-10-10 Tue 19:00] =>  0:07
:END:
C-h a <command name>
C-h f
* ACTIVE Emacs frames
SCHEDULED: <2023-10-20 Fri>
- Note taken on [2023-10-13 Fri 08:31] \\
  * A graphical display that contains one or more Emacs windows,
    a menu bar, tool bar, echo area.
  * The C-x 5 o ( other-frame ) command selects the next frame
    on the current terminal.
    (';) - key-chord
[[info:emacs#Frame Commands][emacs#Frame Commands]]
[[info:emacs#Frames][emacs#Frames]]
:LOGBOOK:
CLOCK: [2023-10-13 Fri 08:25]--[2023-10-13 Fri 08:51] =>  0:26
CLOCK: [2023-10-10 Tue 19:00]--[2023-10-10 Tue 19:14] =>  0:14
:END:
* ACTIVE Emacs buffers
SCHEDULED: <2023-10-20 Fri>
The text you are editing in Emacs resides in an
object called a âbufferâ.
Each buffer has a unique name.

[[info:emacs#Kill Buffer][emacs#Kill Buffer]]
[[info:emacs#Buffers][emacs#Buffers]]

:LOGBOOK:
CLOCK: [2023-10-13 Fri 09:22]--[2023-10-13 Fri 09:42] =>  0:20
CLOCK: [2023-10-13 Fri 09:16]--[2023-10-13 Fri 09:22] =>  0:06
CLOCK: [2023-10-10 Tue 19:14]--[2023-10-10 Tue 19:20] =>  0:06
:END:
* ACTIVE Emacs windows - resize and split
SCHEDULED: <2023-10-20 Fri>
- Note taken on [2023-10-13 Fri 09:01] \\
  * Frame can be split into several windows. Buffer or it's part
    displays in window
  * one Emacs window is the âselected windowâ; the buffer
    this window is displaying is the current buffer.
:LOGBOOK:
CLOCK: [2023-10-13 Fri 08:59]--[2023-10-13 Fri 09:16] =>  0:17
:END:
[[info:emacs#Basic Window][emacs#Basic Window]]
[[info:emacs#Split Window][emacs#Split Window]]
[[info:emacs#Change Window][emacs#Change Window]]
* DONE Sym linkage between host and repo
CLOSED: [2023-10-10 Tue 19:23] SCHEDULED: <2023-10-10 Tue>
:LOGBOOK:
CLOCK: [2023-10-10 Tue 13:58]--[2023-10-10 Tue 14:48] =>  0:50
:END:
* TODO Comparing files and folders in Linux/Emacs
SCHEDULED: <2023-10-17 Tue>
- Note taken on [2023-10-15 Sun 08:13] \\

  In Emacs:

  The command M-x diff prompts for two file names, using the minibuffer,
  and displays the differences between the two files in a buffer
  named *diff*.
  [[info:emacs#Comparing Files][emacs#Comparing Files]]

  A (much more sophisticated) alternative is M-x ediff
  [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]]

  In Linux terminal:

  To find diff use this command:

  diff -qr dir1/ dir2/
  -r will diff all subdirectories too
  -q tells diff to report only when files differ.

  diff  --brief dir1/ dir2/
  --brief will show the files that dosent exist
  in directory.

  Meld is also a great tool for comparing two directories:

  meld dir1/ dir2/
  Meld has many options for comparing files or directories.
  If two files differ, it's easy to enter file comparison mode
  and see the exact differences.

  Create two files with some difference and compare them using
  each possible approach.
  Put the files in folders with the same name and compare again.
  
:LOGBOOK:
CLOCK: [2023-10-16 Mon 08:00]--[2023-10-16 Mon 09:57] =>  1:57
CLOCK: [2023-10-15 Sun 08:13]--[2023-10-15 Sun 09:23] =>  1:10
:END:

To compare two files and two folders with files I spent several
simple tests.

For the test I used Emacs's diff and ediff functions.
Also I used the diff command in the Linux terminal.

Test 1.
I created a folder /test and put inside two absolutely similar files:
file1.txt and file2.txt.
The files have the same content.
When I run M-x diff function and put the file's name.

Result:
Diff finished (no differences).  Mon Oct 16 12:18:47 2023

The ediff function result was the same.
But results were shown in different ways.

In the Linux terminal I run the command:
$diff -u file1.txt file2.txt
-u output NUM (default 3) lines of unified context

Command executed, but no results didn't shown in this case.

Test 2.
I added three lines with changes to file2.txt and ran
M-x diff again.
The changes were shown in a separate  buffer (it's name diff)
with highlights. 

Emac's ediff function works the same way. But I prefer diff function
result presentations.

In Linux terminal I run again:
$ diff -u file1.txt file2.txt
As result lines with changes were shown.

Anna Kalynchuk Reviewer: Michael Nystromfocus on you            Anna Kalynchuk Reviewer: Michael Nystromfocus on you
people come and go                                              people come and go
                                                              | Canges1
If you don't control your mind                                  If you don't control your mind
someone else will.                                              someone else will.
                                                              | Changes2
Sometimes the things that break your                            Sometimes the things that break your
heart end up fixing your vision.                                heart end up fixing your vision.
                                                              | Chenges3
Test 3
I created folder /dir1 and /dir2 inside my folder /tests and put where
two of the same files with same name (file1.txt).

When run M-x diff.

Results: Diff finished (no differences).  Mon Oct 16 12:54:43 2023

When I put file2.txt  into folder dir2 and run M-x diff in my Emacs:

Result:
diff -u /home/vikky/tests/dir2 /home/vikky/tests/dir1
Only in /home/vikky/tests/dir2: file2.txt
Diff finished.  Mon Oct 16 13:07:00 2023

In the Linux terminal:
vikky@penguin:~/tests$ diff -u dir1 dir2
Only in dir2: file2.txt

Test 4
I edited file1.txt in dir2 and ran M-x diff in Emacs
(I wrote the path to each file):

Result:
I saw only the differences between the two files. Differences
between two folders are not shown.

In the Linux terminal i used the command:
vikky@penguin:~/tests$ diff -a -y dir1 dir2
-a treat all lines as text;
-y output in two columns;
As a result I saw  not only the difference between two files, but the
difference between the two folders also:
Only in dir2: file2.txt

Test 4
I edited file1.txt in dir2 and ran M-x diff in Emacs (I wrote the path
to each file):

Result:
I saw only the differences between the two files. Differences between
the two folders are not shown.

In the Linux terminal i used the command:
vikky@penguin:~/tests$ diff -a -y dir1 dir2
-a treat all lines as text;
-y output in two columns;

As a result I saw  not only the difference between the two files, but the difference between the two folders also:
Only in dir2: file2.txt
 
Conclusions for 17/10/2023:
In Emacs using M-x diff function it not necessary to separately compare folders and whe files.
You can see full result in diff buffer.
In the Linux terminal it is possible at the same time to compare folder with files:
$ diff -a -y dir1 dir2

