MY PROJECTS    -*- mode: org; -*-
#+AUTHOR:    Viktoriia Kosinova
#+TITLE:     Mental Athlete's Wife ToDo List
#+SUBTITLE:  Life in a plain text
#+EMAIL:     viqsiq@gmail.com
#+LANGUAGE: en
#+STARTUP: showall indent
#+PROPERTY: header-args :comments org
#+CATEGORY: Thesis
#+TODO: | AMPLE
#+TODO: RAW Init DP0 Todo DP1 Active | DONE
#+TODO: DELAY LAG RETARD | BARE


* Learning
** Meta
*** Spaced Repetition

*** Pomodoro Technique

*** Deliberate Practice
*** DELAY Eisenhower Matrix
SCHEDULED: <2024-05-14 Tue>
:PROPERTIES:
:CATEGORY: Meta
:END:

- Note taken on [2024-01-08 Mon 11:57] \\
  The Eisenhower Matrix is a task management tool that helps you
  organize and prioritize tasks by urgency and importance. Using the
  tool, you’ll divide your tasks into four boxes based on the tasks
  you’ll do first, the tasks you’ll schedule for later, the tasks
  you’ll delegate, and the tasks you’ll delete.

  /Urgent tasks/ require your immediate attention;

  /Important tasks/ may not require immediate attention, but these tasks
  help you achieve your long-term goals;

  Quadrant three is the “delegate” quadrant, and this is where you’ll
  place any tasks that are urgent but not important. These tasks must
  be completed now, but they don’t affect your long-term goals you can
  delegate these tasks to other members of your team;

  Once you’ve gone through your to-do list and added tasks to the first
  three quadrants, you’ll notice that a handful of tasks are left
  over. The tasks left over are tasks that weren’t urgent or important.
  These unimportant, non-urgent distractions are simply getting in the
  way of you accomplishing your goals.
*** Task Management
:PROPERTIES:
:CATEGORY: TM
:END:
**** New article
***** RAW Header
***** Preface
***** Raw TOC
***** Org-Agenda as the Maain Tool
features description
***** Task classification
** English
:PROPERTIES:
:CATEGORY: English
:END:
*** Word Cloud elabouraton
:PROPERTIES:
:CATEGORY: WordCloud
:END:
**** Matilda

**** Philosophy of Software Design

*** Working with transcripts

**** "How to Learn Anything Fast: Teach Your Brain to Focus"
SCHEDULED: <2024-04-07 Sun ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-02-08 Thu 19:03]
:END:
- State "AMPLE"      from ""           [2024-02-08 Thu 19:03]
- State "AMPLE"      from ""           [2024-01-25 Thu 18:34]
- State "DONE"       from "Active"     [2023-11-29 Wed 18:19]
- Note taken on [2023-10-14 Sat 13:30] \\
  Part I "The neuroscience solution to boredom "

  Sometimes during our learning process it is difficult to focus and
  remember studying material.The reason why our brain works so bad in
  particular situationsis because the new information can be not
  interesting for us or too hard or boring. Scientific research has proven
  that our brain in the studying process tries to search for rewards.
  And in cases when rewards are non-obvious our brain doesn't know how
  to progress.
  To solve this trouble the scientists offer to change our direction of
  thinking.
  Instead of traditional searching rewards in our learning process,
  just try to seek novelty.
 
  And think about the novelty, new knowledge as your rewards.
  
:LOGBOOK:
CLOCK: [2023-10-14 Sat 13:30]--[2023-10-14 Sat 14:03] =>  0:33
:END:
**** AMPLE Transcript "Sex and the city"
SCHEDULED: <2024-02-10 Sat>
*** Grammar
**** BBC Learning English
***** RAW Inderect questions
SCHEDULED: <2024-03-22 Fri ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-02-22 Thu 17:56]
:END:
- State "AMPLE"      from "DELAY"      [2024-02-22 Thu 17:56]
- State "AMPLE"      from "DELAY"      [2024-02-22 Thu 17:56]
- State "AMPLE"      from "DELAY"      [2024-02-09 Fri 18:49]
:LOGBOOK:
CLOCK: [2024-02-09 Fri 12:23]--[2024-02-09 Fri 12:42] =>  0:19
:END:
[[https://www.bbc.co.uk/learningenglish/english/course/lower-intermediate/unit-21/session-2/activity-3]]
***** DELAY Tense tour
SCHEDULED: <2024-03-11 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-02-22 Thu 17:56]
:END:
- State "AMPLE"      from "DELAY"      [2024-02-22 Thu 17:56]
- State "AMPLE"      from "DELAY"      [2024-02-09 Fri 18:49]
:LOGBOOK:
CLOCK: [2024-02-09 Fri 13:12]--[2024-02-09 Fri 13:29] =>  0:17
CLOCK: [2024-02-09 Fri 12:42]--[2024-02-09 Fri 12:58] =>  0:16
:END:
[[https://www.bbc.co.uk/learningenglish/english/course/lower-intermediate/unit-20/session-2/activity-3]]
***** Present Simple and Present Continuous
SCHEDULED: <2024-03-14 Thu ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-02-29 Thu 17:21]
:END:
- State "AMPLE"      from ""           [2024-02-29 Thu 17:21]
:LOGBOOK:
CLOCK: [2024-02-29 Thu 11:20]--[2024-02-29 Thu 11:52] =>  0:32
:END:
[https://www.bbc.co.uk/learningenglish/english/course/lower-intermediate/unit-2/session-2/activity-3]
***** DONE Questions forms
SCHEDULED: <2024-02-28 Wed ++2w>
:LOGBOOK:
CLOCK: [2024-02-28 Wed 09:48]--[2024-02-28 Wed 10:29] =>  0:41
CLOCK: [2024-02-21 Wed 09:38]--[2024-02-21 Wed 09:54] =>  0:16
:END:
https://www.bbc.co.uk/learningenglish/english/course/lower-intermediate/unit-1/session-2/activity-4
***** "Like" for preference and description
SCHEDULED: <2024-03-15 Fri ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-03-01 Fri 18:36]
:END:
- State "AMPLE"      from ""           [2024-03-01 Fri 18:36]
:LOGBOOK:
CLOCK: [2024-03-01 Fri 10:32]--[2024-03-01 Fri 11:03] =>  0:31
:END:
[[https://www.bbc.co.uk/learningenglish/english/course/lower-intermediate/unit-3/session-2/activity-4]]
***** Adverbs of frequency
SCHEDULED: <2024-03-19 Tue ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-03-05 Tue 18:43]
:END:
- State "AMPLE"      from ""           [2024-03-05 Tue 18:43]
:LOGBOOK:
CLOCK: [2024-03-05 Tue 10:30]--[2024-03-05 Tue 13:41] =>  3:11
:END:
[https://www.bbc.co.uk/learningenglish/english/course/lower-intermediate/unit-4/session-2/activity-4]
***** 'Have to' and 'must'
SCHEDULED: <2024-03-21 Thu ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-03-07 Thu 18:31]
:END:
- State "AMPLE"      from ""           [2024-03-07 Thu 18:31]
:LOGBOOK:
CLOCK: [2024-03-07 Thu 10:57]--[2024-03-07 Thu 11:33] =>  0:36
:END:
[https://www.bbc.co.uk/learningenglish/english/course/lower-intermediate/unit-5/session-2/activity-5]
**** Present simple

**** Present perfect
*** The English We Speak
**** Rinse repeat
SCHEDULED: <2024-03-15 Fri ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-03-01 Fri 18:36]
:END:
- State "AMPLE"      from ""           [2024-03-01 Fri 18:36]
:LOGBOOK:
CLOCK: [2024-03-01 Fri 11:03]--[2024-03-01 Fri 11:14] =>  0:11
:END:
[https://www.bbc.co.uk/sounds/play/p0hf8wg1]
**** A million to one
SCHEDULED: <2024-03-11 Mon>
[https://www.bbc.co.uk/sounds/play/p0hcy06f]
** Linux
:PROPERTIES:
:CATEGORY: Linux
:END:

*** DELAY MAN ssh
SCHEDULED: <2024-03-30 Sat ++1w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-11 Thu 16:02]
:END:
- State "DONE"       from "Active"     [2023-12-20 Wed 18:41]
- Note taken on [2023-12-19 Tue 09:15] \\
  *The Secure Shell Protocol (SSH)* is a cryptographic network
  protocol for operating network services securely (in a way that
  avoids someone or something being harmed by any risk, danger) over
  an unsecured network.
  *ssh (SSH client)* is a program for logging
  into a remote machine and for executing commands on a remote
  machine. It is intended to provide secure encrypted communications
  between two untrusted hosts over an insecure network

  ssh username@IP address
:LOGBOOK:
CLOCK: [2023-12-20 Wed 09:55]--[2023-12-20 Wed 10:45] =>  0:50
CLOCK: [2023-12-19 Tue 09:15]--[2023-12-19 Tue 09:18] =>  0:03
:END:
*** DELAY MAN df
SCHEDULED: <2024-03-30 Sat ++1w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-11 Thu 16:03]
:END:
- State "AMPLE"      from "RAW"        [2024-01-11 Thu 16:03]
- State "AMPLE"      from "Init"       [2024-01-11 Thu 16:03]
- State "DONE"       from "Active"     [2023-12-20 Wed 18:42]
- Note taken on [2023-12-19 Tue 09:20] \\
  df - report file system disk space usage

  -h, --human-readable print sizes in powers of 1024 (e.g., 1023M)
:LOGBOOK:
CLOCK: [2023-12-19 Tue 09:18]--[2023-12-19 Tue 09:22] =>  0:04
:END:
*** RAW MAN free
SCHEDULED: <2024-03-12 Tue ++1w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-11 Thu 16:04]
:END:
- State "AMPLE"      from "RAW"        [2024-01-11 Thu 16:04]
- State "DONE"       from "Active"     [2023-12-20 Wed 18:42]
- Note taken on [2023-12-19 Tue 09:31] \\
  =free= displays the total amount of free and used physical and swap
  memory in the system, as well as the buffers and caches used by the
  kernel. The information is gathered by parsing /proc/meminfo. The
  displayed columns are:

  *Total*- Total installed memory (MemTotal and SwapTotal in
  /proc/meminfo)

  *Used*-Used memory (calculated as total - free - buffers - cache)

  *free*- Unused memory (MemFree and SwapFree in /proc/meminfo)

  *shared*- Memory used (mostly) by tmpfs (Shmem in /proc/meminfo)

  *buffers*- Memory used by kernel buffers (Buffers in /proc/meminfo)
  *cache*- Memory used by the page cache and slabs (Cached and
  SReclaimable in /proc/meminfo)
:LOGBOOK:
CLOCK: [2023-12-19 Tue 09:22]--[2023-12-19 Tue 09:34] =>  0:12
:END:
*** DELAY MAN htop
SCHEDULED: <2024-03-13 Wed ++1w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-11 Thu 16:06]
:END:

- State "AMPLE"      from "Init"       [2024-01-11 Thu 16:06]
- State "DONE"       from "Active"     [2023-12-20 Wed 18:43]
*htop* is an interactive system-monitor process-viewer and
process-manager. It shows a frequently updated list of the processes
running on a computer, normally ordered by the amount of CPU usage.
*** DELAY MAN ps
SCHEDULED: <2024-03-13 Wed ++1w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-11 Thu 16:08]
:END:
- State "AMPLE"      from "Init"       [2024-01-11 Thu 16:08]
- State "DONE"       from "Active"     [2023-12-20 Wed 18:44]
- Note taken on [2023-12-19 Tue 10:19] \\
  ps -ef displays all processes running on the system, while htop
   displays real-time information about processes that are currently
   running.

   ps -ef provides a detailed listing of all processes running on the
   system, including their process ID (PID), parent process ID (PPID),
   CPU usage, memory usage, and more. 
*** DELAY [#B] Process management
SCHEDULED: <2024-03-15 Fri>
- Note taken on [2023-12-20 Wed 11:33] \\

  Is the technique used by organizations to analyze, optimize, monitor,
  and control various processes.

  It involves controlling and monitoring the processes running on a
  Linux system, including managing process resources, scheduling
  processes to run on the CPU, and terminating processes when
  necessary.

  By managing processes, the operating system can ensure that
  resources are used efficiently and that the system remains
  stable. In addition, process management allows the operating system
  to control how programs interact with each other.
  
*** DELAY Software management
SCHEDULED: <2024-03-30 Sat>

Is a science of planning and leading software projects.

These software main activities include:

Managing the Software Development Process
Developing the Software Development Plan (SDP)
Developing the Software Resource Data Report (SDRP)
Choosing a Software Development Approach
Avoiding Standard Software Risks
Using Open Source Software

*** DELAY =helpful= package usage
SCHEDULED: <2024-03-11 Mon>

*** DELAY =ivy= package usage
SCHEDULED: <2024-03-11 Mon>

*** Piping in Linux

A =pipe= is a form of redirection (transfer of standard output to some
other destination) that is used in Linux and other Unix-like operating
systems to send the output of one command/program/process to another
command/program/process for further processing.

#+begin_src sh :results output
  cd ~/git/ballyboe/practice
  ls
#+end_src

#+RESULTS:
#+begin_example
brian
myfile.py
practice.org
__pycache__
script1.py
test_projects
tests.org
test_str.py
test_sum.py
threenames.py
types_operations.org
#+end_example

#+begin_src sh :results output
  cd ~/git/ballyboe/practice
  ls | grep org
#+end_src

#+RESULTS:
: practice.org
: tests.org
: types_operations.org

*** DELAY How ho check which Debian distro are you using
SCHEDULED: <2024-03-14 Thu>

#+begin_src sh :results output
hostnamectl
#+end_src

#+RESULTS:
:    Static hostname: penguin
:          Icon name: computer-container
:            Chassis: container
:         Machine ID: 73e4ab908d9b42d3a769e1c78c811520
:            Boot ID: c4f0569988134547bf2cfa9ad7d4983b
:     Virtualization: lxc
:   Operating System: Debian GNU/Linux 11 (bullseye)
:             Kernel: Linux 6.1.55-06877-gc83437f2949f
:       Architecture: x86-64

#+begin_src sh :results output
cat /etc/issue
#+end_src

#+RESULTS:
: Debian GNU/Linux 11 \n \l
: 

#+begin_src sh :results output
cat /etc/os-release
#+end_src

#+RESULTS:
: PRETTY_NAME="Debian GNU/Linux 11 (bullseye)"
: NAME="Debian GNU/Linux"
: VERSION_ID="11"
: VERSION="11 (bullseye)"
: VERSION_CODENAME=bullseye
: ID=debian
: HOME_URL="https://www.debian.org/"
: SUPPORT_URL="https://www.debian.org/support"
: BUG_REPORT_URL="https://bugs.debian.org/"
** Python
*** AMPLE Venvs decluttering and reorder
SCHEDULED: <2024-02-22 Thu>
:PROPERTIES:
:CATEGORY: Python
:END:
:LOGBOOK:
CLOCK: [2024-02-22 Thu 07:22]--[2024-02-22 Thu 08:25] =>  1:03
:END:
*** AMPLE Interactive Python
SCHEDULED: <2024-02-22 Thu>
:PROPERTIES:
:CATEGORY: Python
:END:
:LOGBOOK:
CLOCK: [2024-02-22 Thu 09:45]--[2024-02-22 Thu 09:56] =>  0:11
CLOCK: [2024-02-22 Thu 08:25]--[2024-02-22 Thu 08:28] =>  0:03
:END:
Interactive mode is when you launch the interpreter and use it as a
platform to run code that you type in directly.
*** AMPLE Python REPL
SCHEDULED: <2024-02-22 Thu>
:PROPERTIES:
:CATEGORY: Python
:END:
[[https://realpython.com/python-repl/ ]]

The Python standard shell, or REPL (Read-Eval-Print Loop), which reads
a piece of code, evaluates it, and then prints the result to the
console in a loop. It is allows you to run Python code interactively
while working on a project or learning the language. This tool is
available in every Python installation.

*** Python script
SCHEDULED: <2024-03-19 Tue ++2w>
:PROPERTIES:
:CATEGORY: Python
:LAST_REPEAT: [2024-03-05 Tue 18:42]
:END:
- State "AMPLE"      from ""           [2024-03-05 Tue 18:42]
:LOGBOOK:
CLOCK: [2024-03-05 Tue 09:42]--[2024-03-05 Tue 10:03] =>  0:21
:END:
In script mode, you use the interpreter to run a source file as an
executable program. In this case, Python loads the file content and
runs the code line by line, following the script or program’s
execution flow.
*** Init Python: modules, relative import. 
SCHEDULED: <2024-03-30 Sat>
:PROPERTIES:
:CATEGORY: Python
:END:
- Note taken on [2023-10-24 Tue 08:54] \\
  A Python module is a file that has a .py extension, and a Python
  package is any folder that has modules inside it.

  Relative imports in Python 3 allow you to import modules
  or functions from other packages within your package hierarchy.

  To use relative imports, you need to use the from . import syntax.
  The number of dots before the import statement represents the number
  of package levels you need to go up to reach the desired module or
  function.
:LOGBOOK:
CLOCK: [2023-10-24 Tue 08:07]--[2023-10-24 Tue 09:32] =>  1:25
:END:

*** RAW [#A] Python classes
SCHEDULED: <2024-03-11 Mon>
:PROPERTIES:
:LAST_REPEAT: [2023-11-22 Wed 14:25]
:CATEGORY: Python
:END:
- State "DONE"       from "Active"     [2023-11-22 Wed 14:25]
- Note taken on [2023-11-01 Wed 16:02] \\
  Stock portfolio class clarification.
:LOGBOOK:
CLOCK: [2024-03-01 Fri 08:18]--[2024-03-01 Fri 08:59] =>  0:41
CLOCK: [2023-10-27 Fri 08:53]--[2023-10-27 Fri 09:33] =>  0:40
CLOCK: [2023-10-26 Thu 09:51]--[2023-10-26 Thu 17:30] =>  7:39
:END:

[[https://realpython.com/python-classes/]]
[[https://realpython.com/python3-object-oriented-programming/]]

#+begin_quote
A common analogy is that a class is like the blueprint for a
house. You can use the blueprint to create several houses and even a
complete neighborhood. Each concrete house is an *object* or
*instance* that’s derived from the blueprint.

In OOP, you commonly use the term *attributes* to refer to the
properties or data associated with a specific object of a given
class. In Python, attributes are variables defined inside a class with
the purpose of storing all the required data for the class to work.

You’ll use the term *methods* to refer to the different behaviors that
objects will show. Methods are functions that you define within a
class. These functions typically operate on or with the attributes of
the underlying instance or class. Attributes and methods are
collectively referred to as members of a class or object.
#+end_quote

#+begin_src python :results output
class Student:
  def __init__(self, name, age):
    self.name = name
    self.age = age

s1 = Student("Tony Black", 16)

print(s1.name)
print(s1.age)
#+end_src

#+RESULTS:
: Tony Black
: 16

The __init__(function) is using to assign the values of name and age.

This method is known as the object initializer because it defines and
sets the initial values for your attributes.

Object's methods are functions that belong to the object.

#+begin_src python :results output
  class Student:
    def __init__(self, name, age):
      self.name = name
      self.age = age

    def stfunc(self):
      print("The student's name is " + self.name)

  s1 = Student("Tony Black", 16)
  s1.stfunc()
#+end_src

#+RESULTS:
: The student's name is Tony Black

*** RAW [#A]Software testing with Python and Selenium
SCHEDULED: <2024-03-11 Mon ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-16 Thu 09:23]
:CATEGORY: Python
:END:
- Note taken on [2024-03-06 Wed 08:30] \\
  To run Selenium tests in Google Chrome, besides the Chrome browser
  itself, ChromeDriver needs to be installed.

  ChromeDriver is a separate executable that Selenium WebDriver uses
  to control Chrome.

  Installing ChromeDriver is easy: go to ChromeDriver site
  [https://sites.google.com/a/chromium.org/chromedriver/downloads]

  Download the one for your target platform, unzip it and put
  chromedriver executable in your PATH.

  You can specify the absolute path to your chrome driver in your script as such:

  #+begin_example
  from selenium import webdriver
  driver = webdriver.Chrome(executable_path='/path/to/driver/chromedriver'
  #+end_example

  Or you can add the path to your webdriver in the PATH system variable
  as so:

  #+begin_example
  export PATH=$PATH:/path/to/driver/chrome-driver
  #+end_example

  You may add the above line to your /home/<user>/.profile file to make
  it permanent.
  To verify the installation execute command
  #+begin_example
  chromedriver
  #+end_example
  You shall see:

  Starting ChromeDriver 80.0.3987.16 (....) on port 9515 Only local
  connections are allowed.  Please protect ports used by ChromeDriver
  and related test frameworks to prevent access by malicious code.

  #+begin_src python :results output
     from selenium import webdriver
     import time
     driver = webdriver.Chrome()
     driver.get("https://annelida.github.io/")
     time.sleep(1) # wait 1 second
     driver.quit()
  #+end_src

  #+RESULTS:

The =By class= is used to locate elements within a document.
Selenium provides the following method to locate elements in a page: 
 =find_element=
To find multiple elements (these methods will return a list):
 =find_elements=
 The attributes available for the =By class= are used to locate
 elements on a page. These are the attributes available for =By
 class=:
 #+begin_example
 ID = "id"
 NAME = "name"
 XPATH = "xpath"
 LINK_TEXT = "link text"
 PARTIAL_LINK_TEXT = "partial link text"
 TAG_NAME = "tag name"
 CLASS_NAME = "class name"
 CSS_SELECTOR = "css selector"
 #+end_example

 #+begin_example
 find_element(By.ID, "id")
 find_element(By.NAME, "name")
 find_element(By.XPATH, "xpath")
 find_element(By.LINK_TEXT, "link text")
 find_element(By.PARTIAL_LINK_TEXT, "partial link text")
 find_element(By.TAG_NAME, "tag name")
 find_element(By.CLASS_NAME, "class name")
 find_element(By.CSS_SELECTOR, "css selector")
 #+end_example

 The =Keys class= provide keys in the keyboard like RETURN, F1, ALT
 etc.

 #+begin_example
 from selenium import webdriver
 from selenium.webdriver.common.keys import Keys
 from selenium.webdriver.common.by import By
 #+end_example

 Find element by ID

 #+begin_src python :results output
   from selenium import webdriver
   from selenium.webdriver.common.keys import Keys
   from selenium.webdriver.common.by import By
   import time

   driver = webdriver.Chrome()
   driver.get("https://annelida.github.io/")
   elem = driver.find_element(By.ID, "text-table-of-contents").text 
   time.sleep(1) # wait 1 second
   print(elem)
   driver.quit()
 #+end_src

 #+RESULTS:
 : Short intro
 : What is Literate Programming?

 Find element By more examples

 #+begin_src python :results output
   from selenium import webdriver
   from selenium.webdriver.common.keys import Keys
   from selenium.webdriver.common.by import By
   import time

   driver = webdriver.Chrome()
   driver.get("http://travel.agileway.net")
   driver.find_element(By.ID, "username").send_keys("agileway") # Textfield
   driver.find_element(By.ID, "password").send_keys("testwise") # Textfield
   driver.find_element(By.CSS_SELECTOR, "input[value='Sign in']").click() #Button
   time.sleep(1) # wait 1 second
   driver.quit()
 #+end_src

 #+RESULTS:


- Note taken on [2024-02-27 Tue 09:22] \\

  [[https://selenium-python.readthedocs.io/locating-elements.html][Locating elements]]
  [[https://copyprogramming.com/howto/how-do-i-add-chromedriver-to-path][Adding Chromedriver to PATH]]
  https://docs.python.org/3/library/unittest.html
  https://realpython.com/python-testing/
  [https://testsigma.com/blog/python-selenium-example/]
  https://stackoverflow.com/questions/50821312/what-is-the-effect-of-using-python-m-pip-instead-of-just-pip
  https://www.browserstack.com/guide/python-selenium-to-run-web-automation-test
  https://www.techbeamers.com/selenium-python-test-suite-unittest/
- State "DONE"       from "ACTIVE"     [2023-11-16 Thu 09:23]
- Note taken on [2023-10-24 Tue 09:35] \\
  A unit test is a smaller test, that checks
  that a single component operates in the right way.

  An integration test checks that components in your
  application operate with each other.

  A unit test checks a small component in your application.

  The three most popular test runners are:

  unittest
  nose or nose2
  pytest

  unittest requires that:

  You put your tests into classes as methods
  You use a series of special assertion methods
  in the unittest.TestCase class instead of the
  built-in assert statement
:LOGBOOK:
CLOCK: [2024-03-08 Fri 08:15]--[2024-03-08 Fri 10:35] =>  2:20
CLOCK: [2024-03-07 Thu 08:21]--[2024-03-07 Thu 09:39] =>  1:18
CLOCK: [2024-03-06 Wed 08:25]--[2024-03-06 Wed 09:07] =>  0:42
CLOCK: [2024-03-05 Tue 08:16]--[2024-03-05 Tue 09:42] =>  1:26
CLOCK: [2024-03-04 Mon 10:09]--[2024-03-04 Mon 11:53] =>  1:44
CLOCK: [2024-03-01 Fri 08:59]--[2024-03-01 Fri 10:32] =>  1:33
CLOCK: [2024-02-29 Thu 09:20]--[2024-02-29 Thu 10:46] =>  1:26
CLOCK: [2024-02-28 Wed 09:03]--[2024-02-28 Wed 09:48] =>  0:45
CLOCK: [2024-02-27 Tue 09:07]--[2024-02-27 Tue 09:27] =>  0:20
CLOCK: [2024-02-21 Wed 09:19]--[2024-02-21 Wed 09:38] =>  0:19
CLOCK: [2023-11-16 Thu 08:30]--[2023-11-16 Thu 09:23] =>  0:53
CLOCK: [2023-10-25 Wed 09:13]--[2023-10-25 Wed 10:35] =>  1:22
CLOCK: [2023-10-24 Tue 09:35]--[2023-10-24 Tue 09:50] =>  0:15
:END:
[[https://realpython.com/python-testing/]]]]
#+begin_example
def test_sum():
   assert sum([1, 2, 3]) == 6, "Should be 6"

def test_sum_tuple():
   assert sum((1, 2, 2)) == 6, "Should be 6"

if __name__ == "__main__":
    test_sum()
    test_sum_tuple()
    print("Everything passed")
#+end_example
To convert the example to a unittest test case:

Import unittest from the standard library
Create a class called TestSum that inherits from the
TestCase class;
Convert the test functions into methods by adding self
as the first argument;
Change the assertions to use the self.assertEqual() method on
the TestCase class;
Change the command-line entry point to call unittest.main()

#+begin_example
import unittest

class TestSum(unittest.TestCase):

    def test_sum(self):
        self.assertEqual(sum(([1, 2, 3])), 6, "Should be 6")

    def test_sum_tuple(self):
        self.assertEqual(sum((1, 2, 2)), 6, "Should be 6")

if __name__ == '__main__':
    unittest.main()

#+end_example

*** RAW Dictionaries
SCHEDULED: <2024-03-30 Sat>
:PROPERTIES:
:CATEGORY: Python
:END:
*** RAW Tuples and Sequences
SCHEDULED: <2024-03-30 Sat ++2w>
:PROPERTIES:
:CATEGORY: Python
:LAST_REPEAT: [2024-01-12 Fri 11:02]
:END:
- State "DONE"       from "Active"     [2024-01-12 Fri 11:02]
:LOGBOOK:
CLOCK: [2024-01-12 Fri 10:28]--[2024-01-12 Fri 11:01] =>  0:33
:END:
** Emacs
SCHEDULED: <2024-03-30 Sat>
:LOGBOOK:
CLOCK: [2024-01-30 Tue 15:00]--[2024-01-30 Tue 15:05] =>  0:05
:END:
Fix the unneccessary indentation above VVV

*** Interface

*** Keys

*** Embedded Help System
*** DELAY Emacs server
SCHEDULED: <2024-03-29 Fri ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-12-21 Thu 17:41]
:END:
- State "DONE"       from "Active"     [2023-12-21 Thu 17:41]
- State "DONE"       from "Active"     [2023-12-21 Thu 17:41]
- State "DONE"       from "Active"     [2023-11-29 Wed 18:17]
- State "DONE"       from "ACTIVE"     [2023-11-15 Wed 15:58]
- Note taken on [2023-10-10 Tue 15:27] \\
  * Launch the graphical version;
  * Start the server: =M-x server-start=
  * Launch the client version by =emacsclient -t=
*** Registers

*** Window Registers 
*** RAW [#B] Bookmarks+ usage
SCHEDULED: <2024-03-30 Sat ++2w>
:PROPERTIES:
:CATEGORY: Emacs
:LAST_REPEAT: [2024-01-29 Mon 15:54]
:END:
- State "DONE"       from "Active"     [2024-01-29 Mon 15:54]
- Note taken on [2024-01-10 Wed 10:17] \\
  [[https://www.emacswiki.org/emacs/BookmarkPlus#h5o-3]]
:LOGBOOK:
CLOCK: [2024-01-10 Wed 10:03]--[2024-01-10 Wed 10:17] =>  0:14
CLOCK: [2024-01-05 Fri 13:49]--[2024-01-05 Fri 15:23] =>  1:34
CLOCK: [2023-12-14 Thu 09:30]--[2023-12-14 Thu 10:08] =>  0:38
:END:
Bookmark all available places on ~localhost~ and in the ~WWW~

#DP requires preparation with definition goals and approaches

*** DELAY Help about *eww*
SCHEDULED: <2024-03-10 Sun>
:PROPERTIES:
:CATEGORY: Emacs
:END:
*** DELAY Emacs + venv
SCHEDULED: <2024-03-15 Fri ++3w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-29 Mon 16:01]
:END:
- State "AMPLE"      from "DELAY"      [2024-01-29 Mon 16:01]
- State "AMPLE"      from "DELAY"      [2024-01-29 Mon 16:00]
- State "DONE"       from "Active"     [2023-12-04 Mon 11:10]
*** DELAY Elpy concepts
SCHEDULED: <2024-03-10 Sun>
:PROPERTIES:
:LAST_REPEAT: [2023-11-23 Thu 15:54]
:CATEGORY: Elpy
:END:
- State "DONE"       from "Active"     [2023-11-23 Thu 15:54]
:LOGBOOK:
CLOCK: [2023-11-28 Tue 14:37]--[2023-11-28 Tue 15:11] =>  0:34
CLOCK: [2023-11-23 Thu 14:58]--[2023-11-23 Thu 15:53] =>  0:55
:END:
[[https://elpy.readthedocs.io/en/latest/concepts.html#:~:text=Concepts-,The%20RPC%20Process,going%20on%20in%20the%20background.]]
***** DELAY Elpy the RPC Process                                   
SCHEDULED: <2024-05-23 Thu ++2w>:
:PROPERTIES:
:LAST_REPEAT: [2024-01-04 Thu 15:07]
:END:
- Note taken on [2023-11-30 Thu 15:31] \\
  RPC processes are used to provide code completion, documentation and
  other features. To do so, they use python packages (jedi, yapf, …)
  that are installed in a dedicated virtualenv (
  . emacs. d/elpy/rpc-venv by default).

  Outside of RPC processes, though, it is not easy to have more than one
  virtual env active at the same time. Elpy allows you to set a single
  global virtual env and change it whenever you like, though.

  M-x elpy-config shows Elpy settings
:LOGBOOK:
CLOCK: [2023-11-30 Thu 14:50]--[2023-11-30 Thu 15:33] =>  0:43
:END:
**** RAW Emacs regular expressions
:PROPERTIES:
:CATEGORY: Emacs
:END:
:LOGBOOK:
CLOCK: [2023-12-19 Tue 10:56]--[2023-12-19 Tue 11:45] =>  0:49
:END:
***** RAW Regular expressions syntax
SCHEDULED: <2024-03-15 Fri>
:LOGBOOK:
CLOCK: [2024-02-09 Fri 10:59]--[2024-02-09 Fri 11:46] =>  0:47
:END:
[[info:emacs#Regexps][emacs#Regexps]]
**** DELAY Emacs Tramp mode
SCHEDULED: <2024-03-11 Mon>
:PROPERTIES:
:CATEGORY: Emacs
:END:
- Note taken on [2024-01-05 Fri 13:23] \\

  TRAMP (Transparent Remote Access, Multiple Protocols) is a package
  for editing remote files

  C-x C-f /remotehost:filename  RET

  (or /method:user@remotehost:filename)
  C-x C-f /ssh:root@example.com:~/

**** DELAY Search file by the name or content in file system
SCHEDULED: <2024-03-13 Wed>
:PROPERTIES:
:CATEGORY: Emacs
:END:
- Note taken on [2024-01-10 Wed 08:34] \\
  In Linux command line
  #+begin_example
  $ sudo find / -type f -name "*.mp4"
  $ sudo find / -type f -iname "*.mp4"
  #+end_example
  -type f : Only search for files.
  -type d : Only search for directories  or folders.
  -name "file" : File to search. It is a base of file name
  (the path with the leading directories removed) matches shell
  pattern
  -iname "file" : Same as -name except file names are not case
  sensitive.
 Emacs:
  =M-x find-name-dired=
  #+begin_example
  Find all files with suffix "org" in directory "~/org/".
  Enter the following:
  M-x find-name-dired
  ~/org
  *org
  #+end_example
 If you want to test the contents of
 files, rather than their names, use
  =M-x find-grep-dired=
  #+begin_example
  M-x find-grep-dired RET catch 
  #+end_example
  =‘A REGEXP <RET>’= Search all the specified files for the regular
  expression REGEXP (‘dired-do-find-regexp’).
  Dired supports wilcards in the directory part of the file name
  argument.
  #+begin_example
  C-x d ~/soft/*/*.c RET
  #+end_example
:LOGBOOK:
CLOCK: [2024-01-10 Wed 08:31]--[2024-01-10 Wed 10:03] =>  1:32
:END:

*** DELAY Help about *Dired mode*
SCHEDULED: <2024-03-10 Sun>
:PROPERTIES:
:CATEGORY: Emacs
:END:
*** DELAY Multi-frame workplace
SCHEDULED: <2024-03-10 Sun>
:PROPERTIES:
:CATEGORY: Emacs
:END:
- Note taken on [2024-01-30 Tue 12:01] \\
  [[info:emacs#Configuration Registers][emacs#Configuration Registers]]
- Note taken on [2024-01-30 Tue 10:34] \\
  A frame is a screen object that contains one or more Emacs windows.
  A window is an area of the screen that can be used to display a
  buffer.

  To create a new frame, call the function make-frame
  
  [[info:emacs#Creating Frames][emacs#Creating Frames]]
  [[info:emacs#Frame Commands][emacs#Frame Commands]]
  
  (key-chord-define-global "'\\" 'other-frame)
  (key-chord-define-global "]\\" 'other-frame)
  (key-chord-define-global "';" 'other-frame)
:LOGBOOK:
CLOCK: [2024-01-30 Tue 10:30]--[2024-01-30 Tue 10:57] =>  0:27
:END:

*** DELAY File searching in different Git branches 
SCHEDULED: <2024-03-30 Sat>
:LOGBOOK:
CLOCK: [2024-01-11 Thu 09:48]--[2024-01-11 Thu 10:19] =>  0:31
:END:
**** Alioth config (.emacs)
:PROPERTIES:
:CATEGORY: Emacs
:END:
*** AMPLE Customizing
SCHEDULED: <2024-03-26 Tue>
[[info:emacs#Keyboard Macros][emacs#Keyboard Macros]]
*** DELAY Emacs markers
SCHEDULED: <2024-03-10 Sun>
:PROPERTIES:
:CATEGORY: Emacs
:END:
- Note taken on [2024-02-02 Fri 10:33] \\
  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Markers.html]]
:LOGBOOK:
CLOCK: [2024-02-02 Fri 10:33]--[2024-02-02 Fri 10:35] =>  0:02
CLOCK: [2024-02-02 Fri 08:48]--[2024-02-02 Fri 08:48] =>  0:00
CLOCK: [2024-02-02 Fri 08:46]--[2024-02-02 Fri 08:46] =>  0:00
CLOCK: [2024-02-01 Thu 10:37]o
:END:
*** DP0 [#A] Python mode
SCHEDULED: <2024-03-11 Mon>
:PROPERTIES:
:CATEGORY: Emacs
:END:
- Note taken on [2024-02-09 Fri 10:15] \\
  [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs#h5o-2]]

Syntax highlighting, Indentation, Movement, Shell interaction, Shell
completion, Shell virtualenv support, Shell package support, Shell
syntax highlighting.

M-x python-mode

You can open an interactive Python shell with ‘run-python’ and send
code for execution by the shell process:
C-c C-p
C-c C-z Elpy
:LOGBOOK:
CLOCK: [2024-02-09 Fri 10:15]--[2024-02-09 Fri 10:46] =>  0:31
:END:
** Org-mode

***** DELAY [#B] Org-mode, org-babel markup rules
SCHEDULED: <2024-03-13 Wed ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-29 Mon 15:59]
:END:
- State "AMPLE"      from "DELAY"      [2024-01-29 Mon 15:59]
- State "DONE"       from "ACTIVE"     [2023-11-16 Thu 15:33]
- Note taken on [2023-11-14 Tue 15:13] \\
  [[info:org#Markup for Rich Contents][org#Markup for Rich Contents]]
  [[info:org#Emphasis and Monospace][org#Emphasis and Monospace]]

  [[https://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html]]]]
:LOGBOOK:
CLOCK: [2023-11-14 Tue 15:06]--[2023-11-14 Tue 15:48] =>  0:42
:END:

***** DELAY Org-Babel configuration.
SCHEDULED: <2024-03-30 Sat ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-11-22 Wed 08:46]
:END:
- State "DONE"       from "Active"     [2023-11-22 Wed 08:46]
- State "DONE"       from "ACTIVE"     [2023-11-08 Wed 09:29]
- Note taken on [2023-10-27 Fri 08:25] \\
  I had problems with running Python3 code using org-babel.
  At first when I run my code I saw the error:
  "Program Python is not found."

  I fixed this error when I installed the package "python-is-python3"
  on my Debian:

  #+begin_src shell :results output
    apt-get install python-is-python3
  #+end_src

  Is a package which makes Python 3 become the default version in
  Ubuntu/Debian instead of Python 2.

  The second problem was that my output was always "None" when I run
  my code.  My source code block looked:

  #+begin_src python
  print("hello")
  #+end_src

  #+RESULTS:
  : None

  I fixed it when added ==:results output==

  #+begin_src python :results output
  print("hello")
  #+end_src
  #+RESULTS:
  : hello
:LOGBOOK:
CLOCK: [2023-10-26 Thu 07:54]--[2023-10-26 Thu 08:52] =>  0:58
:END:
[[https://www.youtube.com/watch?v=kkqVTDbfYp4][org-babel configuration]]
[[https://orgmode.org/manual/Structure-Templates.html][org templates structure]]

***** DELAY Org-drill concept
SCHEDULED: <2024-03-29 Fri ++2w>
:PROPERTIES:
:CATEGORY: Drill
:END:
:LOGBOOK:
CLOCK: [2023-12-03 Sun 12:32]--[2023-12-03 Sun 13:04] =>  0:32
CLOCK: [2023-11-30 Thu 15:36]--[2023-12-01 Fri 07:55] => 16:19
CLOCK: [2023-11-28 Tue 17:27]--[2023-11-28 Tue 18:27] =>  1:00
CLOCK: [2023-11-28 Tue 08:00]--[2023-11-28 Tue 08:58] =>  0:58
:END:
https://orgmode.org/worg/org-contrib/org-drill.html
https://orgmode.org/worg/org-contrib/org-drill.html#org51fd4f9

***** DELAY [#A] Org-capture templates usage
SCHEDULED: <2024-03-10 Sun ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-25 Thu 11:48]
:CATEGORY: Emacs
:END:
- Note taken on [2024-02-02 Fri 10:29] \\
  Template elements

  ‘(file "path/to/file")’ Text will be placed at the beginning or end of
  that file.

  ‘entry’ An Org mode node, with a headline. Will be filed as the child
  of the target entry or as a top-level entry.The target file should be
  an Org file.

  ‘plain’
  Text to be inserted as it is.

  ‘%c’ Current kill ring head.

  ‘%x’ Content of the X clipboard.

   ‘%?’  After completing the template, position point here.

  #+begin_example
  	;;
	("n" "Notes" entry (file+headline
        "~/git/ballyboe/org-blog/2024-01-25-Task-management.org"
         "Preface"))
  #+end_example
- State "AMPLE"      from "DELAY"      [2024-01-25 Thu 11:48]
- State "AMPLE"      from "DELAY"      [2024-01-25 Thu 11:48]
- State "DONE"       from "Active"     [2023-12-13 Wed 17:47]
- State "DONE"       from "Active"     [2023-12-04 Mon 11:20]
:LOGBOOK:
CLOCK: [2024-02-06 Tue 10:08]--[2024-02-06 Tue 11:11] =>  1:03
CLOCK: [2024-02-02 Fri 08:55]--[2024-02-02 Fri 09:59] =>  1:04
CLOCK: [2024-01-25 Thu 14:40]--[2024-01-25 Thu 15:02] =>  0:22
CLOCK: [2024-01-25 Thu 11:49]--[2024-01-25 Thu 11:51] =>  0:02
CLOCK: [2023-12-08 Fri 10:26]--[2023-12-09 Sat 10:19] => 23:53
CLOCK: [2023-12-03 Sun 13:04]--[2023-12-03 Sun 13:32] =>  0:28
:END:
[[info:org#Capture templates][org#Capture templates]]

***** Jekyll

******* Org-Jekyll - article about initial config
SCHEDULED: <2024-03-11 Mon ++1m>
:PROPERTIES:
:LAST_REPEAT: [2023-11-13 Mon 14:41]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-13 Mon 14:41]
- State "DONE"       from "ACTIVE"     [2023-11-13 Mon 14:41]
  [[file:~/git/ballyboe/org-blog/2023-10-09-init.org::*Overview][Blogging with Org-mode and Jekyll]]
  [[https://orgmode.org/worg/org-tutorials/org-jekyll.html]]
  [[info:org#Publishing][org#Publishing]]
  https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
  
- Note taken on [2023-10-12 Thu 15:01] \\
  Reverse approach: use the working sample with minimum modifications
  (personal data).
- Note taken on [2023-10-11 Wed 17:05] \\
  * Prerequisites
  I have two repositories:
  - The first -  working properly
  - The second - new, not working.
  - Core samples with brief description how it shold work

    The task: *Modificate the content of not working repo and force it
    work properly as the first one*

    The average workflow:
    1. Core samples reading till full clarification the idea behind
       these words;

    2. Find differences among these two repos. It's not difficult by
       /diff/ utility in Bash or the same in Emacs;

    3. To ponder aroun what is should be changed, why and how?

    4. Elaborate a clear hypothesis how to make changes to achieve the
       result.
- Note taken on [2023-10-11 Wed 15:47] \\
  Compare two folders: the working one sample in 0--key.github.io ||
  annelida.github.io

  Manually
  Via diff utility
  Modification date
  ~/git/annelida.github.io/_posts/core-samples/2011-12-29-jekyll-introduction.md
 ]]
:LOGBOOK:
CLOCK: [2024-02-26 Mon 06:49]--[2024-02-26 Mon 07:39] =>  0:50
CLOCK: [2024-02-23 Fri 09:10]--[2024-02-23 Fri 09:30] =>  0:20
CLOCK: [2023-10-21 Sat 07:28]--[2023-10-21 Sat 09:25] =>  1:57
CLOCK: [2023-10-18 Wed 09:04]--[2023-10-18 Wed 10:26] =>  1:22
CLOCK: [2023-10-17 Tue 09:18]--[2023-10-17 Tue 10:13] =>  0:55
CLOCK: [2023-10-11 Wed 15:47]--[2023-10-11 Wed 16:07] =>  0:20
:END:
1. I compared the list of folders and files for two repositories:
0--key.github.io with annelida.github.io

Only annelida.github.io has:
_site
Gemfile.lock
index.md

Only 0--key.github.io has files:
screenshot.png
old_index.md

Using M-x diff compared:
index.md (from annelida.github.io)
old_index.md (from 0--key.github.io)

Result:
diff -u /home/vikky/git/annelida.github.io/index.md /home/vikky/git/0--key.github.io/old_index.md                                                                                                                                          1. I compared the content of two repositories: 
0--key.github.io with annelida.github.io

Only annelida.github.io has:
_site
Gemfile.lock
[[https://jekyllrb.com/docs/step-by-step/10-deployment/][What is Gemfile.lock]]
[[https://www.jekyll.com.cn/tutorials/using-jekyll-with-bundler/#:~:text=Bundler%20provides%20a%20consistent%20environment,tool%20to%20use%20with%20Jekyll.][What is Bundler]]
[[https://stackoverflow.com/questions/51157446/whats-the-difference-between-bundle-exec-jekyll-serve-and-jekyll-serve][Why you need use bundler]]
index.md

Only 0--key.github.io has files:
screenshot.png
old_index.md

Using M-x diff compared:
index.md (from annelida.github.io)
old_index.md (from 0--key.github.io)

Result:
diff -u /home/vikky/git/annelida.github.io/index.md /home/vikky/git/0--key.github.io/old_index.md
Diff finished (no differences).  Tue Oct 17 09:01:54 2023
Diff finished (no differences).  Tue Oct 17 09:01:54 2023

2. I compared the root folders from two repositories
0--key.github.io and annelida.github.io file by file.

Differences are in files:

_config.yml

The line are different:
title:
tagline:
author:
name:
email:
github:
production_url:
short_name:
tracking_id:

Gemfile

Only in annelida.github.io/Gemfile:
gem "kramdown-parser-gfm"
gem "minima"

Only in annelida.github.io there is a file:
Gemfile.lock

3. Comparing two repositories folder by folder:
Differences only in content of /_includes/themes folder and /assets/themes folder.
Differences in each file in _/layouts folder 

diff 0--key.github.io/_includes/themes/ annelida.github.io/_includes/themes/
Common subdirectories: 0--key.github.io/_includes/themes/bootstrap-3 and annelida.github.io/_includes/themes/bootstrap-3
Common subdirectories: 0--key.github.io/_includes/themes/twitter and annelida.github.io/_includes/themes/twitter
Only in 0--key.github.io/_includes/themes/: hooligan

diff 0--key.github.io/assets/themes/ annelida.github.io/assets/themes/
Common subdirectories: 0--key.github.io/assets/themes/bootstrap and annelida.github.io/assets/themes/bootstrap
Common subdirectories: 0--key.github.io/assets/themes/css and annelida.github.io/assets/themes/css
Common subdirectories: 0--key.github.io/assets/themes/twitter and annelida.github.io/assets/themes/twitter
Only in 0--key.github.io/assets/themes/: hooligan

4. Comparing /_layouts folders file by file:

Folder /layouts for both repositories contains the same files:
default.html
page.html
post.html
 
The difference is one and common for this files:

 ---
 theme :
-  name : bootstrap-3   (annelida.github.io)
+  name : hooligan      (0--key.github.io)
 ---
At first I wanted to change the look of my blog.To understand the concept
of how Jekyll works I compared my new repository annelida.github.io that
had theme bootstrap-3 by default and another properly working
repository 0--key.github.io.

The second repository has configurations for the theme "hooligan".
I compared these two repositories folder by folder and file by file.
Using [[https://jekyllrb.com/docs/][Jekyll's official documentation]] I understood that if you place images,
css, js in folder /assets they will be used across your site.

The 'include' tag allows you to include the content from another file stored
in the _includes folder. In my case I need to include content of files:
default.html
page.html
post.html
to the corresponding files from /_layouts folder.
Result you can see on [[https://annelida.github.io/]]


******* DELAY Explorations in details page's structure in Jekyll.
SCHEDULED: <2024-03-19 Tue>
:PROPERTIES:
:LAST_REPEAT: [2023-11-20 Mon 16:18]
:END:
- State "DONE"       from "Active"     [2023-11-20 Mon 16:18]
- Note taken on [2023-10-22 Sun 08:21] \\
  * How it is possible to organize several pages.
  * Page's front matter structure:
  title
  permalink
  categories
  tags
:LOGBOOK:
CLOCK: [2023-10-22 Sun 08:21]--[2023-10-22 Sun 08:34] =>  0:13
:END:

******* What is Jekyll's Gemfile.lock (full clarification).
SCHEDULED: <2024-07-18 Thu ++4w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-04 Thu 12:49]
:END:
- State "DONE"       from "Active"     [2023-11-27 Mon 10:07]
- Note taken on [2023-10-20 Fri 08:33] \\
  The Gemfile.lock file is where Bundler records the exact
  versions that were installed. This way, when the same library/project
  is loaded on another machine, running bundle install will look at the
  Gemfile.lock and install the exact same versions, rather than just using
  the Gemfile and installing the most recent version.
***** Linux

******* RAW Comparing files and folders in Linux/Emacs
- Note taken on [2023-10-15 Sun 08:13] \\

  In Emacs:

  The command M-x diff prompts for two file names, using the minibuffer,
  and displays the differences between the two files in a buffer
  named *diff*.
  [[info:emacs#Comparing Files][emacs#Comparing Files]]

  A (much more sophisticated) alternative is M-x ediff
  [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]]

  In Linux terminal:

  To find diff use this command:

  diff -qr dir1/ dir2/
  -r will diff all subdirectories too
  -q tells diff to report only when files differ.

  diff  --brief dir1/ dir2/
  --brief will show the files that dosent exist
  in directory.

  Meld is also a great tool for comparing two directories:

  meld dir1/ dir2/
  Meld has many options for comparing files or directories.
  If two files differ, it's easy to enter file comparison mode
  and see the exact differences.

  Create two files with some difference and compare them using
  each possible approach.
  Put the files in folders with the same name and compare again.
  
:LOGBOOK:
CLOCK: [2023-10-17 Tue 08:04]--[2023-10-17 Tue 09:17] =>  1:13
CLOCK: [2023-10-16 Mon 08:00]--[2023-10-16 Mon 09:57] =>  1:57
CLOCK: [2023-10-15 Sun 08:13]--[2023-10-15 Sun 09:23] =>  1:10
:END:

To compare two files and two folders with files I spent several
simple tests.

For the test I used Emacs's diff and ediff functions.
Also I used the diff command in the Linux terminal.

Test 1.
I created a folder /test and put inside two absolutely similar files:
file1.txt and file2.txt.
The files have the same content.
When I run M-x diff function and put the file's name.

Result:
Diff finished (no differences).  Mon Oct 16 12:18:47 2023

The ediff function result was the same.
But results were shown in different ways.

In the Linux terminal I run the command:
$diff -u file1.txt file2.txt
-u output NUM (default 3) lines of unified context

Command executed, but no results didn't shown in this case.

Test 2.
I added three lines with changes to file2.txt and ran
M-x diff again.
The changes were shown in a separate  buffer (it's name diff)
with highlights. 

Emac's ediff function works the same way. But I prefer diff function
result presentations.

In Linux terminal I run again:
$ diff -u file1.txt file2.txt
As result lines with changes were shown.

Anna Kalynchuk Reviewer: Michael Nystromfocus on you            Anna Kalynchuk Reviewer: Michael Nystromfocus on you
people come and go                                              people come and go
                                                              | Canges1
If you don't control your mind                                  If you don't control your mind
someone else will.                                              someone else will.
                                                              | Changes2
Sometimes the things that break your                            Sometimes the things that break your
heart end up fixing your vision.                                heart end up fixing your vision.
                                                              | Chenges3
Test 3
I created folder /dir1 and /dir2 inside my folder /tests and put where
two of the same files with same name (file1.txt).

When run M-x diff.

Results: Diff finished (no differences).  Mon Oct 16 12:54:43 2023

When I put file2.txt  into folder dir2 and run M-x diff in my Emacs:

Result:
diff -u /home/vikky/tests/dir2 /home/vikky/tests/dir1
Only in /home/vikky/tests/dir2: file2.txt
Diff finished.  Mon Oct 16 13:07:00 2023

In the Linux terminal:
vikky@penguin:~/tests$ diff -u dir1 dir2
Only in dir2: file2.txt

Test 4
I edited file1.txt in dir2 and ran M-x diff in Emacs
(I wrote the path to each file):

Result:
I saw only the differences between the two files. Differences
between two folders are not shown.

In the Linux terminal i used the command:
vikky@penguin:~/tests$ diff -a -y dir1 dir2
-a treat all lines as text;
-y output in two columns;
As a result I saw  not only the difference between two files, but the
difference between the two folders also:
Only in dir2: file2.txt

Test 4
I edited file1.txt in dir2 and ran M-x diff in Emacs (I wrote the path
to each file):

Result:
I saw only the differences between the two files. Differences between
the two folders are not shown.

In the Linux terminal i used the command:
vikky@penguin:~/tests$ diff -a -y dir1 dir2
-a treat all lines as text;
-y output in two columns;

As a result I saw  not only the difference between the two files, but the difference between the two folders also:
Only in dir2: file2.txt
 
Conclusions for 17/10/2023:
In Emacs using M-x diff function it not necessary to separately compare folders and whe files.
You can see full result in diff buffer.
In the Linux terminal it is possible at the same time to compare folder with files:
$ diff -a -y dir1 dir2

******* DELAY Linux symbolic links
SCHEDULED: <2024-03-13 Wed>
- Note taken on [2023-10-10 Tue 19:27] \\
  M-x man <enter> ln
- Note taken on [2023-10-10 Tue 15:30]
  * It allows to move the original file in safe place.
  * On the place original file it possible to leave the shortcut with
  * link to original file. For create soft link use command ln -s
***** Git/Magit

******* DELAY Git/Magit merge and rebase concept.
SCHEDULED: <2024-04-10 Wed>
:PROPERTIES:
:LAST_REPEAT: [2023-11-16 Thu 15:34]
:CATEGORY: Git
:END:

- State "DONE"       from "ACTIVE"     [2023-11-16 Thu 15:34]
- State "DONE"       from "ACTIVE"     [2023-11-16 Thu 15:34]

  - Note taken on [2023-10-23 Mon 09:48] \\

  A branch is an independent development line containing a pointer
   — or the branch head — to the most recent commit in the code.
  A single Git repository can track many branches, but your working
  tree centers on just one. The head points to the tip (the latest commit)
  of a branch.
  In Git, a branch is a new/separate version of the main repository.

  Let's say you have a large project, and you need to update
  the design on it.

  With a new branch called NEW-DISIGN, edit the code directly without
  impacting the main branch.

  Let’s say that at the same time an error was discovered in the
  project that requires be urgent fixed.

  Create a new branch from the main project called ERROR-FIX.
  Fix the error and merge the ERROR-FIX branch with
  the main branch.

  When go back to the NEW_DESIGN branch, and finish the work there.
  Merge the NEW-DISIGN branch with main.

  $ git checkout -  command used to check out a branch
  $ git checkout -b - will create a new branch, and move to it.

Magit:
b n (magit-branch-create)

- Note taken on [2023-10-23 Mon 10:40] \\
  You can describe of the HEAD as the "current branch".
  When you switch branches

  $ git checkout

  the HEAD revision changes to point to the tip of the new branch.

  You can see what HEAD points to by doing:

  $ cat .git/HEAD

  ref: refs/heads/main

:LOGBOOK:
CLOCK: [2023-10-23 Mon 08:47]--[2023-10-23 Mon 11:08] =>  2:21
:END:

- Note taken on [2023-10-25 Wed 10:50] \\
  Git tags description

  Tags are used as markers for significant points in the project timeline,
  whereas branches are separate lines of development that will eventually
  be merged back into the main application code.
  A tag is an object referencing a specific commit within the project history,
  similar to chapter markers in a book.
  This allows you to switch to the tagged version of the codebase to see what
  the code looked like when the tag was created and, if necessary,
  revert to that specific codebase version.

  $ git tag
  command allows to create, list, delete, and verify tags.

  Deleting a tag does not affect the code in your repository -
  it just removes the tag label.
:LOGBOOK:
CLOCK: [2023-10-25 Wed 10:36]--[2023-10-25 Wed 11:16] =>  0:40
:END:
- Note taken on [2023-10-24 Tue 10:38] \\
  Both of these commands are designed to integrate changes
  from one branch into another branch. They just do it in very
  different ways.

  Merging is nice because it’s a non-destructive operation.
  The existing branches are not changed in any way. This avoids
  all of the potential pitfalls of rebasing.

  The major benefit of rebasing is that you get a much cleaner
  project history.

  The golden rule of git rebase is to never use it on public branches.
  (ie. never rebase master). You should never rebase master onto
  a feature branch.

******* Init Git/Magit undo options.
SCHEDULED: <2024-04-05 Fri ++2w>
:PROPERTIES:
:CATEGORY: Git
:LAST_REPEAT: [2024-01-04 Thu 12:46]
:END:
- State "DONE"       from "Active"     [2024-01-04 Thu 12:46]
- Note taken on [2024-01-04 Thu 12:12] \\
  If you just want to undo commit then:
  #+begin_example
  $ git revert <commit id>
  #+end_example
  This will create a commit opposite to the commit id you provided.

  If you want the branch to appear like the commit never took place
  you can reset head of current branch to previous commit with
  #+begin_example
  $ git reset --hard HEAD^ 
  #+end_example

  And then send it to Github with
  #+begin_example
  $ git push --force 
  #+end_example

  ~git reset --soft~ this option moves HEAD back to the specified
  commit, undoes all the changes made between where HEAD was pointing
  and the specified commit, and saves all the changes in the index. In
  other words, Git re-adds the changes as staged, ready to be committed
  again.

  ~git reset --mixed~ will undo all the changes between HEAD and the
  specified commit, but will preserve your changes in the Working
  Directory, as unstaged changes.

  ~git reset --hard~ it will automatically discard all the changes made
   between HEAD and the specified commit.
:LOGBOOK:
CLOCK: [2024-01-04 Thu 12:11]--[2024-01-04 Thu 12:13] =>  0:02
:END:
- Note taken on [2023-10-23 Mon 08:47] \\
  If you want to redo that commit, make the additional
  changes you forgot, stage them, and commit again using
  the --amend option

  Git:
  $ git commit --amend
  Magit:
  c a C-c C-c

  Unstaging a Staged File
  Git:
  use "git reset HEAD <file>..." to unstage
  use "git restore --staged <file>..." to unstage
  Magit:
  u (magit-unstage-file)

  Unmodifying a Modified File
  Git:
  use "git checkout -- <file>..." to discard changes in
  working directory
  use "git restore <file>..." to discard changes in
  working directory
  Magit:
  k (magit-discard)

  [[https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things][Git undoing things]]


- Note taken on [2023-10-23 Mon 08:09] \\
  branch
  head
  rebase
  tag
  version
* Work
** Interview Preparation
** Portfolio creation
** CV elaboration
** New profession detail elaboration
SCHEDULED: <2024-03-13 Wed>
* Leasure

* Books
*** Learning Python
:PROPERTIES:
:CATEGORY: Learning Python
:END:

**** DELAY A Python Q&A Session
SCHEDULED: <2024-04-09 Tue ++2w>
:PROPERTIES:
:LAST_REPEAT: [2024-01-25 Thu 11:34]
:END:
- State "AMPLE"      from "RAW"        [2024-01-25 Thu 11:34]
- State "AMPLE"      from "RAW"        [2024-01-25 Thu 11:34]
- State "DONE"       from "Active"     [2024-01-25 Thu 11:34]
- State "DONE"       from "Active"     [2023-11-27 Mon 17:35]
- State "DONE"       from "Active"     [2023-11-27 Mon 17:35]
- State "DONE"       from "ACTIVE"     [2023-11-13 Mon 13:24]
- Note taken on [2023-11-10 Fri 07:51] \\
  It is deliberately optimized for speed of development—its
  simple syntax, dynamic typing, lack of compile steps,
  and built-in toolset allow pro-grammers to develop programs in a fraction
  of the time needed when using some other
  tools.

  The net effect is that Python typically boosts developer productivity many times beyond the levels supported by traditional languages.


  Python’s built-in interfaces to operating-system services make it ideal for writing port-able, maintainable system-administration tools and utilities
  (sometimes called shell tools).
  Python programs can search files and directory trees,
  launch other programs, do parallel processing with processes and
  threads, and so on.

  Internet Scripting
  Python comes with standard Internet modules that allow Python programs
  to perform a wide variety of networking tasks, in client and server modes.
  Scripts can communicate over sockets; extract form information sent to
  server-side CGI scripts; transfer files by FTP; parse, generate, and analyzeXML files; send, receive, compose, and parse email;
  fetch web pages by URLs; parse the HTML and XML of fetched web pages; commu-
  nicate over XML-RPC, SO.

  Database Programming

  For traditional database demands, there are Python interfaces to all
  commonly used  ODBC, MySQL, PostgreSQL, SQLite, and more.



  “script” -  a simpler top-level file.
  “program” to refer to a more sophisticated multifile application.
:LOGBOOK:
CLOCK: [2023-11-13 Mon 12:10]--[2023-11-13 Mon 12:21] =>  0:11
CLOCK: [2023-11-10 Fri 07:49]--[2023-11-10 Fri 09:32] =>  1:43
:END:

 
**** Todo How Python Runs Programs
:PROPERTIES:
:LAST_REPEAT: [2023-11-13 Mon 13:24]
:END:
- State "DONE"       from "ACTIVE"     [2023-11-13 Mon 13:24]
- Note taken on [2023-11-13 Mon 12:21] \\
  An interpreter is
  a kind of program that executes other programs.
  When you run your script it’s first compiled to
  something called “byte code” and then routed to something called a “virtual machine.
  if you’re ever in doubt about how a piece of Python code works, fire up the
  interactive command line and try it out to see what happens.
  You can import your module files interactively and run tests 
 on the tools they define by typing calls at the interactive prompt.

:LOGBOOK:
CLOCK: [2023-11-13 Mon 12:21]--[2023-11-13 Mon 13:06] =>  0:45
:END:

#+begin_src python :results output
  import os
  print(os.getcwd())
#+end_src

#+RESULTS:
: /home/vikky/git/ballyboe/bookworm/agenda

***** DP1 Python Import variations
:PROPERTIES:
:LAST_REPEAT: [2023-11-28 Tue 10:38]
:END:
- State "DONE"       from "Active"     [2023-11-28 Tue 10:38]
:LOGBOOK:
CLOCK: [2023-11-28 Tue 08:59]--[2023-11-28 Tue 09:23] =>  0:24
:END:

***** DELAY Python run the file with executable privileges.
SCHEDULED: <2024-05-13 Mon ++1w>
:PROPERTIES:
:LAST_REPEAT: [2023-12-12 Tue 14:31]
:CATEGORY: Python
:END:
- State "DONE"       from "Active"     [2023-12-12 Tue 14:31]
- State "DONE"       from "Active"     [2023-12-01 Fri 10:39]
:LOGBOOK:
CLOCK: [2023-12-01 Fri 10:08]--[2023-12-01 Fri 10:39] =>  0:31
:END:

**** DP1 How do you run program.
:PROPERTIES:
:LAST_REPEAT: [2023-11-23 Thu 10:43]
:END:
- State "DONE"       from "Active"     [2023-11-23 Thu 10:43]
- State "DONE"       from "Active"     [2023-11-20 Mon 08:06]
- Note taken on [2023-11-15 Wed 09:37] \\
  If you really want to force Python to run the file again
  in the same session without stopping and restarting
  the session, you need to instead call the reload
          function available in the importlib standard library module.
- Note taken on [2023-11-14 Tue 10:15] \\
  You can route the output of a Python script to a file
  to save it for later use:

  #+begin_src sh :results output
  python script1.py > saveit.txt
  #+end_src

  #+RESULTS:

:LOGBOOK:
CLOCK: [2023-11-23 Thu 09:47]--[2023-11-23 Thu 10:43] =>  0:56
CLOCK: [2023-11-16 Thu 10:45]--[2023-11-16 Thu 11:19] =>  0:34
CLOCK: [2023-11-15 Wed 09:25]--[2023-11-15 Wed 10:47] =>  1:22
CLOCK: [2023-11-14 Tue 09:26]--[2023-11-14 Tue 10:52] =>  1:26
:END:
This is known as 'stream redirection'.

**** Init Python object types
***** Init Python strings methods
****** RAW Python string type-specific methods
:PROPERTIES:
:LAST_REPEAT: [2023-12-11 Mon 18:27]
:CATEGORY: Reading
:END:
- State "DONE"       from "Active"     [2023-12-11 Mon 18:27]
- State "DONE"       from "Active"     [2023-12-04 Mon 11:23]
- State "DONE"       from "Active"     [2023-11-28 Tue 11:14]
:LOGBOOK: 
CLOCK: [2023-11-28 Tue 10:40]--[2023-11-28 Tue 11:14] =>  0:34
CLOCK: [2023-11-24 Fri 14:29]--[2023-11-24 Fri 14:52] =>  0:23
:END:
******* DELAY Python how to code strings
SCHEDULED: <2024-03-13 Wed ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-12-13 Wed 11:24]
:END:
- State "DONE"       from "Active"     [2023-12-13 Wed 11:24]
******* RAW Pattern Matching  
:LOGBOOK:
CLOCK: [2023-12-14 Thu 10:09]--[2023-12-14 Thu 10:34] =>  0:25
:END:
***** RAW Python Lists
SCHEDULED: <2024-03-11 Mon ++2w>
:PROPERTIES:
:CATEGORY: Python
:LAST_REPEAT: [2024-01-09 Tue 15:43]
:END:
- State "DONE"       from "Active"     [2024-01-09 Tue 15:43]
- Note taken on [2023-12-22 Fri 14:51] \\
  A Python List is a built-in, ordered, mutable collection of elements
  or items. Each item in a list can be of any data type, including
  numbers, strings, or other objects like tuples, dictionaries, or
  even other lists.
:LOGBOOK:
CLOCK: [2023-12-19 Tue 16:11]--[2023-12-19 Tue 17:52] =>  1:41
CLOCK: [2023-12-19 Tue 14:10]--[2023-12-19 Tue 14:10] =>  0:00
:END:

*** Computer science distillled
:PROPERTIES:
:CATEGORY: Computer science
:END:

**** RAW Basic
:PROPERTIES:
:CATEGORY: CS Basic
:END:

***** RAW Mathematical models
SCHEDULED: <2024-05-09 Thu ++2w>
:PROPERTIES:
:LAST_REPEAT: [2023-12-13 Wed 11:24]
:END:

- State "DONE"       from "Active"     [2023-12-13 Wed 11:24]
***** DELAY [#C] Logic
SCHEDULED: <2024-03-30 Sat>
:PROPERTIES:
:CATEGORY: CS
:END:
:LOGBOOK:
CLOCK: [2023-12-14 Thu 10:45]--[2023-12-14 Thu 11:09] =>  0:24
:END:

****** Init Operators
SCHEDULED: <2024-03-23 Sat>

- Note taken on [2023-12-14 Thu 10:58] \\
  Conditional operator:
  A = True implies B = True :
  A → B
  Negation operator:
  ! A
  ! B
  Contrapositive:
  ! B → ! A
  The Biconditional:
  A ↔ B

  These logical operators are the most famous, as they’re often
  explicitly coded. AND expresses all ideas are True ; OR expresses any
  idea is True ; XOR expresses ideas are of opposing truths.
****** Boolean algebra

****** Truth tables

****** Logic in computing

***** Counting

****** Multipying

**** RAW Complexity
**** RAW Strategy

*** "Talk Python to me" podcasts

**** Init Transcript 10 Tips and Tools for Developer Productivity
:PROPERTIES:
:LAST_REPEAT: [2023-11-23 Thu 15:54]
:END:
:LOGBOOK:
CLOCK: [2023-11-28 Tue 18:27]--[2023-11-28 Tue 18:33] =>  0:06
:END:
- State "DONE"       from "Active"     [2023-11-23 Thu 15:54]
* Events
* Notes
** Init What is CI/CD
SCHEDULED: <2024-03-09 Sat>
:LOGBOOK:
CLOCK: [2024-02-23 Fri 07:59]--[2024-02-23 Fri 08:37] =>  0:38
CLOCK: [2024-02-22 Thu 06:36]--[2024-02-22 Thu 07:21] =>  0:45
CLOCK: [2024-02-21 Wed 07:45]--[2024-02-21 Wed 08:48] =>  1:03
:END:
[[file:~/git/ballyboe/org-blog/2024-02-12-What-is-CI-CD.org::*What is CI/CD?][What is CI/CD?]]
[[https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions?learn=getting_started&learnProduct=actions]]
* Personal



