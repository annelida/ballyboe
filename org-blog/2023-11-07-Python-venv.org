#+BEGIN_EXPORT html
---
layout: post
title: Python virtual environment
tagline: " at glance"
permalink: /python/virtual_env.html
categories: [Python, Virtual_evironment, Literate programming]
tags: [tutorial, virtualenv, methodology]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Preamble

** Virtual Environment: Purpose and Intention

A *Python Virtual Environment* is an isolated space where you can work
on your Python projects, separately from your system-installed
Python. You can set up your own libraries and dependencies without
affecting the system Python.

The purpose of the Virtual environment is creation an isolated from
the main operating system set of libraries that allow reproduce itself
on other workstations and execute Python code in the same environment.

** PIP

The name pip is [an] acronym and declaration: /pip installs packages/.

PIP is a package-management system written in Python and is used to
install and manage software packages.

#+begin_src sh :result verbatim
  pip --version
#+end_src

#+RESULTS:
: pip 23.0.1 from /usr/lib/python3/dist-packages/pip (python 3.11)

Obviosly that the system wide packages for Python located in
in /usr/lib/python3/

But Python itself in another folder

#+begin_src sh :results verbatim
  which python3
#+end_src

#+RESULTS:
: /usr/bin/python3

Now we already has a list of pre-installed and ready to use Python
packages:
#+begin_src sh :results verbatim
  pip list
#+end_src

#+RESULTS:
#+begin_example
Package               Version
--------------------- --------------
appdirs               1.4.4
asttokens             2.2.1
attrs                 22.2.0
backcall              0.2.0
beautifulsoup4        4.11.2
beniget               0.4.1
blinker               1.5
Brlapi                0.8.4
Brotli                1.0.9
certifi               2022.9.24
chardet               5.1.0
charset-normalizer    3.0.1
contourpy             1.0.7
cryptography          38.0.4
cupshelpers           1.0
cycler                0.11.0
dbus-python           1.3.2
decorator             5.1.1
devscripts            2.23.4+deb12u1
distlib               0.3.6
distro                1.8.0
distro-info           1.5+deb12u1
docstring-to-markdown 0.11
executing             1.2.0
filelock              3.9.0
flake8                5.0.4
fonttools             4.38.0
fs                    2.4.16
gast                  0.5.2
gbp                   0.9.30
gpg                   1.18.0
html5lib              1.1
httplib2              0.20.4
idna                  3.3
ipython               8.5.0
jedi                  0.18.2
kiwisolver            0.0.0
lazr.restfulclient    0.14.5
lazr.uri              1.0.6
louis                 3.24.0
lxml                  4.9.2
lz4                   4.0.2+dfsg
Mako                  1.2.4.dev0
Markdown              3.4.1
MarkupSafe            2.1.2
matplotlib            3.6.3
matplotlib-inline     0.1.6
mccabe                0.7.0
mpmath                0.0.0
numpy                 1.24.2
oauthlib              3.2.2
olefile               0.46
packaging             23.0
parso                 0.8.3
pbr                   5.10.0
pexpect               4.8.0
pickleshare           0.7.5
Pillow                9.4.0
pip                   23.0.1
platformdirs          2.6.0
pluggy                1.0.0+repack
ply                   3.11
prompt-toolkit        3.0.36
ptyprocess            0.7.0
pure-eval             0.0.0
pycairo               1.20.1
pycodestyle           2.10.0
pycups                2.0.1
pyflakes              2.5.0
Pygments              2.14.0
PyGObject             3.42.2
PyJWT                 2.6.0
pyparsing             3.0.9
pysmbc                1.0.23
python-apt            2.6.0
python-dateutil       2.8.2
python-debian         0.1.49
python-lsp-jsonrpc    1.0.0
python-lsp-server     1.7.1
python-magic          0.4.26
pythran               0.11.0
pytz                  2022.7.1
pyxdg                 0.28
PyYAML                6.0
requests              2.28.1
scipy                 1.10.1
setuptools            66.1.1
six                   1.16.0
soupsieve             2.3.2
stack-data            0.6.2
stevedore             4.0.2
sympy                 1.11.1
traitlets             5.5.0
ufoLib2               0.14.0
ujson                 5.7.0
unidiff               0.7.3
urllib3               1.26.12
virtualenv            20.17.1+ds
virtualenv-clone      0.3.0
virtualenvwrapper     4.8.4
wadllib               1.3.6
wcwidth               0.2.5
webencodings          0.5.1
wheel                 0.38.4
xdg                   5
#+end_example

Without using VENV all packages that PIP installed are located in the
folder /usr/lib/python3/dist-packages/

#+begin_src sh :results verbatim
tree -L 1 /usr/lib/python3/dist-packages/
#+end_src

#+RESULTS:
#+begin_example
/usr/lib/python3/dist-packages/
├── appdirs-1.4.4.egg-info
├── appdirs.py
├── apt
├── apt_inst.cpython-311-x86_64-linux-gnu.so
├── apt_inst-stubs
├── apt_pkg.cpython-311-x86_64-linux-gnu.so
├── apt_pkg-stubs
├── aptsources
├── asttokens
├── asttokens-2.2.1.egg-info
├── attr
├── attrs
├── attrs-22.2.0.dist-info
├── backcall
├── backcall-0.2.0.dist-info
├── beautifulsoup4-4.11.2.egg-info
├── beniget
├── beniget-0.4.1.egg-info
├── blinker
├── blinker-1.5.dist-info
├── Brlapi-0.8.4.egg-info
├── brlapi.cpython-311-x86_64-linux-gnu.so
├── Brotli-1.0.9.egg-info
├── _brotli.cpython-311-x86_64-linux-gnu.so
├── brotli.py
├── bs4
├── cairo
├── certifi
├── certifi-2022.9.24.egg-info
├── _cffi_backend.cpython-311-x86_64-linux-gnu.so
├── chardet
├── chardet-5.1.0.dist-info
├── charset_normalizer
├── charset_normalizer-3.0.1.dist-info
├── clonevirtualenv.py
├── contourpy
├── contourpy-1.0.7.dist-info
├── cryptography
├── cryptography-38.0.4.dist-info
├── cryptography.egg-info
├── cups.cpython-311-x86_64-linux-gnu.so
├── cupshelpers
├── cupshelpers-1.0-py3.10.egg-info
├── cycler-0.11.0.egg-info
├── cycler.py
├── dateutil
├── dbus
├── _dbus_bindings.cpython-311-x86_64-linux-gnu.so
├── _dbus_glib_bindings.cpython-311-x86_64-linux-gnu.so
├── dbus_python-1.3.2.egg-info
├── deb822.py
├── debian
├── debian_bundle
├── decorator-5.1.1.egg-info
├── decorator.py
├── devscripts
├── devscripts-2.23.4+deb12u1.egg-info
├── distlib
├── distlib-0.3.6.egg-info
├── distro
├── distro-1.8.0.dist-info
├── distro_info-1.5+deb12u1.egg-info
├── distro_info.py
├── _distutils_hack
├── distutils-precedence.pth
├── docstring_to_markdown
├── docstring_to_markdown-0.11.egg-info
├── executing
├── executing-1.2.0.dist-info
├── filelock
├── filelock-3.9.0.dist-info
├── flake8
├── flake8-5.0.4.egg-info
├── fontTools
├── fonttools-4.38.0.egg-info
├── fs
├── fs-2.4.16.egg-info
├── gast
├── gast-0.5.2.egg-info
├── gbp
├── gbp-0.9.30.egg-info
├── gi
├── gnome_browser_connector
├── gnomemusic
├── gpg
├── gpg-1.18.0-py3.11.egg-info
├── gtweak
├── html5lib
├── html5lib-1.1.egg-info
├── httplib2
├── httplib2-0.20.4.dist-info
├── idna
├── idna-3.3.egg-info
├── IPython
├── ipython-8.5.0.dist-info
├── isympy.py
├── jedi
├── jedi-0.18.2.egg-info
├── jwt
├── kiwisolver
├── kiwisolver-0.0.0.dist-info
├── lazr
├── lazr.restfulclient-0.14.5.egg-info
├── lazr.uri-1.0.6.egg-info
├── libvoikko.py
├── louis
├── louis-3.24.0.egg-info
├── lxml
├── lxml-4.9.2.egg-info
├── lz4
├── lz4-4.0.2+dfsg.egg-info
├── magic
├── mako
├── Mako-1.2.4.dev0.egg-info
├── markdown
├── Markdown-3.4.1.egg-info
├── markupsafe
├── MarkupSafe-2.1.2.egg-info
├── matplotlib
├── matplotlib-3.6.3.egg-info
├── matplotlib-3.6.3-nspkg.pth
├── matplotlib_inline
├── matplotlib_inline-0.1.6.egg-info
├── mccabe-0.7.0.egg-info
├── mccabe.py
├── mpl_toolkits
├── mpmath
├── mpmath-0.0.0.egg-info
├── numpy
├── numpy-1.24.2.egg-info
├── oauthlib
├── oauthlib-3.2.2.egg-info
├── olefile
├── olefile-0.46.egg-info
├── omp
├── orca
├── packaging
├── packaging-23.0.dist-info
├── parso
├── parso-0.8.3.egg-info
├── pbr
├── pbr-5.10.0.egg-info
├── pexpect
├── pexpect-4.8.0.egg-info
├── pickleshare-0.7.5.egg-info
├── pickleshare.py
├── PIL
├── Pillow-9.4.0.egg-info
├── pip
├── pip-23.0.1.dist-info
├── pkg_resources
├── platformdirs
├── platformdirs-2.6.0.dist-info
├── pluggy
├── pluggy-1.0.0+repack.egg-info
├── ply
├── ply-3.11.egg-info
├── prompt_toolkit
├── prompt_toolkit-3.0.36.egg-info
├── ptyprocess
├── ptyprocess-0.7.0.dist-info
├── pure_eval
├── pure_eval-0.0.0.dist-info
├── pyatspi
├── __pycache__
├── pycairo-1.20.1.egg-info
├── pycodestyle-2.10.0.egg-info
├── pycodestyle.py
├── pycups-2.0.1.egg-info
├── pyflakes
├── pyflakes-2.5.0.egg-info
├── pygments
├── Pygments-2.14.0.egg-info
├── PyGObject-3.42.2.egg-info
├── pygtkcompat
├── PyJWT-2.6.0.egg-info
├── pylab.py
├── pylsp
├── pylsp_jsonrpc
├── pyparsing
├── pyparsing-3.0.9.dist-info
├── pysmbc-1.0.23.egg-info
├── python_apt-2.6.0.egg-info
├── python_dateutil-2.8.2.egg-info
├── python_debian-0.1.49.egg-info
├── python_lsp_jsonrpc-1.0.0.egg-info
├── python_lsp_server-1.7.1.dist-info
├── python_magic-0.4.26.egg-info
├── pythran
├── pythran-0.11.0.egg-info
├── pytz
├── pytz-2022.7.1.egg-info
├── pyxdg-0.28.dist-info
├── PyYAML-6.0.dist-info
├── requests
├── requests-2.28.1.egg-info
├── scipy
├── scipy-1.10.1.dist-info
├── setuptools
├── setuptools-66.1.1.egg-info
├── six-1.16.0.egg-info
├── six.py
├── smbc
├── _smbc.cpython-311-x86_64-linux-gnu.so
├── softwareproperties
├── soupsieve
├── soupsieve-2.3.2.dist-info
├── speechd
├── speechd_config
├── stack_data
├── stack_data-0.6.2.dist-info
├── stevedore
├── stevedore-4.0.2.egg-info
├── sympy
├── sympy-1.11.1.egg-info
├── traitlets
├── traitlets-5.5.0.dist-info
├── ufoLib2
├── ufoLib2-0.14.0.dist-info
├── ujson-5.7.0.egg-info
├── ujson.cpython-311-x86_64-linux-gnu.so
├── unidiff
├── unidiff-0.7.3.egg-info
├── unohelper.py
├── uno.py
├── urllib3
├── urllib3-1.26.12.egg-info
├── virtualenv
├── virtualenv-20.17.1+ds.dist-info
├── virtualenv_clone-0.3.0.egg-info
├── virtualenvwrapper
├── virtualenvwrapper-4.8.4.egg-info
├── virtualenvwrapper-4.8.4-nspkg.pth
├── wadllib
├── wadllib-1.3.6.egg-info
├── wcwidth
├── wcwidth-0.2.5.egg-info
├── webencodings
├── webencodings-0.5.1.egg-info
├── wheel
├── wheel-0.38.4.egg-info
├── xdg
├── xdg-5.egg-info
├── _yaml
└── yaml

209 directories, 37 files
#+end_example

** SYS.PATH != $PYTHONPATH

Check up pristine =sys.path=:

#+begin_src python :results output
  import sys
  print(sys.path)
#+end_src

#+RESULTS:
: ['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload', '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3.11/dist-packages']

** The main utility is

Yes, it's possible to do it via =python3 -m venv=, but:

#+begin_src sh
virtualenv --version
#+end_src

#+RESULTS:
: virtualenv 20.17.1+ds from /usr/lib/python3/dist-packages/virtualenv/__init__.py

It's already installed into the system.

* Create the first one =venv=:

For sake of convenience lets create the folder for all =user=
/virtualenvironments/:


#+begin_src sh :results verbatim
  mkdir ~/.local/venvs
  ls -la ~/.local/
#+end_src

#+RESULTS:
: total 20
: drwx------  5 vikky vikky 4096 Apr 19 13:20 .
: drwx------ 18 vikky vikky 4096 Apr 19 07:57 ..
: drwx------ 18 vikky vikky 4096 Apr 15 19:12 share
: drwx------  3 vikky vikky 4096 Dec  8 13:38 state
: drwxr-xr-x  2 vikky vikky 4096 Apr 19 13:20 venvs

Now it's time to create our first =venv= inside this folder using
Debian-native =virtualenv= :

#+begin_src sh :results verbatim
    virtualenv ~/.local/venvs/ViEnv0.1
    ls ~/.local/venvs
#+end_src

#+RESULTS:
: created virtual environment CPython3.11.2.final.0-64 in 205ms
:   creator CPython3Posix(dest=/home/vikky/.local/venvs/ViEnv0.1, clear=False, no_vcs_ignore=False, global=False)
:   seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/vikky/.local/share/virtualenv)
:     added seed packages: pip==23.0.1, setuptools==66.1.1, wheel==0.38.4
:   activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
: ViEnv0.1

* Activate =venv= Inside Emacs:

#+begin_src elisp
 (pyvenv-activate "~/.local/venvs/ViEnv0.1")
#+end_src

#+RESULTS:

* Check-up List of Packages:
#+begin_src sh :results verbatim
pip list
#+end_src

#+RESULTS:
: Package    Version
: ---------- -------
: pip        23.0.1
: setuptools 66.1.1
: wheel      0.38.4

* Check-up Theirs Folders:

#+begin_src sh :results verbatim
tree -L 1 ~/.local/venvs/ViEnv0.1/bin/
#+end_src

#+RESULTS:
#+begin_example
/home/vikky/.local/venvs/ViEnv0.1/bin/
├── activate
├── activate.csh
├── activate.fish
├── activate.nu
├── activate.ps1
├── activate_this.py
├── pip
├── pip3
├── pip-3.11
├── pip3.11
├── python -> /usr/bin/python3
├── python3 -> python
├── python3.11 -> python
├── wheel
├── wheel3
├── wheel-3.11
└── wheel3.11

1 directory, 17 files
#+end_example

* Deactivate =venv= Inside Emacs:

#+begin_src elisp
  (pyvenv-deactivate)
#+end_src

#+RESULTS:

* How will bee looks =sys.path= when =venv= activated

When =venv= is not activated =sys.path= have look:

#+begin_src python :results output
  import sys
  print(sys.path)
#+end_src

#+RESULTS:
: ['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload',
: '/usr/local/lib/python3.11/dist-packages', '/usr/lib/python3/dist-packages',
: '/usr/lib/python3.11/dist-packages']

When =venv= is activated:

#+begin_src python :results output
  import sys
  print(sys.path)
#+end_src

#+RESULTS:
: ['', '/usr/lib/python311.zip', '/usr/lib/python3.11', '/usr/lib/python3.11/lib-dynload',
: '/home/vikky/.local/venvs/ViEnv0.1/lib/python3.11/site-packages']

* Conclusion:

The benefits of using virtual environments in Python projects are
numerous and essential for efficient and organized development
processes. Some key advantages include:

- Dependency Isolation: Virtual environments ensure that packages
  installed for one project do not interfere with those installed for
  others, preventing version conflicts and ensuring the correct
  package versions are used;

- Reproducibility: Virtual environments specify exact package versions
  used in a project, making it easier for other developers to recreate
  the same environment and ensure consistent behavior;

- Project Portability: Virtual environments can be easily moved or
  copied to different machines, enabling developers to work on the
  same project in different environments without worrying about
  package installation or dependency issues;

  In summary, virtual environments in Python offer a structured and
  efficient way to manage dependencies, ensure reproducibility,
  simplify collaboration, and maintain a clean and stable development
  environment.

  The main widely using ways to install and use Python virtual
  environments are:

  - Using the =venv= module;
  - Using =virtualenv=.


* Notes                                                            :noexport:

** Creating a Python virtual environment on a Debian-based system

On Debian distributives you first need to ensure which the
Python standard venv library is available.

#+begin_src sh
  apt-cache search venv
#+end_src

To check which virtual environment already installed

#+begin_src sh
  pip list
#+end_src



You can install virtualenv library if it is not installed yet

#+begin_src sh
  sudo apt-get install virtualenv
#+end_src

To confirm what virtual environment already installed

#+begin_src sh
  virtualenv --version
#+end_src

To create a separete =MyEnv= virtual environment

#+begin_src sh
  virtualenv MyEnv
#+end_src


To activate this virtual environment in the current shell

#+begin_src sh
  cd ~/MyEnv/
  source bin/activate
  pip list
#+end_src

A virtual environment in Python is a separeted directory that contains
a certain version of the Python interpreter with its own set of
installed packages.

The virtual environment is used to isolate the project
from system-wide Python installation and from other projects.
It is allows to avoid conflicts between packages.

To install virtual environment Python module venv used.
Command 'python -m venv venv' will create a directory named 'venv'.

#+begin_src shell :results output
  pip list
#+end_src

#+RESULTS:
#+begin_example
Package           Version
----------------- --------
asttokens         2.4.0
async-generator   1.10
attrs             23.1.0
backcall          0.2.0
certifi           2023.5.7
decorator         5.1.1
exceptiongroup    1.1.1
executing         2.0.0
h11               0.14.0
idna              3.4
ipython           8.17.2
jedi              0.19.1
markdown-it-py    3.0.0
matplotlib-inline 0.1.6
mdurl             0.1.2
outcome           1.2.0
parso             0.8.3
pexpect           4.8.0
pickleshare       0.7.5
pip               23.3.1
prompt-toolkit    3.0.39
ptyprocess        0.7.0
pure-eval         0.2.2
Pygments          2.16.1
PySocks           1.7.1
rich              13.6.0
selenium          4.10.0
setuptools        52.0.0
six               1.16.0
sniffio           1.3.0
sortedcontainers  2.4.0
stack-data        0.6.3
traitlets         5.11.2
trio              0.22.0
trio-websocket    0.10.3
typing_extensions 4.8.0
urllib3           2.0.3
wcwidth           0.2.8
wheel             0.34.2
wsproto           1.2.0
#+end_example

  #+begin_src shell :results output
  python -m venv venv
#+end_src

To activate virtual environment, navigate to the created
'venv' and type:

#+begin_src shell :results output
  cd /home/vikky/venv/
  source bin/activate
#+end_src

When virtual environment activated sys.path is generate list of paths
from venv directory only.  To see it let's create a simple script
python_sys.py

#+begin_src python :results output
    import sys
    print(sys.path)
#+end_src

#+RESULTS:
: ['', '/usr/lib/python39.zip', '/usr/lib/python3.9', '/usr/lib/python3.9/lib-dynload', '/home/vikky/.local/lib/python3.9/site-packages', '/usr/local/lib/python3.9/dist-packages', '/usr/lib/python3/dist-packages']

when activate a virtual environment and run it.

#+begin_src shell :results output
  cd /home/vikky/venv/
  source bin/activate
  python python_sys.py
#+end_src

#+RESULTS:
  ['/home/vikky/venv', '/usr/lib/python39.zip', '/usr/lib/python3.9',
  '/usr/lib/python3.9/lib-dynload', '/home/vikky/venv/lib/python3.9/site-packages']

To deactivate the current virtual environment use the command “deactivate”.

When virtual envoronment is deactivated sys.path will search paths outside venv directory.

#+begin_src python :results output
    import sys
    print(sys.path)
#+end_src

#+RESULTS:
: ['', '/usr/lib/python39.zip', '/usr/lib/python3.9', '/usr/lib/python3.9/lib-dynload', '/home/vikky/.local/lib/python3.9/site-packages', '/usr/local/lib/python3.9/dist-packages', '/usr/lib/python3/dist-packages']
 '', '/usr/lib/python39.zip', '/usr/lib/python3.9', '/usr/lib/python3.9/lib-dynload', '/home/vikky/.local/lib/python3.9/site-packages',
 '/usr/local/lib/python3.9/dist-packages', '/usr/lib/python3/dist-packages']


 - Testing and Development Isolation: Virtual environments are useful
  for testing code with different package versions or experimenting
  with new libraries without impacting the main development
  environment;

- Avoiding Global Package Installation: By isolating project-specific
  dependencies, virtual environments keep the global Python
  environment clean and prevent conflicts caused by system-wide
  package installations;

- Enhanced Development Environment: Virtual environments allow
  developers to customize the Python environment for each project,
  including Python versions and package versions, enhancing
  flexibility and control.
