#+BEGIN_EXPORT html
---
layout: page
title: Jinja templating with Flask
tagline: " description and examples"
permalink: /jinja-templating-with-flask.html
categories: [Jinja, Python, Flask, literate programming]
tags: [Jinja, Python, Flask]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Overview

/Jinja/ is a powerful /templating engine/ for Python that is used for
rendering dynamic web pages and other text-based content.

/Template engines/ is a software tool that generates dynamic content
by replacing special placeholders in a template with real data when
executed. Template engines, such as Jinja, are widely used in Python
projects like Flask, Django, offering flexibility and ease of use in
creating dynamic content.

/Dynamic rendering of content/ refers to the process of generating web
pages or other content on the fly, based on user input, database
queries, or other dynamic factors.

A template engine like /Jinja/ allows easy inserting variables,
expressions, and control structures into templates.

* Check if Jinja installed

#+begin_src sh  
pip list
#+end_src

#+RESULTS:
#+begin_example
Package      Version
------------ -------
blinker      1.8.1
click        8.1.7
Flask        3.0.3
itsdangerous 2.2.0
Jinja2       3.1.3
MarkupSafe   2.1.5
pip          23.0.1
setuptools   66.1.1
Werkzeug     3.0.2
wheel        0.38.4
#+end_example

* Render Jinja Template example

#+begin_src python :results output
  import jinja2
  from jinja2 import Template
  template = Template("Hello, {{ name }}!")
  result = template.render(name="World")
  print(result)
#+end_src

#+RESULTS:
: Hello, World!

- We imported the ~Template~ class from the ~jinja2~ module;
- We created a ~Template~ object by passing the template string as an
  argument. In this case, the template contains a variable ~{{ name}}~
  which will be replaced with a value when rendered;
- We called the ~render()~ method on the template object, passing a
  dictionary with the variable name and value. This renders the
  template with the provided data;
- Finally, we printed the rendered output string.

* Basic Syntax

Jinja2 uses different delimiters to distinguish between various
elements within a template, including variables, control structures,
and comments.

** Variable Delimiters (`{{ }}`)

These delimiters are used to output the value of a variable or an
expression within a template.

#+begin_src python
  from jinja2 import Template
  template = Template('Hello, {{ name }}!')
  rendered = template.render(name='Viktoriia')
  print(rendered)
#+end_src

#+RESULTS:
: Hello, Viktoriia!

** Statement Delimiters (`{% %}`)

These delimiters are used for control structures such as loops and
conditionals, and for calling functions or macros.

#+begin_src python
  from jinja2 import Template

  template = Template('''
  {% if user.is_logged_in %}
    Welcome back, {{ user.name }}!
  {% else %}
    Please log in.
  {% endif %}
  ''')
  rendered = template.render(user={'is_logged_in': True, 'name': 'Viktoriia'})
  print(rendered)
  # Output: Welcome back, Viktoriia!

  rendered = template.render(user={'is_logged_in': False, 'name': 'Viktoriia'})
  print(rendered)
  # Output: Please log in.
#+end_src

#+RESULTS:
: 
: 
:   Welcome back, Viktoriia!
: 
: 
: 
:   Please log in.
: 

* Render Jinja variable with filter

#+begin_src python :results output
    import jinja2
    from jinja2 import Template

    # Define a dictionary with data
    data = {
      "name": "John Doe",
      "email": "john.doe@example.com"
    }

    # Create a Jinja template with variables and filters
    template = Template("Name: {{ name|replace('John Doe','Eamon Boyle') }}\nEmail: {{ email|upper }}")

    # Render the template with the data
    output = template.render(data)
    print(output)

#+end_src

#+RESULTS:
: Name: Eamon Boyle
: Email: JOHN.DOE@EXAMPLE.COM

* Render Jinja variable with Test

A Jinja test is a built-in conditional expression used within Jinja2
templates to perform checks or evaluations on variables. These tests
help determine the type, value, or property of a variable and allow
you to control the rendered output based on these checks.

Key Points:

- *Purpose:* To enable conditional logic within Jinja2 templates.
- *Usage:* Used with the `{% if %}` statement to perform various
  checks.
- *Examples:* Tests can check if a variable is defined, if it is of a
  certain type, or if it matches a specific condition.

Common Jinja Tests:

- ~is defined~: Checks if the variable is defined;
- ~is none~: Checks if the variable is ~None~;
- ~is string~: Checks if the variable is a string;
- ~is number~: Checks if the variable is a number;
- ~is sequence~: Checks if the variable is a sequence (like a list or
  tuple).

Simple example:

#+begin_src python :results output
  import jinja2
  from jinja2 import Template

  # Define a simple Jinja2 template with tests
  template_string = """
  {% if name is defined %}
  Hello, {{ name }}!
  {% else %}
  Hello, Guest!
  {% endif %}

  {% if age is number %}
  You are {{ age }} years old.
  {% else %}
  Age is not available.
  {% endif %}
  """

  # Create a Jinja2 Template instance
  template = Template(template_string)

  # Sample data
  data = {
      'name': 'Alice',
      'age': 30,
  }

  # Render the template with the sample data
  output = template.render(data)

  # Print the output
  print(output)

#+end_src

#+RESULTS:
:
:
: Hello, Alice!
:
:
:
: You are 30 years old.
:

* Whitespaces control in Jinja

Controlling whitespace in Jinja templates helps manage the formatting
of the rendered output more precisely.

- ~{%- ... -%}~: Removes whitespace around block statements;
- ~{{- ... -}}~: Removes whitespace around expressions;

Example Without Whitespace Control:

#+begin_src python :results output
  import jinja2
  from jinja2 import Template

  template_string_no_control = """
  {% for i in range(3) %}
  Loop item: {{ i }}
  {% endfor %}
  """

  template_no_control = Template(template_string_no_control)
  output_no_control = template_no_control.render()
  print(output_no_control)
#+end_src

#+RESULTS:
: 
: 
: Loop item: 0
: 
: Loop item: 1
: 
: Loop item: 2
: 

#+begin_src python :results output
    import jinja2
    from jinja2 import Template

    # Define a Jinja template with whitespace control examples
    template_string = """
    {%- for i in range(3) -%}
    Loop item: {{- i -}}
    {%- endfor -%}
    """

    # Create a Jinja2 Template instance
    template = Template(template_string)

    # Render the template
    output = template.render()

    # Print the output
    print(output)

#+end_src

#+RESULTS:
: Loop item:0Loop item:1Loop item:2

* Escaping

To have Jinja ignore parts of a template that it would otherwise
handle as variables or blocks, you can use several methods to escape
or delimit the parts you want to be treated as plain text.

- Using Raw Tags
  Jinja provides ~{% raw %} ... {% endraw %}~ tags to escape parts of
  the template. Anything within these tags will be rendered as plain
  text and not processed by Jinja.

#+begin_src python :results output
  import jinja2
  from jinja2 import Template

  template_str = '''
  <!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Jinja Raw Tags Example</title>
  </head>
  <body>
      <h1>Welcome to Jinja Raw Tags Example</h1>
      {% raw %}
      <p>This will not be rendered as a Jinja variable: {{ user_input }}</p>
      {% endraw %}
      <p>This will be rendered as a Jinja variable: {{ user_input }}</p>
  </body>
  </html>
  '''
  template = Template(template_str)
  output = template.render(user_input='Hello, World!')

  print(output)

#+end_src

#+RESULTS:
#+begin_example

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jinja Raw Tags Example</title>
</head>
<body>
    <h1>Welcome to Jinja Raw Tags Example</h1>
    
    <p>This will not be rendered as a Jinja variable: {{ user_input }}</p>
    
    <p>This will be rendered as a Jinja variable: Hello, World!</p>
</body>
</html>
#+end_example

* Use Jinja With Flask

When you’re in your active virtual environment, go on and check if
Flask installed:

#+begin_src sh
pip list
#+end_src

#+RESULTS:
#+begin_example
Package      Version
------------ -------
blinker      1.8.1
click        8.1.7
Flask        3.0.3
itsdangerous 2.2.0
Jinja2       3.1.3
MarkupSafe   2.1.5
pip          23.0.1
setuptools   66.1.1
Werkzeug     3.0.2
wheel        0.38.4
#+end_example

* Set up your project directory structure

#+begin_src sh :results verbatim
  tree ~/git/annelida/ballyboe/practice/my_flask_app
#+end_src

#+RESULTS:
: /home/vikky/git/annelida/ballyboe/practice/my_flask_app
: ├── app.py
: └── templates
:     └── index.html
: 
: 2 directories, 2 files


** Create the main application file, ~app.py~

If Flask installed, start create your application. Create a file named
~app.py~ in your project’s root directory:

#+begin_src python :results output
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
#+end_src

When you put an ~@app.route()~ decorator on top of a Flask view
function, you register it with the given URL rule. Here, you’re
establishing the route /, which render a ~index.html~ template.

** Create a basic HTML file, =templates/index.html=

#+begin_example
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>My Flask App</title>
  </head>
  <body>
    <h1>Hello, Jinja and Flask!</h1>
  </body>
</html>
#+end_example

** Running the Application

Ensure you're in the directory containing ~app.py~ and then run:

#+begin_src sh
flask --app app run
#+end_src

Open your web browser and navigate to http://127.0.0.1:5000/
You should see "Hello, Jinja and Flask!"

Flask app is running in debug mode. In debug mode, you’ll get more
meaningful error messages if something goes wrong. Also, your server
will restart automatically whenever you change something in your
codebase.

** Rendering Jinja template variable

Edit ~index.html~ by adding a varible ~{{ title }}~:

#+begin_example
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>{{ title }}</title>
  </head>
  <body>
    <h1>Hello, {{ title }}</h1>
  </body>
</html>
#+end_example

And make changes in ~app.py~ by adding {{ title }} variable value:

#+begin_src python :results output
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html', title='My Flask App')

if __name__ == '__main__':
    app.run(debug=True)
#+end_src

Restart your Flask development server, then visit
http://127.0.0.1:5000 and verify that Flask rendered your {{ title }}
variable in website's title and in the text message.
