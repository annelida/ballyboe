#+BEGIN_EXPORT html
---
layout: page
title: Linux Process Management
tagline: " how it works"
permalink: /linux/debian12/process-management-in-linux.html
categories: [Debian12, Process Management]
tags: [linux, process-management]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Introduction

Process management is a critical aspect of administering a Linux
system. It involves starting, monitoring, controlling, and terminating
processes. Understanding how to effectively manage processes can help
ensure that your system runs smoothly and efficiently.

* What is a Process?

*Definition:* A process in Linux refers to a program that is currently
running. It includes the program's code, what the program is doing
at the moment, and the resources it needs to operate. Every time you
execute a command, Linux starts a new process. These processes are
monitored using a unique identifier called the Process ID (PID).

** Types of processes in Linux

1. Foreground Processes

   - These are processes that you start and interact with directly in
     the terminal. They take over the terminal and keep it occupied
     until they finish running or are stopped manually.

     #+begin_src sh
     sh nano myfile.txt
     #+end_src

     While `nano` is open, you cannot run other commands in the same
     terminal window until you exit `nano` (using `Ctrl + X`).

2. Background Processes

   - These processes run in the background, allowing you to continue
     using the terminal for other tasks. You can start a background
     process by appending an `&` at the end of the command. Background
     processes do not require direct user interaction once started.

     #+begin_src sh
     ./myscript.sh &
     #+end_src

     The script `myscript.sh` will run in the background, and you get
     the terminal prompt back immediately to run other commands.

     Listing background jobs and bringing them to the foreground

     #+begin_src sh
     jobs                     # List current background jobs
     fg %1                    # Bring job number 1 back to the foreground
     #+end_src

3. Daemon Processes

   - Daemons are background processes that typically start
     automatically when the system boots and run continuously to
     provide crucial services. They do not have a controlling terminal
     and are used by the system to perform various tasks like handling
     network requests, managing system logs, etc.

     The `sshd` daemon (Secure Shell Daemon): Provides remote login
     capabilities to your system.

     #+begin_src sh
     sudo systemctl start sshd  # Starts the SSH daemon service
     sudo systemctl status sshd # Checks the status of the SSH daemon service
     #+end_src

*** The key differences between Background and Daemon processes

| Feature                 | Background Process               | Daemon Process                         |
|-------------------------+----------------------------------+----------------------------------------|
| **Started By**          | User                             | System or Administrator                |
| **Terminal Attachment** | Initially attached               | No controlling terminal                |
| **Purpose**             | Run user tasks in the background | Provide ongoing system services        |
| **Lifecycle**           | Temporary, can terminate or end  | Long-running, usually run continuously |
| **Management Commands** | `jobs`, `fg`, `bg`, `kill`       | `systemctl`, `service`, `init`         |
| **Logging**             | Output directed to terminal      | Logs to system files (/var/log/)       |


4. System Processes

   - These are processes essential for system operation, started by
     the system itself (often at boot time). They handle various
     low-level tasks and system management functions.

     `systemd`: The primary system and service manager for many Linux
     distributions.

     #+begin_src sh
     ps -e | grep systemd  # Shows the systemd process running
     #+end_src

5. User Processes

   - Any processes started by users, either through the terminal or a
     graphical interface. These processes handle user-level
     applications and tasks.

     /Example:/ When you start a web browser like Firefox, it runs as
     a user process. Launching it from the terminal could look like
     this:

     #+begin_src sh
     firefox &
     #+end_src

** Process' states in Linux

Running:
A process in running state means that it is running or it’s
ready to run.

Sleeping (interruptible sleep, uninterruptible sleep): When it is
waiting for a resource to be available. A process in Interruptible
sleep will wakeup to handle signals, whereas a process in
Uninterruptible sleep will not.

Stopped:
When it receives a stop signal.

Zombie
When a process is dead but the entry for the process is
still present in the table.

** Commands for Process Management in Linux

There are several commands available in Linux to track running
processes. These commands are =Top=, =htop= and =ps=.

** The =top= command for mananging Linux processes
#+begin_src sh
  top
#+end_src

PID: Unique Process ID given to each process;
User: Username of the process owner;
PR: Priority given to a process while scheduling;

NI: ‘nice’ value of a process: a negative nice value means higher
priority, whereas a positive nice value means lower priority. Zero in
this field simply means priority will not be adjusted in determining a
task's dispatch-ability

VIRT: Amount of virtual memory used by a process;
RES: Amount of physical memory used by a process;
SHR: Amount of memory shared with other processes;
S: state of the process;

 - ‘D’ = uninterruptible sleep
 - 'I' = Idle
 - ‘R’ = running
 - ‘S’ = sleeping
 - ‘T’ = traced or stopped
 - ‘Z’ = zombie

%CPU: Percentage of CPU used by the process;
%MEM; Percentage of RAM used by the process;
TIME+: Total CPU time consumed by the process;
Command: Command used to activate the process;

** The =htop=
It is similar to top, but allows you to scroll vertically and
horizontally and use the functional keys.

#+begin_example
F3, /
Incrementally search the command lines of all the displayed processes.
The currently selected (highlighted) command will update as you type.
While in search mode, pressing F3 will cycle through matching
occurrences.

F4, \
Incremental process filtering: type in part of a process command line
and only processes whose names match will be shown. To cancel filtering,
enter the Filter option again and press Esc.
#+end_example

** ps (Process Status) command

It displays the currently-running processes. However, unlike the top
command, the output generated is not in realtime.

#+begin_src sh
  ps
#+end_src

#+RESULTS:
#+begin_example
    PID TTY          TIME CMD
 904296 ?        00:00:01 systemd
 904299 ?        00:00:00 (sd-pam)
 904327 ?        00:22:33 pipewire
 904329 ?        00:00:33 wireplumber
 904330 ?        00:37:35 pipewire-pulse
 904336 ?        00:00:00 gnome-keyring-d
 904339 ?        00:00:05 dbus-daemon
 +end_example

 PID  process ID
 TTY  terminal type
 TIME  total time the process has been running
 CMD  name of the command that launches the process

 To get more information using ps command use:

#+begin_src sh
ps -u
#+end_src

#+RESULTS:
: USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
: vikky     904412  0.0  0.0 159448  5492 tty7     Ssl+ Mar29   0:00 /usr/libexec/gdm-wayland-session /usr/bin/gnome-session
: vikky     904419  0.0  0.0 298124  8996 tty7     Sl+  Mar29   0:00 /usr/libexec/gnome-session-binary
: vikky    1040034  0.0  0.0   8256  3016 tty5     S    Apr02   0:00 -bash
: vikky    1040081  4.1  0.0  13888  9624 tty5     S+   Apr02 650:28 htop
: vikky    1078991  0.0  0.0   8260  3096 pts/8    Ss   Apr03   0:00 bash
: vikky    1145414  0.0  0.0   8388  4176 pts/10   Ss+  Apr05   0:00 bash
: vikky    1245913  0.0  1.2 782744 196792 pts/8   S+   Apr08   5:01 emacs -nw
: vikky    1264653  0.0  0.0   8152  2960 pts/12   Ss+  Apr08   0:00 /bin/bash --noediting -i

%CPU represents the amount of computing power the process is taking.
%MEM represents the amount of memory the process is taking up.
STAT represents process state

While ps command only displays the processes that are currently
running, you can also use it to list all the processes.

#+begin_src sh
ps -A
#+end_src

You can use =ps aux= to get more in-depth information about your
running processes.

- a option outputs all running processes of all users in the system;
- u option provides additional information like memory and CPU usage
  percentage, the process state code, and the owner of the processes;
- x option lists all processes not executed from the terminal. A
  perfect example of this are daemons, which are system-related
  processes that run in the background when the system is booted up.

  #+begin_src sh
    ps -aux | grep ssh
  #+end_src

  #+RESULTS:
  : alioth      1793  0.0  0.0  88372  4408 ?        Ssl  Mar05   0:00 /usr/libexec/gcr-ssh-agent /run/user/1000/gcr
  : alioth      1795  0.0  0.0   7800  1876 ?        Ss   Mar05   0:00 ssh-agent -D -a /run/user/1000/openssh_agent
  : vikky     904481  0.0  0.0  88372  4700 ?        Ssl  Mar29   0:00 /usr/libexec/gcr-ssh-agent /run/user/1001/gcr
  : vikky     904485  0.0  0.0   7800  2636 ?        Ss   Mar29   0:00 ssh-agent -D -a /run/user/1001/openssh_agent
  : vikky    1079495  0.0  0.0   7800  2928 ?        S    Apr03   0:00 /usr/bin/ssh-agent -D -a /run/user/1001/keyring/.ssh
  : root     1399815  0.0  0.0  15412  7160 ?        Ss   Apr13   0:00 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups
  : vikky    1437823  0.0  0.0   6472  2080 ?        S    07:33   0:00 grep ssh

  #+begin_src sh
    ps -aux | grep sshd
  #+end_src

  #+RESULTS:
  : root     1399815  0.0  0.0  15412  7160 ?        Ss   Apr13   0:00 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups
  : vikky    1442624  0.0  0.0   6472  2132 ?        S    08:44   0:00 grep sshd


** Notes
