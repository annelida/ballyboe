#+BEGIN_EXPORT html
---
layout: page
title: Blogging with Emacs Org
tagline: " easy&peasy"
permalink: /blogging-in-org.html
categories: [Blogging, Emacs, Org, Jekyll]
tags: [init, manual, how-to]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export
#+CATEGORY: Blogging
#+TODO: RAW INIT TODO ACTIVE | DONE

* Overview

In today’s dynamic digital landscape, blogging stands as a powerful
platform for sharing ideas, insights, and creativity with a global
audience. For writers and developers seeking an efficient and flexible
workflow, the combination of **Emacs Org-mode** and **Jekyll**
presents an ideal solution. Emacs Org-mode excels at organizing
thoughts, managing tasks, and formatting text, while Jekyll provides a
robust framework for generating static websites with ease.

This article explores the seamless integration of Emacs Org-mode with
Jekyll, illustrating how to transform your organized notes and drafts
into a beautifully formatted blog. We’ll cover topics such as setting
up your environment, effectively writing and organizing blog content
in Org-mode, and leveraging Jekyll’s capabilities to publish your work
effortlessly.

* What is Jekyll and Why Should You Use It?

*Jekyll* is a static site generator written in Ruby, designed to
transform plain text files into a static website. It allows users to
create websites using simple Markdown, Org-mode or Textile formats,
which are then processed into HTML. Jekyll is particularly known for
its efficiency and minimalism, as it generates static pages that can
be served without the need for a database, making it faster and
simpler than traditional content management systems like WordPress.

Originally introduced in 2008 by GitHub co-founder Tom Preston-Werner,
Jekyll is often used for blogs and project documentation. It operates
by taking content written in Org-mode or Markdown, applying templates,
and compiling everything into a static ~_site~ folder that can be
hosted on any web server, including GitHub Pages for free. Jekyll does
not come with built-in themes or content; users must create their own
layouts and write their content, which allows for a high degree of
customization and control over the website's design and functionality.

* Prerequisites

1. *Jekyll:* a static site generator;
2. *Emacs with Org-mode:* Org-mode is a powerful plain text markup
   language within Emacs;
3. *GitHub Account:* You need a GitHub account to host your blog;
4. *Jekyll-bootstrap:* A framework that makes it easier to start using
   Jekyll for blogging.


* Installation

** Install Jekyll

The installation process is described on the [[https://jekyllrb.com/][Jekyll official wesite]].

* Settings

** Set Up Your GitHub Pages Repository

1. Create a new repository on GitHub named username.github.io (replace
   username with your GitHub username).
2. Clone this repository to your local machine:

   #+begin_src sh
     git clone https://github.com/username/username.github.io.git
   #+end_src

3. Configuring Emacs to export Org files directly to the Jekyll ~_posts~
   directory.

* Usage Samples

* Notes                                                            :noexport:

#+begin_quote
Jekyll is a simple, blog-aware, static site generator perfect for
personal, project, or organization sites.

Jekyll takes your content, renders Markdown and Liquid templates, and
spits out a complete, static website ready to be served by Apache,
Nginx or another web server.

Jekyll is the engine behind [[https://pages.github.com/][Github Pages]], which you can use to host
sites right from your GitHub repositories.

Put simply, Jekyll gets out of your way and allows you to concentrate
on what truly matters: your content.

Jekyll is a static web site generator written in Ruby. It can
transform various text markups, using a templating language, into
static html. The resulting site can be served by almost any web server
without requiring additional components such as php. Jekyll is the
tool used to produce Github's pages.

Publishing your site with org and Jekyll involves three steps: write
your page content using org. use org to export your pages to html in
the Jekyll project directory. run Jekyll to convert your html pages
exported from org into your final site.

This article discusses how to produce both a static site and a blog
using Jekyll and org.

Essentially, I am using org to produce everything between the <body>
tags on the page and Jekyll to produce the rest. Note that you can
easily embed html content in your org pages using the +BEGIN_EXPORT
html tag.
#+end_quote
