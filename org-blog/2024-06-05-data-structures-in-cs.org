#+BEGIN_EXPORT html
---
layout: page
title: General Data Structures
tagline: " overview"
permalink: /fundamentals/data-structures-overview.html
categories: [Data Structuries, Fundamentals]
tags: [python, data structuries, dictionaries]
---
#+END_EXPORT
#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args+ :results output pp
#+PROPERTY: header-args+ :eval no-export
#+TOC: headlines 2

* Preamble

In computer science, a /data structure/ is a way of organizing and
storing data in a computer so that it can be accessed and used
efficiently.

#+begin_quote
Each data structure provides a particular way of organizing data so it
can be accessed efficiently, depending on your use case.
#+end_quote

* Glossary

/Abstract data/: refers to a mathematical concept that defines a set
of possible values and a set of operations that can be performed on
those values.

/Data Structures/: is a way of organizing and storing data in a
computer so that it can be accessed and used efficiently. It refers to
the logical or mathematical representation of data, as well as the
implementation in a computer program;

/Hash/: is a mathematical function that transforms a string of
characters or data of arbitrary size into a fixed-size value or key,
known as /a hash value/, /hash code/, /hash digest/, or simply /hash/.


A /hash value/ is a string of characters and numbers that is the
result of a hash function applied to a given input, such as a file or
a message. It is a /unique numerical value/ that identifies the
contents of the input and can be used to verify the integrity of the
data.

/Hashable object/: is an object that has a hash value which never
changes during its lifetime.

/Hashability/ is important because it allows objects to be used as
keys in dictionaries and members in sets. These data structures use
the hash value internally to efficiently store and retrieve data.

Mutable/immutable??

Some examples of hashable objects in Python include: Immutable
built-in types like integers, floats, strings, and tuples.

On the other hand, mutable objects like lists and dictionaries are not
hashable because their hash value can change during their lifetime.
While dictionaries themselves are not hashable, they require their
keys to be hashable in order to leverage efficient hash table
implementations.

* Abstract data types

#+begin_quote
/Abstract data type/ is a type (or class) for objects whose behavior
is defined by a set of values and a set of operations.

The definition of ADT only mentions what operations are to be
performed but not how these operations will be implemented. It does
not specify how data will be organized in memory and what algorithms
will be used for implementing the operations. It is called “abstract”
because it gives an implementation-independent view.

So a user only needs to know what a data type can do, but not how it
will be implemented. Think of ADT as a black box which hides the inner
structure and design of the data type.
#+end_quote

An Abstract Data Type only describes how variables of a given data
type are operated. It provides a list of operations, but doesn’t ex-
plain how data operations happen.

A List is a widely-used Abstract Data Type (ADT) that represents an
ordered collection of elements.

Commonly defined operations in a List ADT include:

- insert n, e : insert the item e at position n,
- remove n : remove the item at position n,
- get n : get the item at position n,
- sort : sort the items in the list,
- slice start, end : return a sub-list slice starting at the position
  start up until the position end,
- reverse : reverse the order of the list.
* The Common Data Structures in Computer Science

- /Arrays/: A collection of elements of the same data type stored in
  contiguous memory locations;
- /Linked Lists/: A sequence of elements where each element points to
  the next one, allowing for efficient insertion and deletion;
- /Stacks/: A linear data structure that follows the Last In, First
  Out (LIFO) principle, where elements are added and removed from the
  top;
- /Queues/: A linear data structure that follows the First In, First Out
  (FIFO) principle, where elements are added to the end and removed
  from the front;
- /Hash Tables/: A data structure that maps keys to values using a
  hash function, allowing for efficient lookup and insertion;

  Is simply an array that is addressed via a hash function.
  https://realpython.com/python-hash-table/
  [[https://www.eecs.umich.edu/courses/eecs380/ALG/niemann/s_has.htm]]

- /Trees/: A non-linear data structure where elements are organized in a
  hierarchical manner, often used for efficient storage and retrieval
  of data;
- /Graphs/: A non-linear data structure that represents a collection of
  nodes connected by edges, often used for modeling relationships
  between data;
- /Heaps/: A specialized tree-based data structure used for efficient
  sorting and priority queuing;


** Arrays

#+begin_quote
/Array/ is a linear data structure that stores a collection of items
of same data type in contiguous memory locations.
#+end_quote

/Linear data structures/ are a type of data structure in computer
science where data elements are arranged sequentially or
linearly. Each element has a previous and next adjacent, except for
the first and last elements.


#+begin_example
A real-world analogy for an array data structure is a parking lot. You
can look at the parking lot as a whole and treat it as a single
object, but inside the lot there are parking spots indexed by a unique
number. Parking spots are containers for vehicles—each parking spot
can either be empty or have a car, a motorbike, or some other vehicle
parked on it.
#+end_example

/Array index/: In an array, elements are identified by their
indexes. Array index starts from 0.

/Array element/: Elements are items stored in an array and can be
accessed by their index.

/Array Length/: The length of an array is determined by the number of
elements it can contain.

#+begin_src python
  # Find The Lowest Value in an Array
  my_array = [5, 11, 8, 3, 12]
  minVal = my_array[0]
  for i in my_array:
      if i < minVal:
          minVal = i
  print('Lowest value: ',minVal)

#+end_src

#+RESULTS:
: Lowest value:  3

** Linked Lists

A /Linked List/ is a data structure that consists of a series of nodes
connected by pointers. Each node in a linked list contains two main
components:

- /Data/: This holds the actual value or data associated with the node;
- /Next Pointer/: This stores the memory address (reference) of the next
  node in the sequence.

The way they are linked together is that each node points to where in
the memory the next node is placed.

A linked list is a collection of nodes. The first node is called the
/head/, and it’s used as the starting point for any iteration
through the list. The last node must have its next reference
pointing to /None/ to determine the end of the list.

***  The Double Linked List

The /Double Linked List/ is the Linked List with an extra: cells have
two pointers: one to the cell that came before it, and other to the
cell that comes after.


** Queues or Stacks

/Queue/ and /stacks/ differ only in the way elements are
retrieved. For a /queue/, you use a /First-In/First-Out (FIFO)/
approach. That means that the first element inserted in the list is
the first one to be retrieved.

For a /stack/, you use a /Last-In/First-Out (LIFO)/ approach, meaning
that the last element inserted in the list is the first to be
retrieved.

** Graph

/Graph/ is a non-linear data structure consisting of vertices and
edges. The vertices are sometimes also referred to as nodes and the
edges are lines or arcs that connect any two nodes in the graph.

The graphs components:

- /Vertices/: These are the points or nodes in the graph where edges
  begin ot end;

- /Edges/: Is simply a connection between two vertices, indicating a
  relationship or interaction between them.

#+begin_example
Imagine a game of football as a web of connections, where players are
the nodes and their interactions on the field are the edges.
#+end_example

Basic Operations on Graphs:

- Insertion of Nodes/Edges in the graph;
- Deletion of Nodes/Edges in the graph;
- Searching on Graphs;
- Traversal of Graphs.


** Tree

A /tree data structure/ is a collection of nodes that are connected by
edges and has a hierarchical relationship between the nodes.

The key components and properties of a tree data structure include:

- Node: A basic unit of a tree that contains data and references to
  child nodes;
- Root: The topmost node in a tree, which does not have a parent;
- Edge: The connection between two nodes, indicating a parent-child
  relationship;
- Leaf: A node that does not have any children;
- Internal Node: A node that has at least one child;
- Subtree: A tree consisting of a node and its descendants;
- Height: The length of the longest path from the root to a leaf;
- Depth: The length of the path from the root to a given node;
- Degree: The number of children of a node;



** Heap data structure

A /Heap/ is a special Tree-based Data Structure in which the tree is a
complete binary tree.

A /complete binary tree/ is a special type of binary tree where all
the levels of the tree are filled completely except the lowest level
nodes which are filled from as left as possible.

There are two main types of heaps:

- /Max-Heap/: In this heap, the value of the root node must be the
  greatest among all its child nodes and the same thing must be done
  for its left and right sub-tree also;
- /Min-Heap/: In this heap, the value of the root node must be the
  smallest among all its child nodes and the same thing must be done
  for its left and right sub-tree also

  








* Classification

IMG and description
