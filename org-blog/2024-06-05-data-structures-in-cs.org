#+BEGIN_EXPORT html
---
layout: page
title: General Data Structures
tagline: " overview"
permalink: /fundamentals/data-structures-overview.html
categories: [Data Structuries, Fundamentals]
tags: [python, data structuries, dictionaries]
---
#+END_EXPORT
#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args+ :results output pp
#+PROPERTY: header-args+ :eval no-export
#+TOC: headlines 2

* Preamble

In computer science, a /data structure/ is a way of organizing and
storing data in a computer so that it can be accessed and used
efficiently.

#+begin_quote
Each data structure provides a particular way of organizing data so it
can be accessed efficiently, depending on your use case.
#+end_quote

* Glossary

/Abstract data/: refers to a mathematical concept that defines a set
of possible values and a set of operations that can be performed on
those values.

/Data Structures/: is a way of organizing and storing data in a
computer so that it can be accessed and used efficiently. It refers to
the logical or mathematical representation of data, as well as the
implementation in a computer program;

/Hash/: is a mathematical function that transforms a string of
characters or data of arbitrary size into a fixed-size value or key,
known as /a hash value/, /hash code/, /hash digest/, or simply /hash/.


A /hash value/ is a string of characters and numbers that is the
result of a hash function applied to a given input, such as a file or
a message. It is a /unique numerical value/ that identifies the
contents of the input and can be used to verify the integrity of the
data.

/Hashable object/: is an object that has a hash value which never
changes during its lifetime.

/Hashability/ is important because it allows objects to be used as
keys in dictionaries and members in sets. These data structures use
the hash value internally to efficiently store and retrieve data.

Mutable/immutable??

Some examples of hashable objects in Python include: Immutable
built-in types like integers, floats, strings, and tuples.

On the other hand, mutable objects like lists and dictionaries are not
hashable because their hash value can change during their lifetime.
While dictionaries themselves are not hashable, they require their
keys to be hashable in order to leverage efficient hash table
implementations.


* The Common Data Structures in Computer Science

- /Arrays/: A collection of elements of the same data type stored in
  contiguous memory locations;
- /Linked Lists/: A sequence of elements where each element points to
  the next one, allowing for efficient insertion and deletion;
- /Stacks/: A linear data structure that follows the Last In, First
  Out (LIFO) principle, where elements are added and removed from the
  top;
- /Queues/: A linear data structure that follows the First In, First Out
  (FIFO) principle, where elements are added to the end and removed
  from the front;
- /Hash Tables/: A data structure that maps keys to values using a
  hash function, allowing for efficient lookup and insertion;

  Is simply an array that is addressed via a hash function.
  https://realpython.com/python-hash-table/
  [[https://www.eecs.umich.edu/courses/eecs380/ALG/niemann/s_has.htm]]

- /Trees/: A non-linear data structure where elements are organized in a
  hierarchical manner, often used for efficient storage and retrieval
  of data;
- /Graphs/: A non-linear data structure that represents a collection of
  nodes connected by edges, often used for modeling relationships
  between data;
- /Tries/: A type of tree data structure used for storing and retrieving
  data efficiently, particularly in applications involving strings;
- Heaps: A specialized tree-based data structure used for efficient
  sorting and priority queuing;


** Arrays

#+begin_quote
/Array/ is a linear data structure that stores a collection of items
of same data type in contiguous memory locations.
#+end_quote

/Linear data structures/ are a type of data structure in computer
science where data elements are arranged sequentially or
linearly. Each element has a previous and next adjacent, except for
the first and last elements.

/Array index/: In an array, elements are identified by their
indexes. Array index starts from 0.

/Array element/: Elements are items stored in an array and can be
accessed by their index.

/Array Length/: The length of an array is determined by the number of
elements it can contain.

#+begin_src python
  # Find The Lowest Value in an Array
  my_array = [5, 11, 8, 3, 12]
  minVal = my_array[0]
  for i in my_array:
      if i < minVal:
          minVal = i
  print('Lowest value: ',minVal)

#+end_src

#+RESULTS:
: Lowest value:  3

 




* Classification

IMG and description
