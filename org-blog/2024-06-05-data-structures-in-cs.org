#+BEGIN_EXPORT html
---
layout: page
title: General Data Structures
tagline: " overview"
permalink: /fundamentals/data-structures-overview.html
categories: [Data Structuries, Fundamentals]
tags: [python, data structuries, dictionaries]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2

* Preamble

In computer science, a /data structure/ is a way of organizing and
storing data in a computer so that it can be accessed and used
efficiently.


* Glossary

/Data Structures/: is a way of organizing and storing data in a
computer so that it can be accessed and used efficiently. It refers to
the logical or mathematical representation of data, as well as the
implementation in a computer program;

/Hash/: is a mathematical function that transforms a string of
characters or data of arbitrary size into a fixed-size value or key,
known as /a hash value/, /hash code/, /hash digest/, or simply /hash/.

/Hashable object/: is an object that has a hash value which never
changes during its lifetime.

Hashability is important because it allows objects to be used as keys
in dictionaries and members in sets. These data structures use the
hash value internally to efficiently store and retrieve data.

Mutable/immutable??

Some examples of hashable objects in Python include: Immutable
built-in types like integers, floats, strings, and tuples.

On the other hand, mutable objects like lists and dictionaries are not
hashable because their hash value can change during their lifetime.


* The Common Data Structures in Computer Science

- /Arrays/: A collection of elements of the same data type stored in
  contiguous memory locations;
- /Linked Lists/: A sequence of elements where each element points to
  the next one, allowing for efficient insertion and deletion;
- /Stacks/: A linear data structure that follows the Last In, First
  Out (LIFO) principle, where elements are added and removed from the
  top;
- /Queues/: A linear data structure that follows the First In, First Out
  (FIFO) principle, where elements are added to the end and removed
  from the front;
- /Hash Tables/: A data structure that maps keys to values using a hash
  function, allowing for efficient lookup and insertion;
- /Trees/: A non-linear data structure where elements are organized in a
  hierarchical manner, often used for efficient storage and retrieval
  of data;
- /Graphs/: A non-linear data structure that represents a collection of
  nodes connected by edges, often used for modeling relationships
  between data;
- /Tries/: A type of tree data structure used for storing and retrieving
  data efficiently, particularly in applications involving strings;
- Heaps: A specialized tree-based data structure used for efficient
  sorting and priority queuing;



* Classification

IMG and description
