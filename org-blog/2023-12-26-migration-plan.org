#+BEGIN_EXPORT html
---
layout: post
title: Migration from one host to another
subtitle: step by step description
permalink: /linux/moving-from-one-host-to-another.html
categories: [linux, git, literate programming]
tags: [linux, git,  emacs, python, remotes]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export
#+CATEGORY: Migration
#+TODO: RAW INIT TODO ACTIVE | DONE

* Commit and push on Chrome OS
* Git configuration on Dell

Therefore all configs are stored at GitHub, the first and foremost
step to migrate is ~GitHub~ config:

Repositories store in folder ~/git. For the separating repositories by
owners it might be reasonable to create local folders:

+ ~/git
+ ~/git/annelida
+ ~/git/0--key
+ ~/git/misc

  #+begin_src sh
    mkdir ~/git
    cd ~/git/
    mkdir annelida 0--key  misc
    ls
  #+end_src

  After the folders were created it is very mmoment to fill it to
  content by clonning data into them.

  #+begin_src sh
   
    cd ~/git/annelida/
    git clone git@github.com:annelida/ballyboe.git
    git clone git@github.com:annelida/annelida.github.io.git
  #+end_src

  Keys (credentials). The keys were generated, exchange accomplish,
  but tests are not implemented yet;


- Access test;
- Clone test;
- Sample changes;
- Commit;
- Push test
- Pull test;

* Keys and credentials

** Check if the ssh keys already exists
#+begin_example
cd ~/.ssh
ls -la
#+end_example

** Generating a new SSH key
Open Terminal, paste the text below, replacing the email used in the
example with your GitHub email address.
#+begin_example
ssh-keygen -t ed25519 -C "your_email@example.com"
#+end_example

** Add keys to ssh-agent
#+begin_example
ssh-add ~/.ssh.id_ed25519
#+end_example

** Add the SSH public key to your account on GitHub
[[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account][Adding a new SSH key to your GitHub account]]

* Git functional testing

Create folder ~/ballyboe/Dell and init.el file inside for separation
Emacs configuration files for different distributives Linux.

#+begin_src sh
  cd ~/git/ballyboe
  mkdir Dell
  touch Dell/init.el
  ls Dell
#+end_src

 Edit Dell/init.el file from repository

 #+begin_src elisp
   (load-theme 'wombat);;manoj-dark)
 #+end_src

 Create a symbolic link from ~/.emacs.d/init.el to repository
 ~/git/ballyboe/Dell/init.el

To ensure that Emacs works correctly relaunch it.  If colour theme is
visiobly different form the default one - Emacs successfully see and
execute the initialization file. It is time to extend it functionality
by adding Magit package

#+begin_src elisp
(require 'magit)
#+end_src

Directive ='require= works only after relaunch Emacs, so you need to
restart it.

After that you can commit the changes and try to push it using Magit.

* Create list packages that need to be installed in Emacs

* RAW [#A] Migration sequence description
SCHEDULED: <2024-04-12 Fri>
:LOGBOOK:
CLOCK: [2024-04-03 Wed 09:17]--[2024-04-03 Wed 10:13] =>  0:56
CLOCK: [2024-04-02 Tue 10:29]--[2024-04-02 Tue 11:45] =>  1:16
:END:

* Existed environment check up

#+begin_src sh
  python --version
  # pip list
  # virtualenv --version
  emacs --version
#+end_src

#+RESULTS:
: Python 3.9.2
: GNU Emacs 27.1
: Copyright (C) 2020 Free Software Foundation, Inc.
: GNU Emacs comes with ABSOLUTELY NO WARRANTY.
: You may redistribute copies of GNU Emacs
: under the terms of the GNU General Public License.
: For more information about these matters, see the file named COPYING.

* Create separated virtual environments for Selenium and Playwright.

#+begin_src sh
  cd ~/.local/
  ls
  # mkdir venvs
  # python -m venv selvenv
  # python -m venv playvenv
  # or through virtualenv
#+end_src

#+RESULTS:
: bin
: lib
: share
: state

* Install Selenium.

* Install Playwright.

* Emacs configuration
Copy content alioth's =.emacs=, except org-capture, key-chords,
voca-builder, Org-Jekyll's settings and =org-agenda files= to my
=init.el= file.

Evaluate the elisp code for add all subdirs from the host's
=site-lisp= to ~load-path~

#+begin_src elisp
;; add all subdirs from the host's =site-lisp= to ~load-path~
(let* ((my-lisp-dir "/usr/local/share/emacs/site-lisp/")
       (default-directory my-lisp-dir)
       (orig-load-path load-path))
  (setq load-path (cons my-lisp-dir nil))
  (normal-top-level-add-subdirs-to-load-path)
  (nconc load-path orig-load-path))
#+end_src

Restart Emacs and check up content *Warnings* and *Messages* buffers.

** Key-chords customization

Create a symbolic link from ~/.emacs.d/key-chords.el to repository
 ~/git/annelida/ballyboe/bookworm/key-chords.el

#+begin_src sh
  cd ~/.emacs.d
  ln -s ~/git/annelida/ballyboe/bookworm/key-chords.el
  ls -la
#+end_src

Add the =key-chord= load path to =init.el=

#+begin_src elisp
;;======================================================
;; Additional config section:
(load "~/.emacs.d/key-chords.el")
;;
;;======================================================
#+end_src

Testing how key-chords working.

** RAW Org-agenda customization
SCHEDULED: <2024-04-08 Mon>

Copy list =org-agenda-files= from
~/git/annelida/ballyboe/bookworm/.emacs to =custom-set-variables=
section inside ~/git/annelida/ballyboe/Dell/init.el. Correct each file
path.

Evaluate the region. Try to create weekly agenda by completing =M-x
org-agenda= command.

** Org-babel customization
SCHEDULED: <2024-04-09 Tue>

Addiing Org-babel languages list to =init.el= and confirmation to
evaluate the code.

#+begin_src elisp

  (setq org-confirm-babel-evaluate nil)

  ;; Programming languages for Babel
  (org-babel-do-load-languages
  'org-babel-load-languages '((python . t) (emacs-lisp . t) (shell . t) (sqlite . t)))
#+end_src





