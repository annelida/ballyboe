#+BEGIN_EXPORT html
---
layout: post
title: Migration from one host to another
subtitle: step by step description
permalink: /linux/moving-from-one-host-to-another.html
categories: [linux, git, literate programming]
tags: [linux, git,  emacs, python, remotes]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export
#+CATEGORY: Migration
#+TODO: | AMPLE
#+TODO: RAW INIT TODO ACTIVE | DONE

* Commit and push on Chrome OS
* Git configuration on Dell

Therefore all configs are stored at GitHub, the first and foremost
step to migrate is ~GitHub~ config:

Repositories store in folder ~/git. For the separating repositories by
owners it might be reasonable to create local folders:

+ ~/git
+ ~/git/annelida
+ ~/git/0--key
+ ~/git/misc

  #+begin_src sh
    mkdir ~/git
    cd ~/git/
    mkdir annelida 0--key  misc
    ls
  #+end_src

  After the folders were created it is very mmoment to fill it to
  content by clonning data into them.

  #+begin_src sh
   
    cd ~/git/annelida/
    git clone git@github.com:annelida/ballyboe.git
    git clone git@github.com:annelida/annelida.github.io.git
  #+end_src

  Keys (credentials). The keys were generated, exchange accomplish,
  but tests are not implemented yet;


- Access test;
- Clone test;
- Sample changes;
- Commit;
- Push test
- Pull test;

* Keys and credentials

** Check if the ssh keys already exists
#+begin_example
cd ~/.ssh
ls -la
#+end_example

** Generating a new SSH key
Open Terminal, paste the text below, replacing the email used in the
example with your GitHub email address.
#+begin_example
ssh-keygen -t ed25519 -C "your_email@example.com"
#+end_example

** Add keys to ssh-agent
#+begin_example
ssh-add ~/.ssh.id_ed25519
#+end_example

** Add the SSH public key to your account on GitHub
[[https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account][Adding a new SSH key to your GitHub account]]

* Git functional testing

Create folder ~/ballyboe/Dell and init.el file inside for separation
Emacs configuration files for different distributives Linux.

#+begin_src sh
  cd ~/git/ballyboe
  mkdir Dell
  touch Dell/init.el
  ls Dell
#+end_src

 Edit Dell/init.el file from repository

 #+begin_src elisp
   (load-theme 'wombat);;manoj-dark)
 #+end_src

 Create a symbolic link from ~/.emacs.d/init.el to repository
 ~/git/ballyboe/Dell/init.el

To ensure that Emacs works correctly relaunch it.  If colour theme is
visiobly different form the default one - Emacs successfully see and
execute the initialization file. It is time to extend it functionality
by adding Magit package

#+begin_src elisp
(require 'magit)
#+end_src

Directive ='require= works only after relaunch Emacs, so you need to
restart it.

After that you can commit the changes and try to push it using Magit.

* Create list packages that need to be installed in Emacs

* AMPLE [#C] Migration sequence description
SCHEDULED: <2024-05-02 Thu>
:LOGBOOK:
CLOCK: [2024-04-20 Sat 08:21]--[2024-04-20 Sat 08:41] =>  0:20
CLOCK: [2024-04-03 Wed 09:17]--[2024-04-03 Wed 10:13] =>  0:56
CLOCK: [2024-04-02 Tue 10:29]--[2024-04-02 Tue 11:45] =>  1:16
:END:

* Existed environment check up

#+begin_src sh
  python --version
  # pip list
  # virtualenv --version
  emacs --version
#+end_src

#+RESULTS:
: Python 3.9.2
: GNU Emacs 27.1
: Copyright (C) 2020 Free Software Foundation, Inc.
: GNU Emacs comes with ABSOLUTELY NO WARRANTY.
: You may redistribute copies of GNU Emacs
: under the terms of the GNU General Public License.
: For more information about these matters, see the file named COPYING.

* Create separated virtual environments for Selenium and Playwright.

#+begin_src sh
  cd ~/.local/
  ls
  # mkdir venvs
  # python -m venv selvenv
  # python -m venv playvenv
  # or through virtualenv
#+end_src

#+RESULTS:
: bin
: lib
: share
: state

* Install Selenium.
[[file:~/git/0--key/org-pub/2024-03-22-selenium-init.org::*Testing][Selenium installation description]]

** Creation separate virtual environment

#+begin_src sh :results output :exports both
  cd ~/.local/venvs/
  virtualenv VirtSel
#+end_src

#+RESULTS:
: created virtual environment CPython3.11.2.final.0-64 in 206ms
:   creator CPython3Posix(dest=/home/vikky/.local/venvs/VirtSel, clear=False, no_vcs_ignore=False, global=False)
:   seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/vikky/.local/share/virtualenv)
:     added seed packages: pip==23.0.1, setuptools==66.1.1, wheel==0.38.4
:   activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator

New =venv= activation:
#+begin_src elisp
  (pyvenv-activate "~/.local/venvs/VirtSel/")
#+end_src

#+RESULTS:

#+begin_src sh :results output :exports both
pip3 list
#+end_src

#+RESULTS:
: Package    Version
: ---------- -------
: pip        23.0.1
: setuptools 66.1.1
: wheel      0.38.4

** Selenium installation 

#+begin_src sh :results output :exports both
  pip install selenium
#+end_src

#+RESULTS:
#+begin_example
Collecting selenium
  Downloading selenium-4.20.0-py3-none-any.whl (9.5 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 9.5/9.5 MB 2.6 MB/s eta 0:00:00
Collecting urllib3[socks]<3,>=1.26
  Downloading urllib3-2.2.1-py3-none-any.whl (121 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 121.1/121.1 kB 4.4 MB/s eta 0:00:00
Collecting trio~=0.17
  Downloading trio-0.25.0-py3-none-any.whl (467 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 467.2/467.2 kB 4.0 MB/s eta 0:00:00
Collecting trio-websocket~=0.9
  Downloading trio_websocket-0.11.1-py3-none-any.whl (17 kB)
Collecting certifi>=2021.10.8
  Downloading certifi-2024.2.2-py3-none-any.whl (163 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 163.8/163.8 kB 3.8 MB/s eta 0:00:00
Collecting typing_extensions>=4.9.0
  Downloading typing_extensions-4.11.0-py3-none-any.whl (34 kB)
Collecting attrs>=23.2.0
  Downloading attrs-23.2.0-py3-none-any.whl (60 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 60.8/60.8 kB 7.5 MB/s eta 0:00:00
Collecting sortedcontainers
  Downloading sortedcontainers-2.4.0-py2.py3-none-any.whl (29 kB)
Collecting idna
  Downloading idna-3.7-py3-none-any.whl (66 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 66.8/66.8 kB 4.4 MB/s eta 0:00:00
Collecting outcome
  Downloading outcome-1.3.0.post0-py2.py3-none-any.whl (10 kB)
Collecting sniffio>=1.3.0
  Downloading sniffio-1.3.1-py3-none-any.whl (10 kB)
Collecting wsproto>=0.14
  Downloading wsproto-1.2.0-py3-none-any.whl (24 kB)
Collecting pysocks!=1.5.7,<2.0,>=1.5.6
  Downloading PySocks-1.7.1-py3-none-any.whl (16 kB)
Collecting h11<1,>=0.9.0
  Downloading h11-0.14.0-py3-none-any.whl (58 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 58.3/58.3 kB 6.7 MB/s eta 0:00:00
Installing collected packages: sortedcontainers, urllib3, typing_extensions, sniffio, pysocks, idna, h11, certifi, attrs, wsproto, outcome, trio, trio-websocket, selenium
Successfully installed attrs-23.2.0 certifi-2024.2.2 h11-0.14.0 idna-3.7 outcome-1.3.0.post0 pysocks-1.7.1 selenium-4.20.0 sniffio-1.3.1 sortedcontainers-2.4.0 trio-0.25.0 trio-websocket-0.11.1 typing_extensions-4.11.0 urllib3-2.2.1 wsproto-1.2.0
#+end_example

#+begin_src sh :results output :exports both
  pip3 list
#+end_src

#+RESULTS:
#+begin_example
Package            Version
------------------ -----------
appdirs            1.4.4
attrs              23.2.0
beautifulsoup4     4.12.3
certifi            2024.2.2
charset-normalizer 3.3.2
h11                0.14.0
idna               3.7
lxml               5.2.2
outcome            1.3.0.post0
pip                23.0.1
PySocks            1.7.1
requests           2.31.0
selenium           4.20.0
setuptools         66.1.1
sniffio            1.3.1
sortedcontainers   2.4.0
soupsieve          2.5
tqdm               4.66.4
trio               0.25.0
trio-websocket     0.11.1
typing_extensions  4.11.0
urllib3            2.2.1
wheel              0.38.4
wsproto            1.2.0
#+end_example


#+begin_src sh :results output :exports both
pip install webdriver_manager
#+end_src

#+RESULTS:
#+begin_example
Collecting webdriver_manager
  Downloading webdriver_manager-4.0.1-py2.py3-none-any.whl (27 kB)
Requirement already satisfied: requests in /home/vikky/.local/venvs/VirtSel/lib/python3.11/site-packages (from webdriver_manager) (2.31.0)
Collecting python-dotenv
  Downloading python_dotenv-1.0.1-py3-none-any.whl (19 kB)
Collecting packaging
  Using cached packaging-24.0-py3-none-any.whl (53 kB)
Requirement already satisfied: charset-normalizer<4,>=2 in /home/vikky/.local/venvs/VirtSel/lib/python3.11/site-packages (from requests->webdriver_manager) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /home/vikky/.local/venvs/VirtSel/lib/python3.11/site-packages (from requests->webdriver_manager) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /home/vikky/.local/venvs/VirtSel/lib/python3.11/site-packages (from requests->webdriver_manager) (2.2.1)
Requirement already satisfied: certifi>=2017.4.17 in /home/vikky/.local/venvs/VirtSel/lib/python3.11/site-packages (from requests->webdriver_manager) (2024.2.2)
Installing collected packages: python-dotenv, packaging, webdriver_manager
Successfully installed packaging-24.0 python-dotenv-1.0.1 webdriver_manager-4.0.1
#+end_example

** Testing

#+begin_src python :results output :exports both :eval no-export
  from selenium import webdriver
  from selenium.webdriver.chrome.options import Options
  from selenium.webdriver.chrome.service import Service
  from webdriver_manager.chrome import ChromeDriverManager

  options = Options()
  options.add_argument('--headless')
  options.add_argument('--no-sandbox')
  options.add_argument('--disable-dev-shm-usage')
  driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

  driver.get("https://python.org")
  print(driver.title)
  driver.close()
#+end_src

#+RESULTS:
: Welcome to Python.org


* Install Playwright.

* Emacs configuration
Copy content alioth's =.emacs=, except org-capture, key-chords,
voca-builder, Org-Jekyll's settings and =org-agenda files= to my
=init.el= file.

Evaluate the elisp code for add all subdirs from the host's
=site-lisp= to ~load-path~

#+begin_src elisp
;; add all subdirs from the host's =site-lisp= to ~load-path~
(let* ((my-lisp-dir "/usr/local/share/emacs/site-lisp/")
       (default-directory my-lisp-dir)
       (orig-load-path load-path))
  (setq load-path (cons my-lisp-dir nil))
  (normal-top-level-add-subdirs-to-load-path)
  (nconc load-path orig-load-path))
#+end_src

Restart Emacs and check up content *Warnings* and *Messages* buffers.

** Key-chords customization

Create a symbolic link from ~/.emacs.d/key-chords.el to repository
 ~/git/annelida/ballyboe/bookworm/key-chords.el

#+begin_src sh
  cd ~/.emacs.d
  ln -s ~/git/annelida/ballyboe/bookworm/key-chords.el
  ls -la
#+end_src

Add the =key-chord= load path to =init.el=

#+begin_src elisp
;;======================================================
;; Additional config section:
(load "~/.emacs.d/key-chords.el")
;;
;;======================================================
#+end_src

Testing how key-chords working.

** AMPLE Org-agenda customization
SCHEDULED: <2024-04-26 Fri>

Copy list =org-agenda-files= from
~/git/annelida/ballyboe/bookworm/.emacs to =custom-set-variables=
section inside ~/git/annelida/ballyboe/Dell/init.el. Correct each file
path.

Evaluate the region. Try to create weekly agenda by completing =M-x
org-agenda= command.

** RAW [#A] Org-babel variables customization 
:PROPERTIES:
:LAST_REPEAT: [2024-05-23 Thu 18:10]
:END:
- State "AMPLE"      from "RAW"        [2024-05-23 Thu 18:10]
- State "AMPLE"      from "RAW"        [2024-05-23 Thu 18:10]
- State "AMPLE"      from "TODO"       [2024-05-23 Thu 18:10]
- State "AMPLE"      from "RAW"        [2024-05-23 Thu 09:42]
- State "AMPLE"      from "RAW"        [2024-05-21 Tue 18:30]
- State "AMPLE"      from "TODO"       [2024-05-21 Tue 07:10]
- State "AMPLE"      from "INIT"       [2024-05-20 Mon 17:28]
- State "AMPLE"      from "RAW"        [2024-05-15 Wed 18:25]
- State "AMPLE"      from "RAW"        [2024-05-15 Wed 18:25]
- State "AMPLE"      from "INIT"       [2024-05-15 Wed 18:25]
- State "AMPLE"      from "RAW"        [2024-05-04 Sat 19:16]
- State "AMPLE"      from "RAW"        [2024-05-04 Sat 19:16]
- State "AMPLE"      from "ACTIVE"     [2024-05-04 Sat 19:16]
- State "DONE"       from "ACTIVE"     [2024-04-24 Wed 18:52]
- State "AMPLE"      from "RAW"        [2024-04-24 Wed 18:52]
- State "AMPLE"      from "TODO"       [2024-04-24 Wed 18:52]
- State "DONE"       from "ACTIVE"     [2024-04-24 Wed 18:44]
- State "AMPLE"      from "TODO"       [2024-04-20 Sat 19:11]
- State "AMPLE"      from "RAW"        [2024-04-20 Sat 19:11]
- State "AMPLE"      from "TODO"       [2024-04-20 Sat 19:10]
- State "AMPLE"      from "RAW"        [2024-04-17 Wed 19:24]
- State "AMPLE"      from "TODO"       [2024-04-17 Wed 19:24]
- State "AMPLE"      from "TODO"       [2024-04-17 Wed 19:22]
- State "AMPLE"      from "RAW"        [2024-04-11 Thu 18:50]
- State "AMPLE"      from "INIT"       [2024-04-11 Thu 18:50]
- State "AMPLE"      from "RAW"        [2024-04-11 Thu 18:50]
- State "DONE"       from "ACTIVE"     [2024-04-11 Thu 18:50]
- State "AMPLE"      from "RAW"        [2024-04-11 Thu 18:50]
- State "DONE"       from "ACTIVE"     [2024-04-11 Thu 18:49]
- State "AMPLE"      from "RAW"        [2024-04-09 Tue 15:11]
- State "DONE"       from "ACTIVE"     [2024-04-09 Tue 15:11]
- State "AMPLE"      from "TODO"       [2024-04-09 Tue 15:07]
:LOGBOOK:
CLOCK: [2024-04-09 Tue 09:36]--[2024-04-09 Tue 09:59] =>  0:23
CLOCK: [2024-04-09 Tue 07:58]--[2024-04-09 Tue 08:33] =>  0:35
:END:

Customize variables:

org-babel-python-command
indent-tabs-mode



Addiing Org-babel languages list to =init.el= and confirmation to
evaluate the code.

#+begin_src elisp

  (setq org-confirm-babel-evaluate nil)

  ;; Programming languages for Babel
  (org-babel-do-load-languages
  'org-babel-load-languages '((python . t) (emacs-lisp . t) (shell . t) (sqlite . t)))
#+end_src

** Bookmarks+ customization

  Copy file =bookmark+= from git/annelida/ballyboe/bookworm to
  git/annelida/ballyboe/Dell

  #+begin_src sh
   cd ~/git/annelida/ballyboe/bookworm
   cp bookmarks ~/git/ballyboe/Dell
   cd ~/git/annelida/ballyboe/Dell
   ls
  #+end_src

  #+RESULTS:
  : bookmarks
  : init.el
  : init.el~
  : key-chords.el~
  : org-capture-templates.el
  : org-capture-templates.el~

  Delete existing =bookmarks= file from ~/.emacs.d. Make soft link
  from ~/.emacs.d folder to =bookmarks= file.

  #+begin_src sh :results verbatim
    cd ~/.emacs.d
    ln -s ~/git/annelida/ballyboe/Dell/bookmarks
    ls -la
  #+end_src

  #+RESULTS:
  #+begin_example
  total 56
  drwx------ 10 vikky vikky 4096 Apr 29 13:06 .
  drwx------ 19 vikky vikky 4096 Apr 29 14:21 ..
  drwx------  2 vikky vikky 4096 Apr 29 13:35 auto-save-list
  -rw-r--r--  1 vikky vikky 7129 Apr 29 13:10 #bookmarks#
  lrwxrwxrwx  1 vikky vikky   48 Apr 11 09:26 bookmarks -> /home/vikky/git/annelida/ballyboe/Dell/bookmarks
  drwxr-xr-x  4 vikky vikky 4096 Dec 18 12:22 eln-cache
  drwxr-xr-x  4 vikky vikky 4096 Apr  9 16:03 elpa
  drwxr-xr-x  3 vikky vikky 4096 Apr 19 07:41 elpy
  lrwxrwxrwx  1 vikky vikky   46 Apr  3 11:44 init.el -> /home/vikky/git/annelida/ballyboe/Dell/init.el
  lrwxrwxrwx  1 vikky vikky   56 Apr  5 09:53 key-chords.el -> /home/vikky/git/annelida/ballyboe/bookworm/key-chords.el
  lrwxrwxrwx  1 vikky vikky   63 Apr 15 08:56 org-capture-templates.el -> /home/vikky/git/annelida/ballyboe/Dell/org-capture-templates.el
  -rw-r--r--  1 vikky vikky  324 Apr 16 19:46 .org-id-locations
  drwxr-xr-x  2 vikky vikky 4096 Apr 23 11:05 request
  -rw-r--r--  1 vikky vikky    0 Dec  8 13:55 session.10e18d78e5f9d79e92170204330881657300001006640073
  drwxr-xr-x  2 vikky vikky 4096 Apr 19 07:41 snippets
  drwxr-xr-x  2 vikky vikky 4096 Apr 29 13:32 transient
  drwxr-xr-x  2 vikky vikky 4096 Apr 29 13:43 url
  #+end_example

  Test how Bookmarks+ works in Emacs

** Jekyll's settings

Copy from .emacs to init.el file Jekyll's settings. When change all
directories paths to correct:= ~/git/annelida/ballyboe= instead
=~/git/ballyboe/=

#+begin_src elisp
(setq org-publish-project-alist
'(("jekyll-org"
   :base-directory "~/git/annelida/ballyboe/org-blog/"
   :base-extension "org"
   ;; Path to your Jekyll project.
   :publishing-directory "~/git/annelida/annelida.github.io/_posts/"
   :recursive t
   :publishing-function org-html-publish-to-html
   :headline-levels 4
   :html-extension "html"
   :section-numbers nil
   :with-toc nil
   :body-only t
   ;; Only export section between <body> </body> (body-only)
   )
  ("jekyll-org-img"
   :base-directory "~/git/annelida/ballyboe/org-blog/img/"
   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
   :publishing-directory "~/git/annelida/annelida.github.io/assets/img/"
   :recursive t
   :publishing-function org-publish-attachment)

  ("jekyll" :components ("jekyll-org" "jekyll-org-img"))
  ))
#+end_src

Execute M-x eval buffer.

Try to export one particular article from the =org format= to =html=.




