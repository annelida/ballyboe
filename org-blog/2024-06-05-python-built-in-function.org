#+BEGIN_EXPORT html
---
layout: page
title: Python built-in function
tagline: " overview in detail"
permalink: /python/python-built-in-function.html
categories: [Python, built-in-function]
tags: [python, intro, built-in functions]
---
#+END_EXPORT
#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args+ :results output pp
#+PROPERTY: header-args+ :eval no-export
#+TOC: headlines 2


* Preamble

Python has a wide range of built-in functions that can be used to
perform various tasks. Here are some of the most commonly used
built-in functions in Python:

#+begin_quote
 | abs()         | dict()      | help()       | min()      | setattr()      |
 | all()         | dir()       | hex()        | next()     | slice()        |
 | any()         | divmod()    | id()         | object()   | sorted()       |
 | ascii()       | enumerate() | input()      | oct()      | staticmethod() |
 | bin()         | eval()      | int()        | open()     | str()          |
 | bool()        | exec()      | isinstance() | ord()      | sum()          |
 | bytearray()   | filter()    | issubclass() | pow()      | super()        |
 | bytes()       | float()     | iter()       | print()    | tuple()        |
 | callable()    | format()    | len()        | property() | type()         |
 | chr()         | frozenset() | list()       | range()    | vars()         |
 | classmethod() | getattr()   | locals()     | repr()     | zip()          |
 | compile()     | globals()   | map()        | reversed() | __import__()   |
 | complex()     | hasattr()   | max()        | round()    |                |
 | delattr()     | hash()      | memoryview() | set()      |                |
 |               |             |              |            |                |
#+end_quote

** The ~abs()~ function

The ~abs()~ returns the absolute value of a given number. It can be
used with integers, floating-point numbers, and complex numbers. It is
essential in calculations involving speed, distance, and time, as it
ensures that these values are always positive.

#+begin_src python :results output
  number = 20
  neg_number = -20
  floating = -30.23
  complex = (3 - 4j)
  print(abs(number))
  print(abs(neg_number))
  print(abs(floating))
  print(abs(complex))
#+end_src

#+RESULTS:
: 20
: 20
: 30.23
: 5.0

** The ~all()~ function

The Python ~all()~ function returns True if all the elements of a
given iterable (List, Dictionary, Tuple, set, etc.) are True otherwise
it returns False. If the iterable object is empty, the ~all()~
function also returns True.

#+begin_src python
  # 0 is the same as False
  mylist = [0, 1, 1]
  print(all(mylist))
  # All elements of list are true
  mylist = [4, 5, 1]
  print(all(mylist))
  # Empty List
  mylist = []
  print(all(mylist))
  # Non-Empty String
  mystring = "helloworld"
  print(all(mystring))
  mystring = ""
  print(all(mystring))
#+end_src

#+RESULTS:
: False
: True
: True
: True
: True

*** Practical application

#+begin_src python
  # Validate that a username contains only alphabetic characters
  username = "Alice123"
  if all(char.isalpha() for char in username):
      print("Valid username")
  else:
    print("Invalid username")
#+end_src

#+RESULTS:
: Invalid username

#+begin_src python
  # Check if a password contains only lowercase letters
  password = "secure_password"
  if all(char.islower() for char in password):
      print("Password format is correct")
  else:
    print("Password must contain only lowercase letters")
#+end_src

#+RESULTS:
: Password must contain only lowercase letters



** The ~any()~ function

Python ~any()~ function returns True if any of the elements of a given
iterable (List, Dictionary, Tuple, set, etc) are True else it returns
False.

#+begin_src python
  print(any([True, True]))
  print(any([True, False]))
  print(any([False, False]))
  print(any([]))
  print(any("Hello, there"))
  print(any(""))
#+end_src

#+RESULTS:
: True
: True
: False
: False
: True
: False

*** Practical application

#+begin_src python
  user_inputs = ["", "", "Python"] 
  if (any(user_inputs)):
      print("At least one valid input provided.")
  else:
      print("No valid inputs provided.")
#+end_src

#+RESULTS:
: At least one valid input provided.


** The ~ascii()~ function

~ascii()~ is a built-in function that takes one argument and returns a
string that represents the object using only ASCII characters.

#+begin_src python :result none :session ascii
   import unittest
   class TestAscii(unittest.TestCase):
       def test_string_convertation(self):
           self.assertEqual(ascii('Café'), "'Caf\\xe9'")

       def test_list_convertation(self):
           self.assertEqual(ascii(['Simple', 'list']),
                            "['Simple', 'list']")

       def test_list_non_ascii(self):
           self.assertEqual(ascii(["Ň", "ĕ", "Ŵ"]),
                               "['\\u0147', '\\u0115', '\\u0174']")

#+end_src

#+RESULTS:

#+begin_src python :session ascii :exports results
unittest.main(exit=False)
#+end_src

#+RESULTS:
: ...
: ----------------------------------------------------------------------
: Ran 3 tests in 0.000s
: 
: OK

** The ~bin()~ function

~bin()~ function is used to convert integer to binary string.

#+begin_src python :result none :session bin_function
  import unittest

  class TestBinFunction(unittest.TestCase):

      def test_positive_integer(self):
          self.assertEqual(bin(10), '0b1010')

      def test_negative_integer(self):
          self.assertEqual(bin(-10), '-0b1010')

      def test_zero(self):
          self.assertEqual(bin(0), '0b0')

#+end_src

#+RESULTS:


#+begin_src python :session bin_function :export results
unittest.main(exit=False)
#+end_src

#+RESULTS:
: ...
: ----------------------------------------------------------------------
: Ran 3 tests in 0.000s
: 
: OK
 

** The ~bool~ function

The ~bool()~ function in Python is used to convert a value to a Boolean
(True or False) value.

#+begin_src python python :result none :session bool_function
  import unittest

  class TestBoolFunction(unittest.TestCase):
    def test_none(self):
      self.assertFalse(bool(None))

    def test_false(self):
      self.assertFalse(bool(False))

    def test_zero(self):
      self.assertFalse(bool(0))
      self.assertFalse(bool(0.0))

    def test_empty_sequence(self):
      self.assertFalse(bool([]))
      self.assertFalse(bool(()))
      self.assertFalse(bool({}))
      self.assertFalse(bool(""))

    def test_true(self):
      self.assertEqual(bool(True), True)

    def test_string_types(self):
      self.assertTrue(bool("hello"))
      self.assertFalse(bool(""))
      self.assertTrue(bool("0"))

    def test_numeric_type(self):
      self.assertTrue(bool(10) and bool(3.15) and bool(-5))

#+end_src

#+RESULTS:

#+begin_src python :session bool_function :export results
unittest.main(exit=False)
#+end_src

#+RESULTS:
: .............
: ----------------------------------------------------------------------
: Ran 13 tests in 0.000s
:
: OK
