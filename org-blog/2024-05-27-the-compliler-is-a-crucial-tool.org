#+BEGIN_EXPORT html
---
layout: post
title: Compiler role in programming
tagline: " like a crutial software tool"
permalink: /programming/compiler_role_in_programming.html
categories: [Programming, Tools, Compiler, Python]
tags: [programming, tools, compiler, python]
---
#+END_EXPORT

#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+TOC: headlines 2
#+PROPERTY:header-args :results output :exports both :eval no-export

* Introduction

/A compiler/ is a crucial software tool that typically translates
source code written in high-level programming languages (like as C,
C++, Java, or Python) into low-level languages like assembly or
machine code to create an executable program for computer's processor.

It performs tasks like error detection, syntax analysis, and
optimization to ensure the code is well-formed and optimized for the
hardware being used.

* A detailed description of the compilation process

Here's a more detailed description of what a compiler does:

- /Lexical Analysis/: The compiler reads the source code and converts it
  into a stream of tokens.

  /Tokens/ are basic language elements like keywords, operators,
  identifiers, and symbols;

- /Syntax Analysis (Parsing)/: The stream of tokens is analyzed to
  ensure that they follow the grammatical structure of the programming
  language. This phase produces a parse tree or syntax tree,
  representing the hierarchical structure of the source code;

- /Semantic Analysis/: The compiler checks the syntax tree for
  semantic errors, such as type mismatches, undeclared variables, and
  other logical errors. This ensures that the code makes sense within
  the context of the language's rules;

- /Intermediate Code Generation/: The compiler translates the syntax
  tree into an intermediate representation (IR), which is a low-level
  code that is easier to optimize and convert into machine code;

- /Optimization/: The intermediate code is optimized to improve
  performance and efficiency. This can involve removing redundant
  code, improving memory usage, and optimizing execution speed;

- /Code Generation/: The optimized intermediate code is then
  translated into machine code or bytecode, depending on the target
  platform. Machine code is specific to the computer's architecture,
  while bytecode is typically used for virtual machines;

- /Code Linking/: If the program consists of multiple modules or
  libraries, the compiler links them together to create a single
  executable file.

  Thus the compiler performs several functions:

  - Parser;
  - Analyzer;
  - Generator;
  - Optimizer.


* A History of the compiler

Early Development:

- 1940s - Assembly Language and Machine Code. Kathleen Booth, a
  British computer scientist, is often credited with writing one of
  the first assembly languages.;
- 1952 - First Compiler by Grace Hopper;

High-Level Programming Languages and Compiler:

- 1957 - FORTRAN Compiler (FORmula TRANslation);
- 1959 - COBOL Compiler (COmmon Business-Oriented Language);
- 1960 - LISP and Recursive Functions (LISt Processing);
- 1960 - ALGOL and Structured Programming (ALGOrithmic Language);

Advances in Compiler Theory and Technology:

- Compilers for high-level languages such as C, C++, and Pascal were
  developed in the 1970s and 1980s, enabling the development of more
  complex software systems;
- In recent years, the use of compilers has become even more common
  with the rise of virtual machines and the development of
  Just-in-Time (JIT) compilers. JIT compilers can optimize program
  performance at runtime by generating machine code tailored to the
  specific system.
* How works Python compiler?

Python is a high-level, interpreted programming language that does not
require a traditional compiler in the classical sense. Instead, it
uses an interpreter to execute the code directly. Here is how it
works:

- /Source Code/: Python source code is written in a human-readable
  format, using a syntax that is easy to understand and maintain. The
  code is composed of statements, functions, classes, and other
  constructs that define the program's behavior;

- /Interpreter/: When the Python code is executed, it is fed into the
  Python interpreter. The interpreter reads the source code line by
  line and executes it directly. This means that the code is not
  compiled into machine code beforehand, but rather interpreted and
  executed as it is read;

- /Bytecode/: Although Python does not use a traditional compiler, it
  does generate bytecode.

  #+begin_quote
  ~Bytecode~ is a form of instruction set designed for efficient
  execution by a software interpreter, consisting of compact numeric
  codes, constants, and references.
  #+end_quote

  Bytecode is an intermediate representation of the source code that
  is platform-independent and can be executed by the Python
  interpreter.

  #+begin_quote
  ~Platform-independent bytecode~ refers to the intermediate code
  generated by a compiler that can run on multiple operating systems
  without modification.
  #+end_quote

  This bytecode is generated by the Python compiler,
  which is part of the Python interpreter;

- /Execution/: The Python interpreter executes the bytecode, which
  involves various steps such as:

  - /Lexical Analysis/: The interpreter breaks the source code into
    individual tokens, such as keywords, identifiers, and symbols;

  - /Syntax Analysis/: The interpreter checks the syntax of the code to
    ensure it is valid and follows the Python syntax rules;

  - /Semantic Analysis/: The interpreter checks the semantics of the
    code, ensuring that the code is logically correct and follows the
    Python semantics;

- /Just-in-Time (JIT) Compilation/: For performance-critical parts of
  the code, Python can use JIT compilation. JIT compilation involves
  compiling the bytecode into machine code at runtime, which can
  improve performance;

- /Dynamic Typing/: Python is dynamically typed, which means that the
  data type of a variable is determined at runtime rather than at
  compile time.



* What is assembly
