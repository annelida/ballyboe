#+BEGIN_EXPORT html
---
layout: page
title: Algorithms in Computer Science
tagline: " one of the cornerstones of Computer Science"
permalink: /CS/fundamentals/algorithms-in-computer-science.html
categories: [Computer Science, Python, Literate Programming]
tags: [Computer Science, Python, Literate Programming]
---
#+END_EXPORT
#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args+ :results output pp
#+PROPERTY: header-args+ :eval no-export
#+TOC: headlines 2

* Preamble

/Algorithm/ is a set of well-defined instructions used to solve a
problem or perform a specific task. It is a step-by-step plan that
specifies the actions to be taken, the order in which they should be
executed, and the conditions under which each step should be
performed.

#+begin_quote
An /algorithm/ is a finite sequence of well-defined instructions that
can be used to solve a computational problem. It provides a
step-by-step procedure that convert an input into a desired output.
#+end_quote

#+begin_quote
If we want to tell a computer to do something, we have to write a
computer program that will tell the computer, step-by-step, exactly
what we want it to do and how we want it to do it. This step-by-step
program will need planning, and to do this we use an algorithm.
#+end_quote



* Glossary

/Instruction/ A single action that can be performed by a computer
processor.

/Flowchart/ A diagram that shows a process, made up of boxes
representing steps, decision, inputs and outputs.

/Pseudocode/ A method of writing up a set of instructions for a
computer program using plain natural language. This is a good way of
planning a program before coding.

* The application area for the algorithms

Algorithms are fundamental to computer science and are used in various
applications. They are essential for solving complex computational
problems efficiently and effectively. They provide a systematic
approach to:

- /Solving problems/: Algorithms break down problems into smaller,
  manageable steps;
- /Optimizing solutions/: Algorithms find the best or near-optimal
  solutions to problems.
- /Automating tasks/: Algorithms can automate repetitive or complex
  tasks, saving time and effort.


* Examples of Algorithms

- /Sorting algorithms/: Merge sort, Quick sort, Heap sort;
- /Searching algorithms/: Linear search, Binary search, Hashing;
- /Graph algorithms/: Dijkstra’s algorithm, Prim’s algorithm,
  Floyd-Warshall algorithm;
- /String matching algorithms/: Knuth-Morris-Pratt algorithm,
  Boyer-Moore algorithm.

* Creating a blueprint

#+begin_quote
It is important to plan out the solution to a problem to make sure
that it will be correct. Using /computational thinking/ and
/decomposition/ we can break down the problem into smaller parts and
then we can plan out how they fit back together in a suitable order to
solve the problem. This order can be represented as an algorithm. An
algorithm must be clear. It must have /a starting point/, /a finishing
point/ and /a set of clear instructions/ in between.
#+end_quote

/Computational thinking/ A problem-solving method using computer
science techniques, where possible solutions are developed and
presented in a way that can be understood by humans and computers.

/Decomposition/ The breaking down of a system into smaller parts that
are easier to understand, program and maintain.

An algorithm must be clear. It must have a starting point, a finishing
point and a set of clear instructions in between.

** How do Algorithms Work?

Algorithms typically follow a logical structure:

- /Input/: The algorithm receives input data;
- /Processing/: The algorithm performs a series of operations on the
  input data;
- /Output/: The algorithm produces the desired output.


** Searching Algorithms

https://www.geeksforgeeks.org/searching-algorithms/?ref=lbp

/Searching Algorithms/ are used to locate specific items within a
collection of data. The primary objective of searching is to determine
whether the desired element exists within the data, and if so, to
identify its precise location or retrieve it.

/Target Element/: The specific item or element being searched for
within the data collection. This target could be a value, a record, a
key.

/Search Space/: The entire collection of data within which the target
element is being searched.

/Complexity/: The level of difficulty or efficiency of the algorithm,
often measured in terms of time and space requirements.

The simplest search algorithm is /Sequential Search/ also known as
/linear search/: look at all items one after the other, until you find
the one you want—or check all items to realize it’s not there.

#+begin_example
Suppose we have an array [] and we want to find the element 39.
Here's how the sequential search would work:
Start at index 0 and compare 13 with 39. No match.
Move to index 1 and compare 9 with 39. No match.
Move to index 2 and compare 21 with 39. No match.
Move to index 3 and compare 15 with 39. No match.
Move to index 4 and compare 39 with 39. Match found!
#+end_example

** Sorting algorithms

https://www.geeksforgeeks.org/selection-sort/?ref=lbp

/Sorting algorithms/: are used to rearrange a given array or list of
elements according to a comparison operator on the elements. The
/comparison operator/ is used to decide the new order of elements in
the respective data structure. Sorting means /reordering/ of all the
elements either in ascending or in descending order.

***  Selection sort

/Selection sort/ is a simple and efficient sorting algorithm that
works by repeatedly selecting the smallest (or largest) element from
the unsorted portion of the list and moving it to the sorted portion
of the list. This process is repeated for the remaining unsorted
portion until the entire list is sorted.

*** Bubble sort

/Bubble sort/ is an algorithm that sorts an array from the lowest
value to the highest value.

How it works:

- Go through the array, one value at a time;

- For each value, compare the value with the next value;

- If the value is higher than the next one, swap the values so that
  the highest value comes last;

- Go through the array as many times as there are values in the array.


* Representation of the algorithm in pseudocode

An algorithm can be represented in pseudocode, which is a step-by-step
description of the algorithm in a code-like structure using plain
English text.

/Syntax-Free/: Pseudocode does not use any specific programming language
syntax, making it easy to understand and read for anyone with basic
programming knowledge.

/Reserved Keywords/: Pseudocode uses reserved keywords like IF, WHILE,
FOR, and CASE to describe control flow and decision-making.

#+begin_example
# search of  the lowest value in an array
Variable 'minVal' = array[0]
For each element in the array
    If current element < minVal
        minVal = current element
#+end_example

* Types of algorithms

- /Brute Force Algorithm/: A simple algorithm that checks all possible
  solutions to a problem until it finds the correct one;
- /Recursive Algorithm/: An algorithm that breaks down a problem into
  smaller sub-problems, solving each one recursively until the base
  case is reached;
- /Randomized Algorithm/: An algorithm that uses random numbers to make
  decisions during its execution;
- /Sorting Algorithm/: An algorithm that arranges elements in a specific
  order, such as ascending or descending;
- /Searching Algorithm/: An algorithm that locates a specific item in a
  data structure;
- /Hashing Algorithm/: An algorithm that uses a hash function to map
  keys to values in a data structure;

  
