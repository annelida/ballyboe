#+BEGIN_EXPORT html
---
layout: page
title: The Origin and Evolution of Programming Languages
tagline: " and Getting Started with Python"
permalink: /cs/python-programming-language-intro.html
categories: [cs, software development, python]
tags: [cs, software development, python]
---
#+END_EXPORT
#+STARTUP: showall indent
#+OPTIONS: tags:nil num:nil \n:nil @:t ::t |:t ^:{} _:{} *:t
#+PROPERTY: header-args :exports both
#+PROPERTY: header-args+ :results output pp
#+PROPERTY: header-args+ :eval no-export
#+PROPERTY: vizier-thread-id thread_NZcAE9JAYKhKc4uej7g5k6Dx
#+PROPERTY: vizier-assistant-id asst_9U8N72u9uVQesQNNjgOLJOu8
#+TOC: headlines 2

* Zero-shot                                                        :noexport:
Could you please suggest a list of questions to thoroughly explore the
topic “The Origin and Evolution of Programming Languages” and achieve
a comprehensive understanding?

#+begin_src markdown
  Absolutely! Here is a list of questions designed to help you explore
  the topic "The Origin and Evolution of Programming Languages"
  comprehensively:

  ,*General Overview*
  1. What is a programming language, and what are its core components?
  2. How do programming languages translate human-readable code into
     machine-readable instructions?
  3. What are the major categories of programming languages (e.g.,
     procedural, functional, object-oriented, declarative)?

  ,*Historical Context*
  4. What were the first programming languages developed, and what
     problems were they designed to solve?
  5. How did early programming languages like Assembly, Fortran, and
     COBOL contribute to the development of modern computing?
  6. Who are some of the key figures in the history of programming
     languages, and what were their contributions?

  ,*Evolution Over Time*
  7. How did programming languages evolve from low-level to high-level
     languages?
  8. What role did the development of hardware play in the evolution of
     programming languages?
  9. How did the introduction of the Internet and web technologies
     influence the development of programming languages?
  
  ,*Paradigms and Styles*
  10. What are the differences between imperative and declarative
      programming languages?
  11. How do object-oriented languages differ from procedural languages?
  12. What is functional programming, and why has it gained popularity
      in recent years?

  ,*Syntax and Semantics*
  13. How do syntax and semantics differ in the context of programming
      languages?
  14. What are the common syntactic structures found in most programming
      languages (e.g., loops, conditionals, functions)?
  15. How do different programming languages handle memory management
      and type systems?

  ,*Notable Languages and Innovations*
  16. How did the C programming language influence the design of many
      subsequent languages?
  17. What are some of the key innovations introduced by languages like
      Java, Python, and JavaScript?
  18. How do modern languages like Rust and Swift address the
      limitations of their predecessors?

  ,*Community and Ecosystem*
  19. How do open-source communities contribute to the evolution of
      programming languages?
  20. What is the role of standard libraries and frameworks in the
      adoption and evolution of a programming language?

  ,*Trends and Future Directions*
  21. What are the current trends in programming languages (e.g.,
      systems programming, data science, web development)?
  22. How are programming languages adapting to multi-core and
      distributed systems?
  23. What is the future of programming languages with the rise of
      artificial intelligence and machine learning?

  ,*Practical Considerations*
  24. How do developers choose a programming language for a specific
      project or application?
  25. What are the trade-offs between using a general-purpose language
      vs. a domain-specific language?
  26. How do factors like performance, readability, and community
      support influence the choice of a programming language?

  ,*Learning and Adoption*
  27. What are the best practices for learning new programming
      languages?
  28. How has the approach to teaching programming languages evolved in
      academic and industry settings?
  29. What resources are available for keeping up with the latest
      developments in programming languages?

  ,*Comparative Analysis*
  30. How do popular programming languages compare in terms of syntax,
      usability, and application domains?
  31. What lessons can be learned by comparing the design philosophies
      of different programming languages?
  32. How do different languages handle concurrency and parallelism?

  This list should provide a comprehensive framework to explore the
  origin and evolution of programming languages thoroughly. Feel free to
  dive deeper into any particular area based on your interests and
  findings!
#+end_src

* Preamble

Programming languages are the foundation of modern computing, bridging
the gap between human logic and machine execution. This article delves
into the origins and evolution of programming languages, uncovering
the key milestones and innovations that have shaped their
development. Additionally, I provide a beginner-friendly introduction
to Python, one of the most popular and versatile programming languages
today.

* General overview
** What is a programming language, and what are its core components?

*A programming language* is a system of notation for writing computer
programs.

#+begin_src markdown
  A programming language is a formal set of instructions that can be
  used to produce various kinds of output, which usually involves
  creating software that performs specific tasks. Essentially, a
  programming language provides a means for humans to communicate with
  computers, allowing us to write programs that can be executed by the
  machine.

  The core components of a programming language include:

  - **Syntax:** This refers to the set of rules that defines the
    combinations of symbols that are considered to be correctly
    structured programs in that language. Syntax dictates the proper
    arrangements of keywords, operators, and syntax elements like
    parentheses and semicolons.

  - **Semantics:** While syntax refers to the structure, semantics
    refers to the meaning of the constructs within the language. It
    defines what actions are performed when specific statements are
    executed.

  - **Lexical Structure:** This involves the set of basic symbols from
    which the language programs are constructed. This includes keywords,
    operators, identifiers, literals, and punctuation.

  - **Data Types:** These are the classifications of data items. Every
    programming language supports various data types, such as integers,
    floats, characters, strings, and more complex types like arrays and
    structures.

  - **Variables:** They are used to store data values. Variables in a
    programming language provide a way to label data for manipulation
    and use throughout a program.

  - **Operators:** These are symbols that specify which operations to
    perform on the data. Common operators include arithmetic operators
    (+, -, *, /), relational operators (==, !=, >, <), and logical
    operators (&&, ||, !).

  - **Control Structures:** These dictate the order in which statements
    and instructions are executed. Common control structures include
    loops (for, while), conditionals (if, else), and switch-case
    structures.

  - **Functions/Procedures:** These are reusable blocks of code that
    perform a specific task. Functions (or procedures) help in breaking
    down a program into manageable parts and allow code to be reused.

  - **Libraries/Modules:** These are collections of pre-written code
    that can be included in your programs to extend their functionality
    without having to rewrite code. They help in maintaining and
    organizing the code by providing common functionalities.

  - **Environment/Runtime:** The environment includes everything needed
    to write, compile, and execute programs. This might consist of an
    integrated development environment (IDE), a text editor, a compiler
    or interpreter, and debugger tools.

  Here is a basic example in Python to illustrate some of these
  components: ```org
  ,#+begin_src python
  # Variable Assignment
  x = 10 y = 5

  # Function Definition
  def add(a, b): # Perform addition and return result return a + b

  # Control Structure: Conditional
  if x > y: # Control Structure: Loop for i in range(3): # Function Call
      result = add(x, y) print(f"Addition result: {result}")
#+end_src
```

In this example:
- **Variables:** `x` and `y` are variables.
- **Function:** `add` is a function that takes two parameters and
  returns their sum.
- **Control Structures:** Includes an `if` statement and a `for` loop.
- **Operators:** `>` (greater than) is a relational operator used in
  the `if` statement.
- **Libraries/Modules:** The `print` function and the `range` function
  are part of Python's standard library.

This basic illustration covers the essential components of a
programming language and helps in understanding how these elements
work together to form executable programs.  #+end_src

** How do programming languages translate human-readable code into machine-readable instructions?
#+begin_src markdown
  Programming languages translate human-readable code into
  machine-readable instructions through a series of systematic steps
  involving compilation or interpretation (or sometimes a combination of
  both). This process generally involves several stages, such as lexical
  analysis, syntax analysis, semantic analysis, optimization, and code
  generation.

  Here's a high-level overview of how this process works:

  ,*Compilation and Interpretation*

  1. **Compilation:** A compiler translates the entire source code of a
     program into machine code before executing it. This involves
     multiple intermediate steps and generates an executable file.
     - **Languages:** C, C++, Rust

  2. **Interpretation:** An interpreter translates the source code into
     machine code line-by-line and executes it immediately. There is no
     separate executable file generated.
     - **Languages:** Python, JavaScript, Ruby

  Some languages, like Java, use a hybrid approach involving both
  compilation and interpretation:
  - **Java:** Source code is compiled into an intermediate bytecode by
    the Java Compiler (`javac`). This bytecode is then interpreted or
    just-in-time (JIT) compiled to machine code by the Java Virtual
    Machine (JVM) during execution.

  ,*Stages of Translation*

  ,**1. Lexical Analysis (Scanning)**
     - **Input:** Source code
     - **Output:** Tokens
     - **Description:** The lexical analyzer scans the source code and
  breaks it down into tokens, which are the smallest units of the
  language, like keywords, operators, identifiers, and literals.  ```org
  ,#+begin_src python
  # Python source code
  x = 10 + y

  # Tokens
  [Identifier(x), Assignment(=), Integer(10), Operator(+),
  Identifier(y)]
#+end_src
```

**2. Syntax Analysis (Parsing)**
   - **Input:** Tokens
   - **Output:** Abstract Syntax Tree (AST)
   - **Description:** The syntax analyzer (parser) checks the tokens
     against the grammatical rules of the programming language to form
     a hierarchical structure called an Abstract Syntax Tree (AST).
```org
#+begin_src python
# Example of Abstract Syntax Tree (AST)
AST:
    Assignment
      - Identifier (x)
      - Add
          - Integer (10)
          - Identifier (y)
#+end_src
```

**3. Semantic Analysis**
   - **Input:** AST
   - **Output:** Annotated AST (or Symbol Table)
   - **Description:** The semantic analyzer verifies the semantic
     consistency of the AST. This step involves checking variable
     declarations, type checking, and ensuring that the operations are
     semantically correct.
```org
#+begin_src python
# Example: Semantic analysis checks
# Ensure 'y' is declared and has a compatible type with the operation
#+end_src
```

**4. Optimization (Optional)**
   - **Input:** Annotated AST or Intermediate Representation (IR)
   - **Output:** Optimized IR
   - **Description:** The optimizer improves the IR or AST to make the
     code more efficient, without changing its behavior. This may
     involve removing redundant code, inlining functions, and other
     performance enhancements.
```org
#+begin_src python
# Example: Optimization
# Unoptimized code
for i in range(0, 1000):
    sum = 0
    sum += i

# Optimized code
# The loop isn't doing anything productive, so it might be removed.
#+end_src
```

**5. Code Generation**
   - **Input:** Optimized IR or AST
   - **Output:** Machine code or bytecode
   - **Description:** The code generator translates the optimized IR
     or AST into target machine code, often specific to a certain
     architecture (x86, ARM, etc.), or into an intermediate bytecode
     (for languages like Java and Python).
```org
#+begin_src python
# Example: Machine code (conceptual)
MOV R1, 10
ADD R1, y

# Java bytecode example
0: iconst_10
1: istore_1
2: iload_2
3: iload_1
4: iadd
5: istore_1
#+end_src
```

**6. Linking (for compiled languages)**
   - **Input:** Machine code
   - **Output:** Executable file
   - **Description:** The linker combines various machine code files
     and libraries into a single executable file and resolves
     references between them.
```org
#+begin_src python
# Example: Linking in C/C++
# Combines object files (main.o, utils.o) into final executable (program.exe)
#gcc main.o utils.o -o program.exe
#+end_src
```


*Further Reading and Resources*
- [Compilers: Principles, Techniques, and Tools (Dragon
  Book)](https://www.pearson.com/store/p/compilers-principles-techniques-and-tools/P100000224214)
- [Python's AST Module](https://docs.python.org/3/library/ast.html)
- [Structure and Interpretation of Computer
  Programs](https://mitpress.mit.edu/sites/default/files/sicp/index.html)
- [LLVM Project](https://llvm.org/)

This detailed process illustrates how human-readable code is
meticulously translated into machine-readable instructions, enabling
the proper execution of software tasks.  #+end_src

** Is Python an interpreted or compiled programming language?
#+begin_src markdown
  Python is primarily known as an interpreted language, but it exhibits
  characteristics of both interpreted and compiled languages.

  ,**Interpreted Language**

  - **Interpreter Execution:** Python code is executed line by line
    using an interpreter, specifically the CPython interpreter, which is
    the default and most widely used implementation of Python.
  - **Portability:** Python code can be run on any system that has a
    compatible interpreter, without the need to compile the code into
    machine-specific binaries.
  - **Dynamic Typing:** Python uses dynamic typing, checking types at
    runtime, which aligns well with interpreted execution.

  ,**Compilation in Python**

  While Python is primarily interpreted, it also involves a compilation
  step:
  - **Bytecode Compilation:** Before execution, Python source code
    (`.py` files) is compiled into an intermediate bytecode (`.pyc`
    files). This bytecode is a lower-level, platform-independent
    representation of the source code.
  - **Virtual Machine Execution:** The bytecode is then executed by the
    Python Virtual Machine (PVM). This two-step process is why Python
    can sometimes be considered "compiled" to bytecode but not to native
    machine code.

  Here is a step-by-step illustration of how Python code is executed:

  ,**1. Source Code:** ```org
  ,#+begin_src python
  # Example: hello.py
  print("Hello, World!")
#+end_src
```

**2. Bytecode Compilation:**
- The Python interpreter first compiles the source code to bytecode
  (.pyc files located in the `__pycache__` directory).

**3. Execution by Virtual Machine:**
- The bytecode is then executed by the PVM.

Here's a practical example showing how Python handles bytecode
compilation:

```org
#+begin_src python :results output
  # This program will generate and cache bytecode in the __pycache__
  directory def greet(): print("Hello, World!")

  greet()
#+end_src
```

You can manually inspect the compiled bytecode with tools like
`py_compile` or using the `compileall` module to precompile a
directory of Python files: ```org

#+begin_src python :results output
import py_compile

# Compile a specific file to bytecode
py_compile.compile('hello.py')

import compileall

# Compile all .py files in the current directory
compileall.compile_dir('.')
#+end_src
```

**Hybrid Nature:**
- **JIT Compilation:** Some implementations of Python, like PyPy,
  include Just-In-Time (JIT) compilation, which translates bytecode to
  native machine code at runtime for performance improvements.
- **Cython:** Cython is a superset of Python that allows for static
  type declarations and compilation to C, providing another way to
  compile Python code for performance gains.

**Summary:**
- **Primary Execution Model:** Python is primarily interpreted, using
  a bytecode compilation step.
- **Intermediate Bytecode:** Python source code is compiled to
  bytecode, which is then interpreted.
- **Advanced Implementations:** Other implementations like PyPy use
  JIT compilation, and tools like Cython provide means to compile
  Python code to optimized C code.

**Further Reading and Resources:**
- [Python's official documentation on execution
  model](https://docs.python.org/3/reference/executionmodel.html)
- [Python Bytecode](https://en.wikipedia.org/wiki/Bytecode#Python)
- [Cython](https://cython.org/)
- [PyPy](https://www.pypy.org/)

This hybrid nature of Python allows it to be flexible and portable,
suitable for both rapid development and performance-critical
applications.  #+end_src

** What are the major categories of programming languages (e.g. procedural, functional, object-oriented, declarative)? 


#+begin_src markdown
     Programming languages can be categorized based on their paradigms and
     styles of programming. Here are the major categories:

     ,**1. Procedural Programming Languages**

     ,**Definition:** These languages are based on the concept of procedure
     calls, where the program is a sequence of statements that change the
     program's state.
     ,**Key Features:**
     - Sequence of instructions.
     - Use of variables to hold data.
     - Use of loops and conditionals for flow control.

  ,**Examples:** C,
     Pascal, Ada **Code Example:
     ,** C ```org
     ,#+begin_src c
     #include <stdio.h>

     // Function definition int add(int a, int b) { return a + b; }

     int main() { int result = add(10, 5); printf("Result: %d\n", result);
         return 0; }
#+end_src
```

,**2. Object-Oriented Programming (OOP) Languages**

,**Definition:** These languages are organized around objects rather
than actions and data rather than logic.

**Key Features:**
- Encapsulation: Bundling data and methods that operate on the data.
- Inheritance: Defining new classes based on existing ones.
- Polymorphism: Using a single interface to represent different data
  types.
- Abstraction: Hiding complex implementation details.

**Examples:** Java, C++, Python
**Code Example:** Python
```org
#+begin_src python
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        pass

class Dog(Animal):
    def speak(self):
        return "Woof!"

dog = Dog("Buddy")
print(dog.speak())
#+end_src
```

**3. Functional Programming (FP) Languages**

,**Definition:** These languages treat computation as the evaluation
of mathematical functions and avoid changing-state and mutable data.

**Key Features:**
- First-class functions: Functions are treated as first-class citizens.
- Pure functions: Functions have no side effects.
- Higher-order functions: Functions that take other functions as
  arguments or return them as results.
- Recursion: Using functions to loop instead of iterative constructs.
**Examples:** Haskell, Lisp, Erlang
**Code Example:** Haskell
```org
#+begin_src haskell
-- Function definition
add :: Int -> Int -> Int
add x y = x + y

main = do
    let result = add 10 5
    print result
#+end_src
```

**4. Declarative Programming Languages**

**Definition:** These languages express the logic of a computation
without describing its control flow.

**Key Features:**
- Specify *what* the program should accomplish rather than *how* to
  accomplish it.
- Include sub-paradigms like logic programming and constraint
  programming.
**Examples:** SQL, Prolog, HTML
**Code Example:** SQL
```org
#+begin_src sql
-- SQL Query to retrieve all records from a table
SELECT * FROM employees WHERE department = 'Sales';
#+end_src
```

**4.1 Logic Programming Languages**

**Definition:** These are a subset of declarative languages that use
formal logic to express computations.

**Key Features:**
- Use of facts, rules, and queries.
- Resolution-based inference engines.
**Examples:** Prolog, Datalog
**Code Example:** Prolog
```org
#+begin_src prolog
% Facts
parent(john, mary).
parent(mary, andrew).

% Rule
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).

% Query
?- grandparent(john, andrew).
#+end_src
```

**4.2 Constraint Programming Languages**

**Definition:** These languages solve problems by stating constraints
that must be satisfied, rather than by specifying a detailed procedure.
**Key Features:**
- Variables, domains, and constraints.
- Constraint satisfaction problems (CSP).
**Examples:** MiniZinc, Prolog (with constraint libraries)
**Code Example:** MiniZinc
```org
#+begin_src minizinc
% Variables
var 1..10: x;
var 1..10: y;

% Constraints
constraint x + y == 10;

% Solve
solve satisfy;

output ["x = ", show(x), ", y = ", show(y)];
#+end_src
```

**5. Scripting Languages**

**Definition:** These are languages designed for integrating and
**communicating with other programming languages.

**Key Features:**
- Often used for automating tasks.
- Interpreted rather than compiled.
- Dynamic typing and high-level data structures.
**Examples:** Python, JavaScript, Perl
**Code Example:** JavaScript
```org
#+begin_src javascript
// Function definition
function add(a, b) {
    return a + b;
}

let result = add(10, 5);
console.log("Result:", result);
#+end_src
```

**6. Domain-Specific Languages (DSLs)**

**Definition:** These are languages specialized to a particular application domain.
**Key Features:**
- Designed for specific tasks.
- More expressive and concise within their domain.
**Examples:** SQL (database queries), HTML (web page layout), Verilog (hardware description)
**Code Example:** HTML
```org
#+begin_src html
  <!DOCTYPE html>
  <html>
  <head>
      <title>Sample Page</title>
  </head>
  <body>
      <h1>Hello, World!</h1>
  </body>
  </html>
  ```

  ,**Further Reading and Resources** - [Structure and Interpretation of
  Computer
  Programs](https://mitpress.mit.edu/sites/default/files/sicp/index.html)
  - [Programming Language Concepts by Peter Van Roy and Seif
  Haridi](https://mitpress.mit.edu/books/concepts-techniques-and-models-computer-programming)
  - [Python's official documentation](https://docs.python.org/3/) -
  [JavaScript's MDN Web
  Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) -
  [SQL Tutorial](https://www.w3schools.com/sql/)

  This classification helps in understanding the various styles and
  methodologies that different programming languages embody, enabling
  developers to choose the right tool for the task at hand.
#+end_src

** Which category does Python belong to: procedural, functional, object-oriented, or declarative?
Provide, please a code examples in Org-babel format.

#+begin_src markdown
  Python is a multi-paradigm programming language, which means it
  supports multiple programming paradigms: procedural, object-oriented,
  functional, and to a lesser extent, declarative programming. Here are
  examples demonstrating each paradigm in Python:

  ,**1. Procedural Programming**

  ```org
  ,#+begin_src python
  # Procedural style code

  # Function definition
  def greet(name): print(f"Hello, {name}!")

  # Main procedure
  if __name__ == "__main__": greet("World") # Function call

      # Loop to print iterations
      for i in range(3):
          print(f"Iteration {i}")
#+end_src
```

**2. Object-Oriented Programming (OOP)**

```org
#+begin_src python
# Object-Oriented style code

# Class definition
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        pass

# Subclass definition
class Dog(Animal):
    def speak(self):
        return "Woof!"

# Object instantiation
dog = Dog("Buddy")
print(dog.speak())
#+end_src

#+RESULTS:
: Woof!

```

**3. Functional Programming**

```org
#+begin_src python
# Functional style code

# Higher-order function
def apply_function(func, value):
    return func(value)

# Lambda function definition
increment = lambda x: x + 1

# Use of map and filter with lambda functions
numbers = [1, 2, 3, 4, 5]
squared = map(lambda x: x * x, numbers)
evens = filter(lambda x: x % 2 == 0, numbers)

print(list(squared))  # Output: [1, 4, 9, 16, 25]
print(list(evens))    # Output: [2, 4]
#+end_src
```

**4. Declarative Programming (Limited, using SQLAlchemy ORM)**

```org
#+begin_src python
# Declarative style code using SQLAlchemy ORM

from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Declarative base class
Base = declarative_base()

# User class definition with SQLAlchemy ORM
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(String)

# Database engine creation
engine = create_engine('sqlite:///:memory:')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

# Adding a new user declaratively
new_user = User(name='Alice')
session.add(new_user)
session.commit()

# Querying the user
user = session.query(User).first()
print(user.name)  # Output: Alice
#+end_src
```

**Summary:**
- **Procedural Programming:** Python can be used in a procedural
  style, where code is organized into functions and sequentially
  executed instructions.
- **Object-Oriented Programming (OOP):** Python supports OOP with
  classes and objects, encapsulation, inheritance, and polymorphism.
- **Functional Programming:** Python has first-class functions,
  supports higher-order functions, and provides constructs like `map`,
  `filter`, and lambdas, making it suitable for functional
  programming.
- **Declarative Programming (Limited):** Python support for
  declarative programming is more limited and typically achieved
  through specific libraries and frameworks, such as SQLAlchemy for
  ORM.

This flexibility allows developers to choose the most suitable
paradigm or mix and match paradigms to best suit the needs of their
application.  #+end_src

* Historical Context
** What were the first programming languages developed, and what problems were they designed to solve?

#+begin_src markdown
  The first programming languages were developed to address the need for
  more efficient and effective ways to program early computers. Each
  language focused on solving specific problems related to readability,
  ease of use, or domain specificity. Here's a list of some of the
  pioneering programming languages and the problems they aimed to solve:

  ,**1. Assembly Language (1940s - Early 1950s)**

  ,**Problem Addressed:** Programming with machine language (binary code)
  was extremely difficult, error-prone, and not
  human-readable. Programmers needed to write detailed instructions
  using binary codes, which made even simple tasks cumbersome.

  ,**Approach:** Assembly language was developed as a low-level
  programming language that provides a set of mnemonics (human-readable
  symbols) to represent machine-level instructions. Each mnemonic
  corresponds directly to a binary instruction, making the programming
  process more manageable.

  ,**Usage Example:** ```org
  ,#+begin_src asm
  MOV AX, 5 ; Move the value 5 into register AX ADD AX, BX ; Add the
  value in register BX to AX INT 21h ; Interrupt to invoke operating
  system routines
#+end_src
```

,**2. Fortran (1957)**

,**Problem Addressed:** Scientists and engineers needed a language
that could simplify the process of performing complex mathematical and
scientific computations. The language needed to handle mathematical
formulas and data efficiently.

**Approach:** Fortran (FORmula TRANslation) was developed, becoming
one of the first high-level programming languages. It was optimized
for numerical computation and scientific computing.

**Usage Example:**
```org
#+begin_src fortran
      PROGRAM HELLO
      PRINT *, 'Hello, World!'
      END
#+end_src
```

**3. Lisp (1958)**

**Problem Addressed:** Research in artificial intelligence (AI)
required a language capable of symbolic computation, list processing,
and flexible data manipulation. Existing languages were not
well-suited to these tasks.

**Approach:** Lisp (LISt Processing) was created by John McCarthy. It
provided powerful features for symbolic computation, recursion, and
dynamic typing, making it ideal for AI research.

**Usage Example:**
```org
#+begin_src lisp
(defun factorial (n)
  (if (<= n 1)
      1
      (* n (factorial (1- n)))))
      
(print (factorial 5))  ; Output: 120
#+end_src
```

**4. COBOL (1959)**

**Problem Addressed:** The business community needed a language that
could handle data processing tasks, such as payroll processing,
inventory management, and database management. The language needed to
be readable by non-programmers.

**Approach:** COBOL (COmmon Business-Oriented Language) was developed
with a focus on business data processing. Its syntax resembles
English, making it more accessible to business professionals.

**Usage Example:**
```org
#+begin_src cobol
       IDENTIFICATION DIVISION.
       PROGRAM-ID. HELLO-WORLD.
       PROCEDURE DIVISION.
           DISPLAY 'Hello, World!'.
           STOP RUN.
#+end_src
```

**5. ALGOL (1958-1960)**

**Problem Addressed:** The scientific and academic community required
a language for algorithmic description and complex computations, with
a strong emphasis on structure and readability. The lack of
standardization in early languages was also an issue.

**Approach:** ALGOL (ALGOrithmic Language) introduced many concepts
that influenced subsequent languages, including block structure,
scope, and recursion. It aimed for clarity in expressing algorithms.

**Usage Example:**
```org
#+begin_src algol
BEGIN
  INTEGER i;
  FOR i := 1 TO 10 DO
    OUTTEXT("Hello, World!");
  END;
END.
#+end_src
```

**6. BASIC (1964)**

**Problem Addressed:** There was a need for an easy-to-learn
programming language suitable for beginners and education. Existing
languages were complex and not user-friendly for novice programmers.

**Approach:** BASIC (Beginner's All-purpose Symbolic Instruction Code)
was designed to be simple and accessible, providing an introduction to
programming and enabling widespread use.

**Usage Example:**
```org
#+begin_src basic
10 PRINT "Hello, World!"
20 END
#+end_src
```

**Summary:**

- **Assembly Language:** Simplified direct machine code programming
  with mnemonics.
- **Fortran:** Facilitated numerical and scientific computation.
- **Lisp:** Enabled symbolic computation, AI research, and list
  processing.
- **COBOL:** Addressed business data processing with readable syntax.
- **ALGOL:** Introduced structured programming for algorithmic clarity.
- **BASIC:** Made programming accessible to beginners and in educational settings.

Each of these early programming languages was designed to address
specific problems and requirements of their respective domains, paving
the way for the development of modern programming languages.

**Further Reading and Resources:**

- [The Art of Assembly
  Language](https://www.amazon.com/Art-Assembly-Language-Randall-Hyde/dp/1593272073)
- [The Fortran Programming Language](https://fortran-lang.org/)
- [Structure and Interpretation of Computer Programs
  (SICP)](https://mitpress.mit.edu/sites/default/files/sicp/index.html)
- [COBOL Standard](https://www.iso.org/standard/51612.html)
- [The ALGOL Language](https://plato.stanford.edu/entries/algol/)
- [Introduction to Programming with
  BASIC](https://www.computerhistory.org/revolution/software/15/305)
  
These references provide deeper insights into the origins and features
of the first programming languages.  #+end_src





* Notes                                                            :noexport:


A *programming paradigm* is a method or style of programming that
defines a set of principles, techniques, and patterns for structuring
code to solve problems on a computer. Programming paradigms can be
classified into different categories, such as: Imperative
paradigm. Declarative paradigm. Object-oriented paradigm.

#+begin_quote
In *object-oriented* programming language a programming paradigm based
on the concept of "objects", which may contain data, in the form of
fields, often known as attributes; and code, in the form of
procedures, often known as methods. For example, a person is an object
which has certain properties such as height, gender, age, etc.
#+end_quote

* Definitions

** What is a programming language whatever?

#+begin_quote
A programming language is a set of instructions used by programmers to
communicate with computers.
#+end_quote

** What are the components of a Python programming language?

- /Character Set/: The character set in Python includes letters (A-Z or
  a-z), digits (0-9), special symbols (such as ., @, #, %, etc.), and
  white spaces (like blank space, horizontal tab, carriage return, new
  line, and form feed);
- /Data Types/: Python supports various data types, which are the types
  of values that can be stored and manipulated in a program. The
  type() function is used to get the data type of any object or
  variable;
- /Constants/: are fixed values that remain unchanged during the
  execution of a program and are used in assignment statements;
- /Variables/: are data items whose values may vary during the
  execution of the program;
- /Keywords/: are words that have been assigned specific meanings in
  the context of Python language programs and should not be used as
  variable names to avoid problems. There are 35 keywords in the
  Python programming language;
- /Expressions/: are phrases of code that Python evaluates to produce
  a value;
- /Statements/: are logical units of code that can be executed by the
  Python interpreter. They can be assignment statements, conditional
  statements, loops, or function calls;
- /Comments/: are additional readable information that is ignored by the
  Python interpreter. They begin with the # symbol and end with the
  end of the physical line;
- /Functions/: are blocks of code that can be called multiple times from
  different parts of a program;
- /Blocks and identation/: Python uses indentation to mark blocks of
  code. This is a distinctive feature of Python and is used to define
  the scope of control structures like if-else statements and loops;
- /Operators/: are symbols or keywords that perform mathematical,
  logical, or comparison operations on data;
- /Control Structures/: are used to control the flow of a Python
  program. They include conditionals (if-else statements), loops
  (for/while statements), and exceptions (try/except blocks.


** What is Python programming language?

#+begin_quote
/Python/ is an interpreted, object-oriented, high-level /programming
language/ with dynamic semantics.
#+end_quote

** What is interpretation in programming?

#+begin_quote
/Interpretation/ in programming refers to the process where a computer
program, known as an interpreter, directly executes instructions
written in a programming or scripting language without the need for
prior compilation into machine code.
#+end_quote

** What is compilation in programming?

#+begin_quote
/Compilation/ in programming refers to the process of translating a
program written in a high-level programming language, known as source
code, into object code that a computer can understand.
#+end_quote

** Is Python interpreted or compiled programming language?

Python is both an interpreted and compiled language.

In /Interprereted Programming Language/ the source code is executed by
an interpreter which translates code into machine code on the fly.

/Compilation/ is the process of translating source code written in a
high-level programming language into a lower-level language, such as
machine code, that can be executed by a computer.

Python allows you to save the compiled bytecode to .pyc files. This
speeds up startup time on subsequent runs since the source code
doesn't need to be recompiled. When you are execute any Python script
the =.pyc= (compiled bytecode file) generated. If you run the script
again (without making changes) =.pyc= file will not be
regenerated. After execution modified script =.pyc= the file will be
generated again. Compilation carried out to increase the speed of
program execution.

** What is programming paradigm?

#+begin_quote
A model of something, or very clear and typical example of something.
#+end_quote

#+begin_quote
A /programming paradigm/ is a method or style of programming that
defines a set of principles, techniques, and patterns for structuring
code to solve problems on a computer.
#+end_quote

#+begin_quote
A /programming paradigm/ refers to a high-level approach used to
structure and conceptualize the implementation of computer programs.
#+end_quote


** What is object-oriented programming language?

#+begin_quote
/Object-oriented programming (OOP)/ is a programming paradigm based on
the concept of objects, which can contain data (attributes or
properties) and code (methods).
#+end_quote

** What is high-level programming language?

#+begin_quote
A /high-level programming language/ (HLL) is a programming language
that is designed to be easier for humans to read, write, and
understand, while still being able to be executed by a computer
#+end_quote

#+begin_quote
In /High-Level programming language/ it may use natural language
elements, be easier to use, or may automate significant areas of
computing systems, making the process of developing a program simpler
and more understandable.
#+end_quote

** What is General-Purpose language?

#+begin_quote
Python is /General-Purpose language/. It means that you can use Python
in various domains including: Web applications, Big data applications,
Testing, Automation, Data science, machine learning, and AI, Desktop
software, Mobile apps etc.
#+end_quote

** What is Python Interpreter?


** The Python interpreter

It is a computer program that converts high-level Python program
statements into machine code. The Python interpreter is usually
installed as ‘/usr/local/bin/python3.11’ on those machines where it is
available; The interpreter operates somewhat like the Unix shell: when
called with standard input connected to a tty device, it reads and
executes commands interactively.

This** Keywords

/Python keywords/ are reserved words in the Python programming
language that have special meanings and purposes. These keywords
cannot be used as variable names, function names, or any other
identifiers within Python code.

False      await      else       import     pass
None       break      except     in         raise
True       class      finally    is         return
and        continue   for        lambda     try
as         def        from       nonlocal   while
assert     del        global     not        with
async      elif       if         or         yield

** Keywords categorization by their usage

| Control flow |                                                    |
|--------------+----------------------------------------------------|
| if           | Conditional execution                              |
| elif         | Allows checking multiple conditions                |
| else         | Else condition                                     |
| for          | Looping over sequences                             |
| while        | Looping with a condition                           |
| break        | Exit the loop                                      |
| continue     | Skip the rest iteration and continue with the next |
| pass         | Do nothing statement                               |
| return       | Return a value from function                       |
| yield        | Return a generator                                 |
| try          | Start of exception handling                        |
| except       | Catch an exception                                 |
| finally      | Execute code even if exception occurred            |
| raise        | Raise an exception                                 |

* The Programming Pillars:

Input/Output
Assignment
Comparison operations
Control flow operations
Procedures
Miscelellaneous

** What means =input/output= in Python?

#+begin_quote
Input/Output (I/O) in Python refers to the process of taking input
from the user or external sources and displaying output to the user or
saving it to a file.
#+end_quote

#+begin_quote
There are no specific keywords in Python dedicated solely for
input/output (I/O) operations. Python's I/O functionality is primarily
handled using built-in functions like ~input()~ and ~print()~ rather
than reserved keywords.
#+end_quote

** What means =assignment= in Python?

#+begin_quote
In Python, assignment refers to the process of binding a name to a
value or object.
#+end_quote

#+begin_quote
Python's assignment functionality is primarily handled using the
assignment operator (=) and various augmented assignment operators
like +=, -=, *=, etc.

The /keywords/ that are most closely related to assignment in Python
are:

~del~: Used to delete a variable or remove elements from a list,
tuple, or dictionary;

~global~: Used to declare a variable as global inside a function;

~nonlocal~: Used to declare a variable as non-local inside a nested
function.
#+end_quote

** What means =comparison= operation in Python?

#+begin_quote
Comparison operations in Python refer to the use of comparison or
relational operators to compare variables or values. These operators
are essential in Python for making decisions based on conditions and
for controlling the flow of a program.

Python comparison operators include:
== (Equal to): Returns true if the two operands are equal.

!= (Not equal to): Returns true if the two operands are not equal.

> (Greater than): Returns true if the value of the left operand is
greater than the right operand.

< (Less than): Returns true if the value of the left operand is less
than the right operand.

>= (Greater than or equal to): Returns true if the value of the left
operand is greater or equal to the right operand.

<= (Less than or equal to): Returns true if the value of the left
operand is less or equal to the right operand.
#+end_quote

** What is =control flow operations= in programming?

/Control flow/ is the /order/ in which individual statements,
instructions or function calls of an imperative program are executed
or evaluated.

Python provides several control flow constructs:

Conditional statements:

- ~if~ statement: Executes a block of code if a condition is True;
- ~if-else~ statement: Executes one block of code if a condition is
  True, and another block if it's False;
- ~if-elif-else~ statement: Allows checking multiple conditions.

Loops:

- ~for~ loop: Iterates over a sequence (like a list or string);
- ~while~ loop: Executes a block of code as long as a condition is
  True.

Transfer statements:

- ~break~ statement: Terminates the current loop and resumes execution
  at the next statement;
- ~continue~ statement: Skips the current iteration of a loop and
  moves to the next iteration.

The ~pass~ statement:

The body of a Python compound statement cannot be empty — it must
contain at least one statement. The ~pass~ statement, which performs
no action, can be used as a placeholder when a statement is
syntactically required but you have nothing specific to do.

Exception handling statements:

Python supports exception handling with the ~try~ statement, which
includes ~try~, ~except~, ~finally~, and ~else~ clauses.

** What is =procedures= in Python?

In Python, "procedures" typically refer to functions that perform
specific tasks or operations. Procedures (or functions)
are fundamental building blocks that allow you to encapsulate code
into reusable and modular units.

These keywords enable the creation and manipulation of functions:

~def~: Used to define a function;

~return~: Used to return a value from a function;

~yield~ Is a powerful tool for creating generators. It's used when you
need to iterate over a sequence of values efficiently

* Data model
** Objects, values and types

/Objects/ are Python’s abstraction for data.  All data in a Python
program is represented by objects or by relations between objects.

Every object has an identity, a type and a value.

*** Object identity

Object identity refers to the unique integer value that identifies an
object. This identity is unique during the lifetime of the object and
remains constant throughout its lifetime. It can be thought of as the
object's address in memory.

~is~ operator compares the identity of two objects; the ~id()~
function returns an integer representing its identity.

#+begin_src python :results output
  a = 10
  b = 15
  print(id(a))
  print(id(b))
#+end_src

#+RESULTS:
: 10861480
: 10861640

#+begin_src python :results output
  a = [1, 2, 3]
  b = a
  c = [1, 2, 3]
  print(a is b)
  print(a is c)
  print(a == c)
#+end_src

#+RESULTS:
: True
: False
: True

Use ~is~ to check if two variables reference the same object;
Use == to check if two variables have the same value.

*** An object's type and value

An object’s type determines the operations that the object supports
and also defines the possible values for objects of that type.
~type()~ function returns an object’s type. Like its identity, an
object’s ‘type’ is also unchangeable.

#+begin_src python :results output
  x = 5
  print(type(x))
#+end_src

#+RESULTS:
: <class 'int'>

The ‘value’ of some objects can change. Objects whose value can change
are said to be /mutable/; objects whose value is unchangeable once
they are created are called /immutable/. Numbers, strings and tuples
are /immutable/, while dictionaries and lists are /mutable/.

Some objects contain references to other objects; these are called
/containers/. Examples of containers are tuples, lists and
dictionaries.

#+begin_src python :results output
  my_list = [
    "hello",
    42,
    3,56,
    [1, 2, 3],
    {'key': 'value'}
    ]
  print(my_list)
#+end_src

#+RESULTS:
: ['hello', 42, 3, 56, [1, 2, 3], {'key': 'value'}]

***  A list of types that are built into Python

- /None/: It is used to signify the absence of a value in many
  situations, e.g., it is returned from functions that don’t
  explicitly return anything;
- /NotImplemented/: Numeric methods and rich comparison methods should
  return this value if they do not implement the operation for the
  operands provided;
- /Ellipsis/: This object is accessed through the literal ‘...’ or the
  built-in name ‘Ellipsis’;
- /Number/: These are created by numeric literals and returned as
  results by arithmetic operators and arithmetic built-in functions.
  Numeric objects are immutable;

****  Numbers in Python

Python supports three types of numbers: /integers, floats and complex/
numbers. These types are used to represent numeric data in Python
programming.

- /Integers/ (int) are whole numbers, including negative numbers but
  not fractions. These represent numbers in an unlimited range.  The
  /Boolean/ (bool) type is a subtype of the integer type. These
  represent the truth values /False/ and /True/.
- /Float/ (float) are real numbers with a fractional part denoted by
  the decimal symbol or the scientific notation.
- /Complex/ (complex) store the real and imaginary parts as floats by
  default.

  Type Conversion:


- ~int()~ Function converts a string or float to an integer;

- ~float()~ Function converts a string or integer to a float;

- ~complex()~ Function converts a string or float to a complex number;

  Operations:

- /Arithmetic Operations/: Integers and floats support basic
  arithmetic operations like addition, subtraction, multiplication,
  and division;

- /Modulus/: The modulus operator (%) returns the remainder of the
  division operation;

- /Exponentiation/: The exponentiation operator (***) raises a number
  to a power;

- /Absolute Value/: The ~abs()~ function returns the absolute value of
  a number.

  Built-in Functions:

  - ~math~ module: provides functions like ~sqrt()~, ~exp()~ and
    ~pi()~ for mathematical operations;

    #+begin_src python :results output
      import math
      print(math.pi)
      print(math.e)
      print(math.exp(10))
    #+end_src

    #+RESULTS:
    : 3.141592653589793
    : 2.718281828459045
    : 22026.465794806718

  - ~max()~ and ~min()~ functions: return the maximum and minimum
    values of a set of numbers.

    #+begin_src python :results output
      numbers = [4, 12, 43.3, 19, 100]
      print("Minimum:", min(numbers))
      print("Maximum:", max(numbers))

    #+end_src

    #+RESULTS:
    : Minimum: 4
    : Maximum: 100



* Questions
** Is Python compiled language?
** Is Python interpreted language?

















 



